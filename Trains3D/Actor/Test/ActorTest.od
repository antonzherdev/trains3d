package com.antonzherdev.actor

import com.antonzherdev.test._

class TestedActor extends TypedActor {
    var items : [int] = []

    def add(number : int) {
        items += number
    }

    def getItems = prompt {
        items
    }

    def getItemsF = future {
        items
    }
}


class ActorTest extends TestCase {
    def testTypedActor {
        val ta = TestedActor()
        val a = ta.actor
        var n = 0
        var items : [int] = []
        var en = 0
        log("!!ADD")
        1.to(100).for{ i ->
            items += i
            a.add(i)
            n++
            if(ta.items.count == n) en++
        }
//        assertEquals(n, a.getItems)
        log("!!END_ADD")
        val result = a.getItems.waitResult(1).get.get
        val result2 = a.getItemsF.waitResult(1).get.get
        log("!!GOT")
        assertEquals(items, result)
        assertEquals(items, result2)
        assertTrue(en != 100)
    }
}
