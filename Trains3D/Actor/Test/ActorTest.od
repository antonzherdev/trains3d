package com.antonzherdev.actor

import com.antonzherdev.test._
import com.antonzherdev.test.Assert._

class TestedActor extends TypedActor {
    var items : [string] = []

    def add(number : string) = future {
        items += number
    }

    def getItems = prompt {
        items
    }

    def getItemsF = future {
        items
    }
}


class ActorTest extends TestCase {
    def testTypedActor {
        val ta = TestedActor()
        val a = ta.actor
        var n = 0
        var items : [string] = []
        var en = 0
        log("!!ADD")
        val count = 1000
        1.to(count).for{ i ->
            Memory.autoreleasePoolStart
            items += "$i"
            a.add("$i")
            n++
            if(ta.items.count == n) en++
            Memory.autoreleasePoolEnd
        }
//        assertEquals(n, a.getItems)
        log("!!END_ADD")
        val result = a.getItems.waitResult(1).get.get
        val result2 = a.getItemsF.waitResult(1).get.get
        log("!!GOT")
        assertEquals(items, result)
        assertEquals(items, result2)
        assertTrue(en != count)
    }
}
