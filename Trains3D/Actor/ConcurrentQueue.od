package com.antonzherdev.actor

class ConcurrentQueueNode<T> {
    static def apply<T>(item : T) : ConcurrentQueueNode<T> = {
        val ret = ConcurrentQueueNode<T>()
        ret.item = item
        ret
    }

    var item : T
    var next : ConcurrentQueueNode<T>
}


class ConcurrentQueue<T> extends Queue<T> {
    private var _head : ConcurrentQueueNode<T> = ConcurrentQueueNode<T>()
    private var _tail : ConcurrentQueueNode<T> = _head
    private val hLock : Lock = Lock()
    private val tLock : Lock = Lock()
    private val _count = AtomicInt()

    def count = _count.intValue

    def enqueue(item : T) {
        val node = ConcurrentQueueNode<T>(item)
        tLock.lock
        _tail.next = node
        _tail = node
        _count.incrementAndGet
        tLock.unlock
    }

    def dequeue : T? = {
        hLock.lock
        val node = _head
        val newHead = node.next
        if(newHead == nil) {
            hLock.unlock
            return Option.none<T>
        }
        val item = newHead.item
        _head = newHead
        _count.decrementAndGet
        hLock.unlock
        item
    }

    def peek : T? = {
        hLock.lock
        val node = _head
        val newHead = node.next
        if(newHead == nil) {
            hLock.unlock
            return Option.none<T>
        }
        val item = newHead.item
        hLock.unlock
        item
    }

    def isEmpty : bool = {
        return _count.intValue == 0
    }
}
