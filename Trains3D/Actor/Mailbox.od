package com.antonzherdev.actor

class Mailbox {
    private val _scheduled = AtomicBool()

    private val _queue = ConcurrentQueue<ActorMessage>()
    def send(message : ActorMessage) {
        if(message.prompt) {
            if(!_scheduled.getAndSet(true)) {
                if(_queue.isEmpty) {
                    message.process
                    Memory.memoryBarrier
                    if(_queue.isEmpty) {
                        _scheduled.set(false)
                        Memory.memoryBarrier
                        if(!_queue.isEmpty) {
                            trySchedule
                        }
                    } else {
                        schedule
                    }
                } else {
                    _queue.enqueue(message)
                    schedule
                }
            } else {
                _queue.enqueue(message)
                trySchedule
            }
        } else {
            _queue.enqueue(message)
            trySchedule
        }
//        _queue.enqueue(message)
//        trySchedule
    }

    private def trySchedule {
        if(!_scheduled.getAndSet(true)) {
            schedule
        }
    }

    private def schedule {
        DispatchQueue.default.async{
            Memory.autoreleasePoolStart
            processQueue
            Memory.autoreleasePoolEnd
        }
    }

    private def processQueue {
        var left = 5
        while(left > 0) {
            val message = _queue.dequeue
            if(message.isDefined) {
                message.get.process
            } else {
                break
            }
            left--
        }
        if(_queue.isEmpty) {
            _scheduled.set(false)
            Memory.memoryBarrier
            if(!_queue.isEmpty) {
                trySchedule
            }
        } else {
            schedule
        }
    }
}


trait ActorMessage{
    def sender : Actor
    def receiver : Actor
    def prompt : bool
    def process
}


class TypedActorFuture<T>(receiver : TypedActor, f : void -> T, prompt : bool) extends DefaultPromise<T> with ActorMessage {
    def process {
        success(f())
    }

    def sender : Actor = nil
}