package com.antonzherdev.actor

class Mailbox {
    private val _scheduled = AtomicBool()

    private val _queue = ConcurrentQueue<ActorMessage>()
    def send(message : ActorMessage) {
        _queue.enqueue(message)
        schedule(message.prompt)
    }

    private def schedule(prompt : bool) {
        if(!_scheduled.getAndSet(true)) {
            if(prompt && _queue.count == 1) processQueue
            else {
                DispatchQueue.default.async{
                    processQueue
                }
            }
        }
    }

    private def processQueue {
        val message = _queue.dequeue
        if(message.isDefined) {
            message.get.process
            _scheduled.set(false)
            Memory.memoryBarrier
            schedule(prompt = false)
        } else {
            _scheduled.set(false)
            Memory.memoryBarrier
            if(!_queue.isEmpty) {
                schedule(prompt = false)
            }
        }
    }
}


trait ActorMessage{
    def sender : Actor
    def receiver : Actor
    def prompt : bool
    def process
}
