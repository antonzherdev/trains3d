package com.antonzherdev.actor

class Mailbox {
    private val _scheduled = AtomicBool()

    private var _actor : Actor = nil
    private val _queue = ConcurrentQueue<ActorMessage>()
    def send(message : ActorMessage, receiver : Actor) {
        _queue.enqueue(message)
        _actor = receiver
        schedule(message.prompt)
    }

    private def schedule(prompt : bool) {
        if(!_scheduled.getAndSet(true)) {
            if(prompt) processQueue
            else {
                DispatchQueue.default.async{
                    processQueue
                }
            }
        }
    }

    private def processQueue {
        val message = _queue.dequeue
        if(message.isDefined) {
            _actor.process(message.get)
            _scheduled.set(false)
            schedule(prompt = false)
        } else {
            _actor = nil
            _scheduled.set(false)
        }
    }
}


trait ActorMessage{
    def sender : Actor
    def prompt : bool
}
