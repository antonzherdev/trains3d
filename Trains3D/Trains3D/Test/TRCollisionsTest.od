package com.antonzherdev.trains

import com.antonzherdev.eg._
import test._

class TRCollisionsTest extends CNTestCase {
    static val carLen = TRCarType.car.fullLength
    static val carWidth = TRCarType.car.width
    static val carConLen = TRCarType.car.startToFront
    def newLevel = TRLevel(TRLevelRules(EGVec2I(5, 3), TRLevelFactory.scoreRules, 30, []))


    def check(level : TRLevel) : CNSet<TRTrain> = level.detectCollisions.chain.flatMap(_.cars).map(_.train).toSet

    def testStraight {
        val level = newLevel
        level.railroad.tryAdd(TRRail(EGVec2I(0, 0), TRRailForm.leftRight))
        level.railroad.tryAdd(TRRail(EGVec2I(1, 0), TRRailForm.leftRight))
        level.railroad.tryAdd(TRRail(EGVec2I(2, 0), TRRailForm.leftRight))
        doTest1For(level, TRRailForm.leftRight)
    }

    def doTest1For(level : TRLevel, form : TRRailForm) {
        val t1 = TRTrain(level, TRTrainType.simple, TRColor.green, [TRCar(_, TRCarType.car)], 0)
        val p = TRRailPoint(EGVec2I(0, 0), form, 0, false)
        var p2 = level.railroad.moveWith(false, carLen, p).point
        level.testRun(t1, p2)

        val t2 = TRTrain(level, TRTrainType.simple, TRColor.orange, [TRCar(_, TRCarType.car), TRCar(_, TRCarType.car)], 0)
        p2 = level.railroad.moveWith(false, carLen*3, p).point
        level.testRun(t2, p2)
        var cols = check(level)
        assertTrue(cols.isEmpty)

        p2 = p2.add(-2*carConLen + 0.1)
        t2.set(head = p2)
        cols = check(level)
        assertTrue(cols.isEmpty)

        p2 = p2.add(-0.2)
        t2.set(head = p2)
        cols = check(level)
        assertEquals(cols, [t1, t2].toSet)

        assertEquals(level.trains.count, 2)
        assertEquals(level.railroad.damagesPoints.count, 0)
        level.processCollisions
        assertEquals(level.trains.count, 0)
        assertEquals(level.railroad.damagesPoints.count, 1)
        val damage = level.railroad.damagesPoints[0]
        val l = carLen - TRCarType.car.startToWheel
        assertTrue(damage.x.between(l - 0.15, l + 0.15))
    }

    def testTurn {
        val level = newLevel
        level.railroad.tryAdd(TRRail(EGVec2I(0, 0), TRRailForm.leftTop))
        level.railroad.tryAdd(TRRail(EGVec2I(0, 1), TRRailForm.bottomRight))
        level.railroad.tryAdd(TRRail(EGVec2I(1, 1), TRRailForm.leftRight))
        level.railroad.tryAdd(TRRail(EGVec2I(2, 1), TRRailForm.leftRight))
        doTest1For(level, TRRailForm.leftTop)
    }

    def testCross {
        val level = newLevel
        level.railroad.tryAdd(TRRail(EGVec2I(1, 1), TRRailForm.leftRight))
        level.railroad.tryAdd(TRRail(EGVec2I(1, 1), TRRailForm.bottomTop))
        level.railroad.tryAdd(TRRail(EGVec2I(2, 1), TRRailForm.leftRight))
        level.railroad.tryAdd(TRRail(EGVec2I(3, 1), TRRailForm.leftRight))
        level.railroad.tryAdd(TRRail(EGVec2I(1, 0), TRRailForm.bottomTop))

        val t1 = TRTrain(level, TRTrainType.simple, TRColor.green, [TRCar(_, TRCarType.car)], 0)
        val p = TRRailPoint(EGVec2I(1, 1), TRRailForm.bottomTop, 0, false)
        val p1 = level.railroad.moveWith(false, 0.5 - carWidth - 0.001, p).point
        level.testRun(t1, p1)

        val t2 = TRTrain(level, TRTrainType.simple, TRColor.orange, [TRCar(_, TRCarType.car), TRCar(_, TRCarType.car)], 0)
        p = TRRailPoint(EGVec2I(1, 1), TRRailForm.leftRight, 0, false)
        val p2 = level.railroad.moveWith(false, carLen*2, p).point
        level.testRun(t2, p2)
        var cols = check(level)
        assertTrue(cols.isEmpty)

        t1.set(head = p2.add(-0.002))
        cols = check(level)
        assertEquals(cols, [t1, t2].toSet)
    }
}