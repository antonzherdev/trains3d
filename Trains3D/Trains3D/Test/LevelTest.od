package com.antonzherdev.trains

import objd.test._

@Test
class LevelTest extends TestCase {
    @Test
    def testLock {
        repeat(10) {
            val level : Level = LevelFactory.levelWith(mapSize = vec2i(5, 5))
            val railroad : Railroad = level.railroad
            val r0 = Rail(vec2i(0, 0), RailForm.leftRight)
            railroad.tryAdd(r0)
            val r1 = Rail(vec2i(1, 0), RailForm.leftRight)
            railroad.tryAdd(r1)
            railroad.tryAdd(Rail(vec2i(2, 0), RailForm.leftRight))
            railroad.tryAdd(Rail(vec2i(3, 0), RailForm.leftRight))
            railroad.tryAdd(Rail(vec2i(1, 0), RailForm.leftBottom))

            assertEquals(railroad.state.getResult(1).switches.count, 1)
            var sw = railroad.state.getResult(1).switches.head.get
            assertEquals(sw.switch.rail1.tile, vec2i(1, 0))
            assertEquals(sw.switch.rail1.form, RailForm.leftRight)
            assertTrue(sw.firstActive)

            val train = Train(level, TrainType.simple, CityColor.grey, [CarType.engine], 30)
            level.testRun(train, fromPoint = RailPoint(tile = vec2i(1, 0), RailForm.leftRight, x = 0, back = false)).getResult(1)
            level.tryTurn(sw.switch).getResult(1)
            sw = railroad.state.getResult(1).switches.head.get
            assertTrue(sw.firstActive)
            assertTrue(level.isLocked(rail = r0).getResult(1))

            train.set(head = RailPoint(tile = vec2i(3, 0), RailForm.leftRight, x = 0, back = false)).getResult(1)
            level.tryTurn(sw.switch).getResult(1)
            sw = railroad.state.getResult(1).switches.head.get
            assertFalse(sw.firstActive)
            assertFalse(level.isLocked(rail = r0).getResult(1))
        }
    }

    @Test
    def testCity {
        repeat(10) {
            val level : Level = LevelFactory.levelWith(mapSize = vec2i(2, 1))
            val railroad : Railroad = level.railroad
            railroad.tryAdd(Rail(vec2i(0, 0), RailForm.leftRight))
            railroad.tryAdd(Rail(vec2i(0, 0), RailForm.leftTop))
            railroad.tryAdd(Rail(vec2i(0, 0), RailForm.topRight))
            railroad.tryAdd(Rail(vec2i(1, 0), RailForm.leftRight))
            railroad.tryAdd(Rail(vec2i(1, 0), RailForm.leftTop))
            railroad.tryAdd(Rail(vec2i(1, 0), RailForm.topRight))

            level.createNewCity
            level.createNewCity
            Thread.sleep(0.1)
            val cities = level.cities.getResult(1.0)
            assertEquals(2, cities.count)
            cities.chain.map(_.city).for{city ->
                assertTrue(city.tile == vec2i(0, 1) || city.tile == vec2i(1, 1))
                assertEquals(CityAngle.angle90, city.angle)
            }
        }
    }
}