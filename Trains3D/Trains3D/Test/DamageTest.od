package com.antonzherdev.trains

import objd.test._

@Test
class DamageTest extends TestCase {
    @Test
    def testMain {
        val railroad : Railroad = LevelFactory.railroadWith(vec2i(4, 3))

        railroad.tryAdd(Rail(vec2i(1, 1), RailForm.leftRight))
        railroad.addDamageAt(RailPoint(vec2i(1, 1), RailForm.leftRight, 0.3, false))
        railroad.addDamageAt(RailPoint(vec2i(1, 1), RailForm.leftRight, 0.6, true))

        var damagesCount : [float] = []
        val p0 = RailPoint(vec2i(1, 1), RailForm.leftRight, 0, false)
        val p1 = railroad.state.getResult(1).moveWith(obstacleProcessor = o -> {
            if(o.obstacleType == ObstacleType.damage) damagesCount += o.point.x
            true
        }, forLength = 1, p0)
        floatArrayEquals(damagesCount, [0.3, 0.35])
        assertEquals(p1.error, 0)
        assertEquals(p1.point.x, 1)

        damagesCount = []
        val p00 = railroad.state.getResult(1).moveWith(obstacleProcessor = o -> {
            if(o.obstacleType == ObstacleType.damage) damagesCount += o.point.x
            true
        }, forLength = 1, p1.point.invert)
        floatArrayEquals(damagesCount, [0.65, 0.7])
        assertEquals(p00.error, 0)
        assertEquals(p00.point.x, 1)

        damagesCount = []
        val p01 = railroad.state.getResult(1).moveWith(obstacleProcessor = o -> {
            if(o.obstacleType == ObstacleType.damage) damagesCount += o.point.x
            false
        }, forLength = 1, p1.point.invert)
        floatArrayEquals(damagesCount, [0.65])
        assertTrue(p01.error == 0.35)
        assertTrue(p01.point.x == 0.65)
    }
}