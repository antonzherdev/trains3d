package com.antonzherdev.trains

import com.antonzherdev.eg._
import com.antonzherdev.test._

class DamageTest extends TestCase {
    def testMain {
        val railroad = Railroad(MapSso(vec2i(4, 3)), Score(LevelFactory.scoreRules))

        railroad.tryAdd(Rail(vec2i(1, 1), RailForm.leftRight))
        railroad.addDamageAt(RailPoint(vec2i(1, 1), RailForm.leftRight, 0.2, false))
        railroad.addDamageAt(RailPoint(vec2i(1, 1), RailForm.leftRight, 0.6, true))

        var damagesCount : [float] = []
        val p0 = RailPoint(vec2i(1, 1), RailForm.leftRight, 0, false)
        val p1 = railroad.moveWith(obstacleProcessor = o -> {
            if(o.obstacleType == ObstacleType.damage) damagesCount += o.point.x
            true
        }, forLength = 1, p0)
        assertEquals(damagesCount, [0.2, 0.4])
        assertEquals(p1.error, 0)
        assertEquals(p1.point.x, 1)

        damagesCount = []
        val p00 = railroad.moveWith(obstacleProcessor = o -> {
            if(o.obstacleType == ObstacleType.damage) damagesCount += o.point.x
            true
        }, forLength = 1, p1.point.invert)
        assertEquals(damagesCount, [0.6, 0.8])
        assertEquals(p00.error, 0)
        assertEquals(p00.point.x, 1)

        damagesCount = []
        val p01 = railroad.moveWith(obstacleProcessor = o -> {
            if(o.obstacleType == ObstacleType.damage) damagesCount += o.point.x
            false
        }, forLength = 1, p1.point.invert)
        assertEquals(damagesCount, [0.6])
        assertEquals(p01.error, 0.4)
        assertEquals(p01.point.x, 0.6)
    }
}