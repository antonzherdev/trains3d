package com.antonzherdev.trains

import com.antonzherdev.eg._
import com.antonzherdev.test._
import com.antonzherdev.test.Assert._

class TrainCollisionsTest extends TestCase {
    static val carLen = CarType.engine.fullLength
    static val carWidth = CarType.engine.width
    static val carConLen = CarType.engine.startToFront
    def newLevel = LevelFactory.levelWith(mapSize = vec2i(5, 3))

    def check(level : Level) : Set<Train> = {
        Thread.sleep(0.05)
        level.detectCollisions.waitResult(10).get.get.chain.flatMap(_.trains).toSet
    }

    def testStraight {
        repeat(100) {
            val level = newLevel
            level.railroad.tryAdd(Rail(vec2i(0, 0), RailForm.leftRight))
            level.railroad.tryAdd(Rail(vec2i(1, 0), RailForm.leftRight))
            level.railroad.tryAdd(Rail(vec2i(2, 0), RailForm.leftRight))
            doTest1For(level, RailForm.leftRight, big = false)
        }

        val level = newLevel
        level.railroad.tryAdd(Rail(vec2i(0, 0), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(1, 0), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(2, 0), RailForm.leftRight))
        doTest1For(level, RailForm.leftRight, big = true)
    }

    def doTest1For(level : Level, form : RailForm, big : bool) {
        val t1 = Train(level, TrainType.simple, CityColor.green, [CarType.engine], 0)
        val p = RailPoint(vec2i(0, 0), form, 0, false)
        var p2 = level.railroad.state.getResult(1).moveWith(false, carLen, p).point
        level.testRun(t1, p2)

        val t2 = Train(level, TrainType.simple, CityColor.orange, [CarType.engine, CarType.engine], 0)
        p2 = level.railroad.state.getResult(1).moveWith(false, carLen*3, p).point
        level.testRun(t2, p2)
        var cols = check(level)
        assertTrue(cols.isEmpty)

        p2 = p2.add(-2*carConLen + 0.1)
        t2.set(head = p2)
        cols = check(level)
        assertTrue(cols.isEmpty)

        p2 = p2.add(-0.2)
        t2.set(head = p2)
        cols = check(level)
        assertEquals(cols, [t1, t2].toSet)

        if(big) {
            assertEquals(level.trains.getResult(1).count, 2)
            assertEquals(level.railroad.state.getResult(1).damages.points.count, 0)
            level.processCollisions
            Thread.sleep(0.5)
            assertEquals(level.trains.getResult(1).count, 0)
            level.updateWith(delta = 5.1)
            Thread.sleep(0.5)
            assertEquals(level.railroad.state.getResult(1).damages.points.count, 1)
        }
    }

    def testTurn {
        val level = newLevel
        level.railroad.tryAdd(Rail(vec2i(0, 0), RailForm.leftTop))
        level.railroad.tryAdd(Rail(vec2i(0, 1), RailForm.bottomRight))
        level.railroad.tryAdd(Rail(vec2i(1, 1), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(2, 1), RailForm.leftRight))
        doTest1For(level, RailForm.leftTop, big = true)
    }

    def testCross {
        val level = newLevel
        level.railroad.tryAdd(Rail(vec2i(1, 1), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(1, 1), RailForm.bottomTop))
        level.railroad.tryAdd(Rail(vec2i(2, 1), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(3, 1), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(1, 0), RailForm.bottomTop))

        val t1 = Train(level, TrainType.simple, CityColor.green, [CarType.engine], 0)
        var p = RailPoint(vec2i(1, 1), RailForm.bottomTop, 0, false)
        val p1 = level.railroad.state.getResult(1).moveWith(false, 0.5 - carWidth - 0.001, p).point
        level.testRun(t1, p1)

        val t2 = Train(level, TrainType.simple, CityColor.orange, [CarType.engine, CarType.engine], 0)
        p = RailPoint(vec2i(1, 1), RailForm.leftRight, 0, false)
        val p2 = level.railroad.state.getResult(1).moveWith(false, carLen*2, p).point
        level.testRun(t2, p2)
        var cols = check(level)
        assertTrue(cols.isEmpty)

        t1.set(head = p2.add(-0.002))
        cols = check(level)
        assertEquals(cols, [t1, t2].toSet)
    }

    def emulate(level : Level, seconds : float) {
        1.to(30*seconds).for{ii ->
            level._updateWith(delta = 1.0/30.0).getResult(1)

//            level.dummy.getResult(2)
//            level.collisionWorld.dummy.getResult(2)
//            level.trains.getResult(2).for(_.dummy.getResult(2))
//            level.dummy.getResult(2)
        }
        Thread.sleep(0.05*seconds)
        var i = 0
        while(i < 10) {
            level.dummy.getResult(2)
            level.collisionWorld.dummy.getResult(2)
            level.trains.getResult(2).for(_.dummy.getResult(2))
            level.dummy.getResult(2)
            i ++
        }
        log("=========")
    }

    def testSimulation {
        val level = newLevel
        level.railroad.tryAdd(Rail(vec2i(0, 0), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(1, 0), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(2, 0), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(3, 0), RailForm.leftRight))

        level.railroad.tryAdd(Rail(vec2i(0, 2), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(1, 2), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(2, 2), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(3, 2), RailForm.leftRight))

        level.railroad.tryAdd(Rail(vec2i(0, 3), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(1, 3), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(2, 3), RailForm.leftRight))
        level.railroad.tryAdd(Rail(vec2i(3, 3), RailForm.leftRight))

        val c1 = Train(level, TrainType.simple, CityColor.green, [CarType.engine], 100)
        var p = RailPoint(vec2i(0, 0), RailForm.leftRight, c1.length, back = false)
        level.testRun(c1, p)

        val c2 = Train(level, TrainType.simple, CityColor.green, [CarType.engine], 100)
        p = RailPoint(vec2i(3, 0), RailForm.leftRight, c2.length, back = true)
        level.testRun(c2, p)

        assertEquals(level.trains.getResult(1).count, 2)
        assertEquals(level.dyingTrains.getResult(1).count, 0)

        emulate(level, seconds = 1.0)
        assertEquals(level.trains.getResult(1).count, 2)
        assertEquals(level.dyingTrains.getResult(1).count, 0)

        emulate(level, seconds = 1.0)
        assertEquals(level.trains.getResult(1).count, 0)
        assertEquals(level.dyingTrains.getResult(1).count, 2)

        val st1 = level.dyingTrains.getResult(1).chain.map(_.state).future(_.toArray).getResult(1)
        val st11 = level.dyingTrains.getResult(1).chain.map(_.state).future(_.toArray).getResult(1)
        assertTrue(st1 == st11)
        emulate(level, seconds = 0.1)
        val st2 = level.dyingTrains.getResult(1).chain.map(_.state).future(_.toArray).getResult(1)
        assertTrue(st1 != st2)
    }
}