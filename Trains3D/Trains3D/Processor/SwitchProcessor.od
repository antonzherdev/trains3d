package com.antonzherdev.trains

import com.antonzherdev.eg._

class SwitchProcessor(level : Level) extends InputProcessor {

    val switchShape = CollisionBox2d(0.45, 0.45)
    val world = CollisionWorld<RailroadConnectorContent>()
    private val obs = Railroad.changedNotification.observe { _ ->
        self.world.clear
        self.level.railroad.switches.for{switch ->
            val body = CollisionBody(switch, switchShape, isKinematic = false)
            body.translate(switch.tile.x, switch.tile.y, 0)
            body.rotate(switch.connector.angle, 0, 0, 1)
            body.translate(-switchShape.size.x/2, 0, 0)
            self.world.add(body)
        }
        self.level.railroad.lights.for{light ->
            var sz = 0.5
            var sy = 0.6
            val sh = light.shift
            var x = sh.z
            var y = sh.x
            var z = sh.y + sz/4
            if(light.connector == RailConnector.top ) {
                val next = nextConnect(light)
                if(next.is<RailLight>) {
                    sy -= 0.15
                    y -= 0.2
                }
                if(next.is<Switch>) {
                    sy -= 0.1
                    y -= 0.1
                }
                if(level.railroad.contentIn(light.tile + vec2i(-1, 1), RailConnector.right).is<RailLight>) {
                    z -= 0.15
                    sz -= 0.2
                }
            }
            if(light.connector == RailConnector.bottom ) {
                if(nextConnect(light).is<RailLight>) {
                    y -= 0.23
                    sy -= 0.15
                }
                val cont = level.railroad.contentIn(light.tile + vec2i(-1, 0), RailConnector.right)
                if(cont.is<RailLight> || cont.is<Switch>) {
                    z -= 0.1
                    sz -= 0.1
                }
                val cont2 = level.railroad.contentIn(light.tile, RailConnector.left)
                if(cont2.is<Switch>) {
                    y += 0.1
                    sy -= 0.1
                }
            }
            if(light.connector == RailConnector.left) {
                if(nextConnect(light).is<Switch>) {
                    sy -= 0.1
                    y += 0.15
                }
                if(level.railroad.contentIn(light.tile + vec2i(-1, 1), RailConnector.bottom).is<Switch>) {
                    z -= 0.1
                    sz -= 0.1
                }
            }
            if(light.connector == RailConnector.right) {
                if(level.railroad.contentIn(light.tile, RailConnector.top).is<Switch>) {
                    z -= 0.1
                    sz -= 0.1
                }
            }

            val body = CollisionBody(light, CollisionBox2d(sz, sy), isKinematic = false)

            val stand =
                if(light.connector == RailConnector.top || light.connector == RailConnector.bottom)
                    mat4.identity.rotate(90, 1, 0, 0)
                else mat4.identity.rotate(90, 0, 1, 0)
            val moveToPlace = mat4.identity.translate(x, y, z)
            val rotateToConnector = mat4.identity.rotate(light.connector.angle, 0, 0, 1)
            val moveToTile = mat4.identity.translate(light.tile.x, light.tile.y, 0)

            body.matrix = moveToTile * rotateToConnector * moveToPlace * stand
            self.world.add(body)
        }
    }


    private def dzFor(light : RailLight) : float4 = {
        if(light.connector == RailConnector.bottom
            && level.railroad.contentIn(light.tile + vec2i(-1, 0), RailConnector.right).is<RailLight>) -0.15
        else if(light.connector == RailConnector.top
            && level.railroad.contentIn(light.tile + vec2i(-1, 1), RailConnector.right).is<RailLight>) -0.15
        else 0
    }

    private def nextConnect(light : RailLight) : RailroadConnectorContent = {
        val c = light.connector
        level.railroad.contentIn(c.next(light.tile), c.otherSideConnector)
    }


    def recognizers: Recognizers = Recognizer(Tap()) {event : Event ->
        val downed = world.closestCrossPointWith(event.segment).map(_.body.data)
        if(downed.isDefined) {
            downed.get.as<Switch>.for(level.tryTurn(theSwitch = _ ))
            downed.get.as<RailLight>.for(_.turn)

            true
        } else false
    }
}