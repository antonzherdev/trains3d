package com.antonzherdev.trains

import com.antonzherdev.eg._

class SwitchProcessor(level : Level) extends InputProcessor {

    val switchShape = CollisionBox2d(0.4, 0.4)
    val lightShape = CollisionBox2d(0.4, 0.24)
    val world = CollisionWorld<RailroadConnectorContent>()
    private val obs = Railroad.changedNotification.observe { _ ->
            self.world.clear
            self.level.railroad.switches.for{switch ->
            val body = CollisionBody(switch, switchShape, isKinematic = false)
            body.translate(switch.tile.x, switch.tile.y, 0)
            body.rotate(switch.connector.angle, 0, 0, 1)
            body.translate(-0.35, 0, 0)
            self.world.add(body)
        }
        self.level.railroad.lights.for{light ->
            val body = CollisionBody(light, lightShape, isKinematic = false)
            body.translate(light.tile.x, light.tile.y, 0)
            body.rotate(light.connector.angle, 0, 0, 1)
            val shift = light.shift
            body.translate(shift.z, shift.x, 0.1)
            body.rotate(90, 0, 1, 0)
            self.world.add(body)
        }
    }


    def recognizers: Recognizers = Recognizer(Tap()) {event : Event ->
        val downed = world.closestCrossPointWith(event.segment).map(_.body.data)
        if(downed.isDefined) {
            downed.get.as<Switch>.for(level.tryTurn(theSwitch = _ ))
            downed.get.as<RailLight>.for(_.turn)

            true
        } else false
    }
}