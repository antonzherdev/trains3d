package com.antonzherdev.trains

import com.antonzherdev.eg._
import core.math._

class RailroadBuilderProcessor(builder : RailroadBuilder) extends InputProcessor {
    private val mouseProcessor = RailroadBuilderMouseProcessor(builder)
    private val touchProcessor = TouchToMouse(mouseProcessor)

    def process(event : Event) : bool = event.leftMouse(mouseProcessor) || event.touch(touchProcessor)
}

class RailroadBuilderMouseProcessor(builder : RailroadBuilder) extends MouseProcessor {
    private var startedPoint : vec2? = nil

    def mouseDown(event : Event) = {
        startedPoint = event.location
        true
    }

    def mouseDrag(event : Event) =
        if(startedPoint.isEmpty) false
        else {
            val line = Line2(p0 = startedPoint.get, p1 = event.location)

            if(line.u.lengthSquare > 0.25) {
                val nl = line.normalize
                val mid = nl.mid
                val tile = mid.round

                val a = nl.degreeAngle
                var f : RailForm
                if(a < -157.5) f = RailForm.leftRight
                else if(a < -112.5) f = RailForm.leftTop
                else if(a < -67.5) f = RailForm.bottomTop
                else if(a < -22.5) f = RailForm.leftBottom
                else if(a < 22.5) f = RailForm.leftRight
                else if(a < 67.5) f = RailForm.leftTop
                else if(a < 112.5) f = RailForm.bottomTop
                else if(a < 157.5) f = RailForm.leftBottom
                else f = RailForm.leftRight

                val md = mid - tile
                if(f == RailForm.leftTop && md.y < md.x) f = RailForm.bottomRight
                else if(f == RailForm.leftBottom && md.y > -md.x) f = RailForm.topRight

                builder.tryBuild(Rail(tile, f))
            } else {
                builder.clear
            }
            true
        }

    def mouseUp(event : Event) =
        if(startedPoint.isEmpty) false
        else {
            builder.fix
            startedPoint = nil
            true
        }
}