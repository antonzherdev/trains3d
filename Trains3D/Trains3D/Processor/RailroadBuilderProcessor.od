package com.antonzherdev.trains

import com.antonzherdev.eg._
import core.math._

class RailroadBuilderProcessor(builder : RailroadBuilder) extends InputProcessor {

    private var startedPoint : vec2? = nil

    def recognizers : Recognizers = Recognizer(Pan(),
        began = event -> {
            startedPoint = event.location
            true
        },
        changed = event -> {
            val line = Line2(p0 = startedPoint.get, p1 = event.location)

            if(line.u.lengthSquare > 0.25) {
                val nl = line.normalize
                val mid = nl.mid
                val tile = mid.round

                val start = connectorsByDistanceFrom(line.p0 - tile).head
                val ends = connectorsByDistanceFrom(line.p1 - tile)
                var end = ends.head
                if(end == start) end = ends[1]

                if(builder.tryBuild(Rail(tile, RailForm.formFor(start, end)))) {
                    if(line.u.length > 1.5) {
                        builder.fix
                        startedPoint = tile + end.vec*0.5
                    }
                }
            } else {
                builder.clear
            }
       },
       ended = event -> {
           builder.fix
           startedPoint = nil
       }
    )

    private def connectorsByDistanceFrom(point : vec2) : [RailConnector] =
        RailConnector.values.chain.sortBy.asc{connector ->
            (connector.vec*0.5 - point).lengthSquare
        }.endSort.toArray
}