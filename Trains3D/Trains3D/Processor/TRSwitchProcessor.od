package com.antonzherdev.trains

import com.antonzherdev.eg._

class TRSwitchProcessor(level : TRLevel) extends MouseProcessor {
    def process(event : Event) : bool = event.leftMouse(self)

    private val index : RectIndex<(TRRailConnector, bool)> = RectIndex(
        [
            (Rect(-0.1, 0.2, 0.2, 0.3), (TRRailConnector.top, false)),
            (Rect(-0.1, 0.2, -0.5, 0.3), (TRRailConnector.bottom, false)),
            (Rect(-0.5, 0.3, -0.1, 0.2), (TRRailConnector.left, false)),
            (Rect(0.2, 0.3, -0.1, 0.2), (TRRailConnector.right, false)),

            (Rect(0.15, 0.1, 0.4, 0.1), (TRRailConnector.top, true)),
            (Rect(-0.25, 0.1, -0.5, 0.1), (TRRailConnector.bottom, true)),
            (Rect(-0.5, 0.1, 0.15, 0.1), (TRRailConnector.left, true)),
            (Rect(0.4, 0.1, -0.25, 0.1), (TRRailConnector.right, true))
        ]
    )
    private var downed : TRRailroadConnectorContent? = nil

    def mouseDown(event : Event) = {
        val location = event.location
        val tile : vec2i = location
        val relPoint = location.sub(tile)
        downed = index[relPoint].flatMap(v -> {
            val content = level.railroad.contentIn(tile, connector = v.a)
            if(v.b) content.as<TRLight>
            else content.as<TRSwitch>
        })
        downed.isDefined
    }

    def mouseDrag(event : Event) = downed.isDefined

    def mouseUp(event : Event) =
        if(downed.isDefined) {
            downed.get.as<TRSwitch>.for(level.tryTurn(theSwitch = _ ))
            downed.get.as<TRLight>.for(_.turn)

            true
        } else false
}