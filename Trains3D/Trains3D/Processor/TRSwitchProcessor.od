import EGTypes
import EGProcessor
import EGRectIndex

import TRRailPoint
import TRRailroad
import TRLevel

class TRSwitchProcessor(level : TRLevel) extends EGMouseProcessor {
    def process(event : EGEvent) : bool = event.leftMouse(self)

    private val index : EGRectIndex<(TRRailConnector, bool)> = EGRectIndex(
        [
            (EGRect(-0.1, 0.1, 0.3, 0.5), (TRRailConnector.top, false)),
            (EGRect(-0.1, 0.1, -0.5, -0.3), (TRRailConnector.bottom, false)),
            (EGRect(-0.5, -0.3, -0.1, 0.1), (TRRailConnector.left, false)),
            (EGRect(0.3, 0.5, -0.1, 0.1), (TRRailConnector.right, false))
        ]
    )
    private var downed : TRRailroadConnectorContent? = nil

    def mouseDown(event : EGEvent) = {
        val location = event.location
        val tile : EGPointI = location
        val relPoint = location.sub(tile)
        downed = index[relPoint].map(level.railroad.contentIn(tile, _.a))
        downed.isDefined
    }

    def mouseDrag(event : EGEvent) = downed.isDefined

    def mouseUp(event : EGEvent) =
        if(downed.isDefined) {
            downed.get.as<TRSwitch>.for(level.tryTurn(theSwitch = _ ))

            true
        } else false
}