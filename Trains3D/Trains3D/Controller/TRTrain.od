import CNList

import EGTypes
import EGMapIso
import EGFigure

import TRTypes
import TRCity
import TRLevel
import TRRailPoint
import TRRailroad

class TRTrain(weak level : TRLevel, color : TRColor, cars : [TRCar], speed : uint) {
    private var head : TRRailPoint
    private var back = false
    static val carsDelta : float = 0.1
    private val length : float = cars.chain.fold(((r, car) -> car.length + r + carsDelta), -1.0 * carsDelta)
    private val _speedF : float = 0.01 * speed

    def startFrom(city : TRCity) {
        head = city.startPoint
        calculateCarPositions
    }

    def set(head : TRRailPoint) {
        self.head = head
        calculateCarPositions
    }
    private val carsObstacleProcessor : TRObstacle -> bool = (o : TRObstacle) ->
        o.obstacleType ==  TRObstacleType.light

    private def calculateCarPositions {
        directedCars.chain.fold((hl, car) -> {
            car.head = hl
            val next = level.railroad.moveWith(obstacleProcessor = carsObstacleProcessor, forLength = car.length, point = hl).addErrorToPoint
            car.tail = next
            car.nextHead = level.railroad.moveWith(obstacleProcessor = carsObstacleProcessor, forLength = carsDelta, point = next).addErrorToPoint
            car.nextHead
        }, head.invert)
    }

    private def move(point : EGPoint, length : float) = EGPoint(point.x, point.y + length)

    def updateWith(delta : float) {
        correct(level.railroad.moveWith(obstacleProcessor = false, forLength = delta*_speedF, point = head))
    }

    private def directedCars : [TRCar] = if(back) cars.chain.reverse.toArray else cars

    private def correct(correction : TRRailPointCorrection) {
        if(correction.error != 0.0) {
            val isMoveToCity = isMoveToCityFor(correction.point)
            if(!isMoveToCity || correction.error >= length) {
                if(isMoveToCity && level.cityFor(correction.point.tile).get.color == color) {
                    level.arrived(self)
                } else {
                    back = !back
                    val lastCar = directedCars.head.get
                    head = lastCar.tail
                }
            } else {
                head = correction.addErrorToPoint
            }
        } else {
            head = correction.point
        }
        calculateCarPositions
    }

    private def isMoveToCityFor(point : TRRailPoint) : bool =
        !(level.map.isFull(point.tile)) && !(level.map.isFull(point.nextTile))

    def isLocked(theSwitch : TRSwitch) : bool = {
        val tile = theSwitch.tile
        val nextTile = theSwitch.connector.next(tile)
        cars.find(
            _.head.tile == tile && _.nextHead.tile == nextTile
            || _.head.tile == nextTile && _.nextHead.tile == tile
        ).isDefined
    }
}


class TRCar {
    var head : TRRailPoint
    var tail : TRRailPoint
    var nextHead : TRRailPoint

    def length : float = 0.6
    def width : float = 0.2

    def figure : EGThickLineSegment = EGThickLineSegment(EGLineSegment.newWith(head.point, tail.point), width)
}

class TRTrainGenerator(carsCount : CNList<int>, speed : CNList<int>) {
    def generateCars : [TRCar] = carsCount.randomItem.get.range.chain.map(TRCar.new).toArray
    def generateSpeed : uint = speed.randomItem.get
}