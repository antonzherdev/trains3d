import EGTypes

import TRTypes
import TRCity
import TRLevel
import TRRailPoint
import TRRailroad

class TRTrain(weak level : TRLevel, color : TRColor, cars : [TRCar], speed : float) {
    private var head : TRRailPoint
    private var back = false

    def startFrom(city : TRCity) {
        head = city.startPoint
        calculateCarPositions
    }

    private def calculateCarPositions {
        directedCars.fold((hl, car) -> {
            car.head = hl
            val next = level.railroad.moveFor(car.length, hl).point
            car.tail = next
            level.railroad.moveFor(0.1, next).point
        }, head.invert)
    }

    private def move(point : CGPoint, length : float) = CGPoint(point.x, point.y + length)

    def updateWith(delta : float) {
        correct(level.railroad.moveFor(delta*speed, head))
    }

    private def directedCars = if(back) cars.reverse else cars

    private def correct(correction : TRRailPointCorrection) = {
        head = correction.point
        calculateCarPositions

        if(correction.error != 0.0) {
            back = !back
            val lastCar = directedCars.head
            head = lastCar.tail
        }
    }
}


class TRCar {
    var head : TRRailPoint
    var tail : TRRailPoint

    def length : float = 0.6
}