import CNSeq

import EGTypes
import EGMapIso
import EGFigure

import TRTypes
import TRCity
import TRLevel
import TRRailPoint
import TRRailroad

enum TRTrainType(obstacleProcessor : (TRLevel, TRTrain, TRObstacle) -> bool) {
    simple((level : TRLevel, train : TRTrain, o : TRObstacle) -> {
        if(o.obstacleType ==  TRObstacleType.damage) level.destroy(train)
        false
    })
    crazy((level : TRLevel, train : TRTrain, o : TRObstacle) -> {
        if(o.obstacleType ==  TRObstacleType.damage) level.destroy(train)
        o.obstacleType ==  TRObstacleType.light
    })
    fast((level : TRLevel, train : TRTrain, o : TRObstacle) -> {
        if(o.obstacleType ==  TRObstacleType.damage || o.obstacleType == TRObstacleType.switch) level.destroy(train)
        false
    })
    repairer((level : TRLevel, train : TRTrain, o : TRObstacle) -> {
        if(o.obstacleType ==  TRObstacleType.damage) {
            level.railroad.fixDamageAt(o.point)
            true
        } else false
    })
}

class TRTrain(weak level : TRLevel, trainType : TRTrainType, color : TRColor, cars : [TRCar], speed : uint) extends EGController {
    var viewData : any = nil
    private var head : TRRailPoint
    private var back = false
    def isBack = back
    private val length : float = cars.chain.fold(((r, car) -> car.fullLength + r), 0.0)
    val speedFloat : float = 0.01 * speed

    def startFrom(city : TRCity) {
        head = city.startPoint
        calculateCarPositions
    }

    def set(head : TRRailPoint) {
        self.head = head
        calculateCarPositions
    }
    private val carsObstacleProcessor : TRObstacle -> bool = (o : TRObstacle) ->
        o.obstacleType ==  TRObstacleType.light

    private def calculateCarPositions {
        directedCars.chain.fold((hl, car) -> {
            car.frontConnector = hl
            val fl = car.frontConnectorLength
            val bl = car.backConnectorLength
            var p =  level.railroad.moveWith(carsObstacleProcessor, if(back) bl else fl, hl).addErrorToPoint
            car.head = p
            p =  level.railroad.moveWith(carsObstacleProcessor, car.length, p).addErrorToPoint
            car.tail = p
            p =  level.railroad.moveWith(carsObstacleProcessor, if(back) fl else bl, p).addErrorToPoint
            car.backConnector = p
            p
        }, head.invert)
    }

    private def move(point : EGPoint, length : float) = EGPoint(point.x, point.y + length)

    def updateWith(delta : float) {
        correct(level.railroad.moveWith(obstacleProcessor = trainType.obstacleProcessor(level, self, _),
            forLength = delta*speedFloat, point = head))
    }

    private def directedCars : [TRCar] = if(back) cars.chain.reverse.toArray else cars

    private def correct(correction : TRRailPointCorrection) {
        if(correction.error != 0.0) {
            val isMoveToCity = isMoveToCityFor(correction.point)
            if(!isMoveToCity || correction.error >= length) {
                if(isMoveToCity && (color == TRColor.grey || level.cityFor(correction.point.tile).get.color == color)) {
                    level.arrived(self)
                } else {
                    back = !back
                    val lastCar = directedCars.head.get
                    head = lastCar.backConnector
                }
            } else {
                head = correction.addErrorToPoint
            }
        } else {
            head = correction.point
        }
        calculateCarPositions
    }

    private def isMoveToCityFor(point : TRRailPoint) : bool =
        !(level.map.isFull(point.tile)) && !(level.map.isFull(point.nextTile))

    def isLocked(theSwitch : TRSwitch) : bool = {
        val tile = theSwitch.tile
        val nextTile = theSwitch.connector.next(tile)
        cars.find(
            _.frontConnector.tile == tile && _.backConnector.tile == nextTile
            || _.frontConnector.tile == nextTile && _.backConnector.tile == tile
        ).isDefined
    }
}

class TREngineType(
    tubePos : EGVec3 //tube position relative to start of the car
)

enum TRCarType(
    length : float, //Length between wheels
    width : float, //width of the car for collision detection
    frontConnectorLength : float, backConnectorLength: float, // distances between start or end of the car and the nearest wheels
    engineType : TREngineType?) {
    car(0.44, 0.18, 0.13, 0.13, nil)
    engine(0.43, 0.18, 0.12, 0.2, TREngineType(tubePos = EGVec3(0.15, 0, 0.5)))

    def fullLength : float = length + frontConnectorLength + backConnectorLength
    def isEngine : bool = engineType.isDefined
}

class TRCar(carType : TRCarType) {
    var frontConnector : TRRailPoint
    var backConnector : TRRailPoint
    var head : TRRailPoint
    var tail : TRRailPoint

    def frontConnectorLength = carType.frontConnectorLength
    def backConnectorLength = carType.backConnectorLength
    def length : float = carType.length
    def width : float = carType.width
    def fullLength : float = carType.fullLength

    def figure : EGThickLineSegment = EGThickLineSegment(EGLineSegment.newWith(head.point, tail.point), width)
}

class TRTrainGenerator(trainType : TRTrainType, carsCount : [int], speed : [int], carTypes : [TRCarType]) {
    def generateCars : [TRCar] = {
        val count = carsCount.randomItem.get
        val engine = TRCar(carTypes.chain.filter(_.isEngine).randomItem.get)
        if(count <= 1) [engine]
        else count.range.chain.map(i -> TRCar(carTypes.chain.filter(!_.isEngine).randomItem.get)).prepend([engine]).toArray
    }
    def generateSpeed : uint = speed.randomItem.get
}