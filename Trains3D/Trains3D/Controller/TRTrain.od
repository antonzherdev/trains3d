import EGTypes
import EGMapIso

import TRTypes
import TRCity
import TRLevel
import TRRailPoint
import TRRailroad

class TRTrain(weak level : TRLevel, color : TRColor, cars : [TRCar], speed : float) {
    private var head : TRRailPoint
    private var back = false
    private val carsDelta : float = 0.1
    private val length : float = cars.fold(((r, car) -> car.length + r + carsDelta), -1.0 * carsDelta)

    def startFrom(city : TRCity) {
        head = city.startPoint
        calculateCarPositions
    }

    private def calculateCarPositions {
        directedCars.fold((hl, car) -> {
            car.head = hl
            val next = level.railroad.moveFor(car.length, hl).addErrorToPoint
            car.tail = next
            car.nextHead = level.railroad.moveFor(carsDelta, next).addErrorToPoint
            car.nextHead
        }, head.invert)
    }

    private def move(point : CGPoint, length : float) = CGPoint(point.x, point.y + length)

    def updateWith(delta : float) {
        correct(level.railroad.moveFor(delta*speed, head))
    }

    private def directedCars = if(back) cars.reverse.array else cars

    private def correct(correction : TRRailPointCorrection) {
        if(correction.error != 0.0) {
            if(!isMoveToCityFor(correction.point) || correction.error >= length) {
                back = !back
                val lastCar = directedCars.head.get
                head = lastCar.tail
            } else {
                head = correction.addErrorToPoint
            }
        } else {
            head = correction.point
        }
        calculateCarPositions
    }

    private def isMoveToCityFor(point : TRRailPoint) =
        !egMapSsoIsFullTileP(level.mapSize, point.tile) &&
        !egMapSsoIsFullTileP(level.mapSize, point.nextTile)

    def isLocked(theSwitch : TRSwitch) : bool = {
        val tile = theSwitch.tile
        val nextTile = theSwitch.connector.next(tile)
        cars.find(
            _.head.tile == tile && _.nextHead.tile == nextTile
            || _.head.tile == nextTile && _.nextHead.tile == tile
        ).isDefined
    }
}


class TRCar {
    var head : TRRailPoint
    var tail : TRRailPoint
    var nextHead : TRRailPoint

    def length : float = 0.6
}