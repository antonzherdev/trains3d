import EGTypes
import EGMapIso

import TRCity
import TRTypes
import TRRailroad
import TRRailPoint
import TRTrain
import TRScore

class TRLevelRules(mapSize : EGSizeI, scoreRules : TRScoreRules)

class TRLevel(rules : TRLevelRules) extends EGController {
    val map : EGMapSso = EGMapSso(rules.mapSize)
    val score : TRScore = TRScore(rules.scoreRules)
    val railroad : TRRailroad = TRRailroad(map, score)
    private var _cities : [TRCity] = appendNextCityTo(appendNextCityTo([]))
    def cities = _cities
    private var _trains : [TRTrain] = []
    def trains = _trains

    private def appendNextCityTo(cities : [TRCity]) =  {
        val tile = map.partialTiles.exclude(cities.map(_.tile)).randomItem.get
        val city = TRCity(TRColor[cities.count], tile, randomCityDirectionFor(tile))
        railroad.tryAdd(TRRail(tile, city.angle.form))
        cities + city
    }

    private def randomCityDirectionFor(tile : EGPointI) = {
        val cut = map.cutRectFor(tile)
        TRCityAngle.values.filter(a -> {
            val angle = a.angle
            {(angle == 0 && cut.right == 0 && cut.bottom == 0)
            || (angle == 90 && cut.left == 0 && cut.bottom == 0)
            || (angle == 180 && cut.left == 0 && cut.top == 0)
            || (angle == 270 && cut.right == 0 && cut.top == 0)}
        }).randomItem.get
    }

    def createNewCity {
        _cities = appendNextCityTo(_cities)
    }

    private def run(train : TRTrain, fromCity : TRCity) {
        train.startFrom(fromCity)
        _trains += train
        score.run(train)
    }

    def runSample {
        val city0 = _cities[0]
        val city1 = _cities[1]
        run(TRTrain(self, city1.color, [TRCar.new, TRCar.new], 0.3), city0)
        run(TRTrain(self, city0.color, [TRCar.new], 0.6), city1)
    }

    def updateWith(delta : float) {
        _trains.for(_.updateWith(delta))
        score.updateWith(delta)
    }

    def tryTurn(theSwitch : TRSwitch) {
        if(!isLocked(theSwitch)){
            theSwitch.turn
        }
    }

    private def isLocked(theSwitch : TRSwitch) : bool = _trains.find(_.isLocked(theSwitch)).isDefined
}