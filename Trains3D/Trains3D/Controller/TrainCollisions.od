package com.antonzherdev.trains

import com.antonzherdev.eg._
import core.math._

class TrainCollisions(weak level : Level) extends Actor {
    private val collisionsWorld = TrainsCollisionWorld(level)
    private val dynamicWorld = TrainsDynamicWorld(level)
    private var _trains : [Train] = []
    private def trains : Future<[Train]> = prompt{ _trains }

    def add(city : City) : Future<void> = future {
        dynamicWorld.add(city)
    }

    def remove(city : City) : Future<void> = future {
        dynamicWorld.remove(city)
    }

    def remove(train : Train) : Future<void> = future {
        _trains -= train
        collisionsWorld.remove(train)
        dynamicWorld.remove(train)
    }

    def add(train : Train, state : LiveTrainState) : Future<void> = future {
        _trains += train
        collisionsWorld.add(train, state)
        dynamicWorld.add(train, state)
    }

    def add(train : Train) : Future<void> = onSuccess(train.state){ state ->
        _trains += train
        collisionsWorld.add(train, state)
        dynamicWorld.add(train, state)
    }

    private def trainStates : Future<[TrainState]> = trains.flatMap{ts ->
        ts.chain.map(_.state).future
    }

    def updateWith(delta : float) : Future<void> = onSuccess(trainStates){ states ->
        collisionsWorld.updateWith(states, delta)
        dynamicWorld.updateWith(states, delta)
    }

    def detect : Future<[CarsCollision]> = onSuccess(trainStates) { states ->
        collisionsWorld.detect(states)
    }

    def die(train : Train, liveState : LiveTrainState, wasCollision : bool) : Future<void> = future {
        collisionsWorld.remove(train)
        dynamicWorld.die(train, liveState, wasCollision)
    }

    def die(train : Train, dieState : DieTrainState) : Future<void> = future {
        collisionsWorld.remove(train)
        dynamicWorld.die(train, dieState)
    }

    def init {
        level.forest.trees.onSuccess{ trees ->
            _add(trees)
        }
    }
    private def _add(trees : Iterable<Tree>) : Future<void> = future {
        dynamicWorld.add(trees)
    }
    private val cutDownObs = level.forest.treeWasCutDown.observe{ tree -> _cutDown(tree)}
    private val forestRestoredObs = level.forest.stateWasRestored.observe{ trees ->
        _restore(trees)
    }
    private def _restore(trees : Iterable<Tree>) : Future<void> = future {
        dynamicWorld.restore(trees)
    }
    private def _cutDown(tree : Tree) : Future<void> = future {
        dynamicWorld.cutDown(tree)
    }
}

abstract class BaseTrainsCollisionWorld {
    def world : PhysicsWorld<Car>
    def level : Level

    def add(train : Train, state : TrainState)

    def remove(train : Train) {
        train.cars.for{car ->
            world.remove(item = car)
        }
    }

    def updateWith(states : [TrainState], delta : float)

    def updateMatrix(states : [TrainState]) {
        states.for{state ->
            if(!state.isDying) {
                state.carStates.for{carState ->
                    world.bodyFor(item = carState.car) ?> {body ->
                        body.matrix = carState.matrix
                    }
                }
            }
        }
    }
}

final class TrainsCollisionWorld(override weak level : Level) extends BaseTrainsCollisionWorld {
    override val world = CollisionWorld<Car>()

    override def add(train : Train, state : TrainState) {
        state.carStates.for{ pos ->
            val body = CollisionBody(pos.car, pos.carType.collision2dShape, isKinematic = true)
            body.matrix = pos.matrix
            world.add(body)
        }
    }

    override def updateWith(states : [TrainState], delta : float) {
        detect(states).for(level.process(_))
    }

    def detect(states : [TrainState]) : [CarsCollision] = {
        updateMatrix(states)
        world.detect.chain.mapOpt<CarsCollision>{collision ->
            if(collision.contacts.all(isOutOfMap(_))) return nil

            val statesMap = states.chain.flatMap(_.carStates).map((_.car, _)).toMap
            val t1 = collision.bodies.a.data
            val t2 = collision.bodies.b.data
            val car1 = statesMap.opt(t1) ?> (_.as<LiveCarState>)
            val car2 = statesMap.opt(t2) ?> (_.as<LiveCarState>)
            if(car1 == nil || car2 == nil) return nil

            val point = [car1!.head, car1!.tail].chain
                .mul([car2!.head, car2!.tail])
                .sortBy.asc{pair ->
                    val x = pair.a
                    val y = pair.b
                    if(x.form == y.form && x.tile == y.tile) (x.x - y.x).abs
                    else 1000
                }.endSort
                .map(_.a)
                .head
            val tr1 = car1!.car.train
            val tr2 = car2!.car.train
            CarsCollision(trains = if(tr1 === tr2) [tr1] else [tr1, tr2], point)
        }.toArray
    }

    private def isOutOfMap(contact : Contact) : bool =
        level.map.distanceToMap(contact.a.xy).length > 0.5 && level.map.distanceToMap(contact.b.xy).length > 0.5
}

class CarsCollision(trains : [Train], railPoint : RailPoint)

final class TrainsDynamicWorld(override weak level : Level) extends BaseTrainsCollisionWorld {
    override val world = DynamicWorld<Car?>(gravity = vec3(0, 0, -10))

    def init {
        val plane = RigidBody<Car?>(nil, CollisionPlane(vec3(0, 0, 1), 0), false, 0)
        plane.friction = 0.4
        world.add(plane)
    }

    def add(trees : Iterable<Tree>) {
        trees.for{ tree ->
            tree.body ?> (world.add(_))
        }
    }

    def restore(trees : Iterable<Tree>) {
        trees.for{tree ->
            tree.body ?> { body ->
                if(!world.bodies.contains(body)) world.add(body)
            }
        }
    }

    def cutDown(tree : Tree) {
        tree.body ?> {b -> world.remove(b)}
    }

    def add(city : City) {
        city.bodies.for(world.add(_))
    }

    override def add(train : Train, state : TrainState) {
        state.carStates.for{ pos ->
            val body = RigidBody.kinematic(pos.car, pos.carType.collision2dShape)
            body.matrix = pos.matrix
            world.add(body)
        }
    }

    private var _workCounter = 0
    private val _dyingTrains = MArray<Train>()
    def die(train : Train, liveState : LiveTrainState, wasCollision : bool) {
        _dyingTrains.append(train)
        _workCounter++
        val carStates = liveState.carStates.chain.map{carState ->
            val car = carState.car
            world.remove(item = car)
            val line = carState.line
            val len = line.u.length
            val vec = line.u
            val mid = carState.midPoint
            val tp = carState.carType
            val b = RigidBody.dynamic(car, tp.rigidShape, tp.weight)
            b.matrix = mat4.identity.translate(mid.x, mid.y, tp.height/2).rotate(line.degreeAngle, 0, 0, 1)
            val rnd = vec3(Float.rnd(-0.1, 0.1), Float.rnd(-0.1, 0.1), Float.rnd(0, 5))
            val vel = vec3(vec.mul(train.speedFloat/len*2), 0) + rnd
            //        val vel = Vec3(vec.mul(train.speedFloat/len*2), 0)
            b.velocity =
                if(wasCollision) if(liveState.isBack) vel.negate else vel
                else if(liveState.isBack) vel else vel.negate
            b.angularVelocity = vec3(Float.rnd(-5, 5), Float.rnd(-5, 5), Float.rnd(-5, 5))
            world.add(b)
            DieCarState(car, b.matrix, b.velocity, b.angularVelocity)
        }.toArray
        train.set(dieCarStates = carStates)
    }

    def die(train : Train, dieState : DieTrainState) {
        _dyingTrains.append(train)
        _workCounter++
        dieState.carStates.for{carState : DieCarState ->
            val car = carState.car
            world.remove(item = car)
            val tp = carState.carType
            val b = RigidBody.dynamic(car, tp.rigidShape, tp.weight)
            b.matrix = carState.matrix
            b.velocity = carState.velocity
            b.angularVelocity = carState.angularVelocity
            world.add(b)
        }
    }

    def remove(city : City) {
        city.bodies.for(world.remove(body = _))
    }

    override def remove(train : Train) {
        super.remove(train)
        if(_dyingTrains.contains(train)) {
            _dyingTrains.remove(train)
            _workCounter--
        }
    }

    static val carsCollisionNotification = NotificationHandle<Level, float4>("carsCollisionNotification")
    static val carAndGroundCollisionNotification = NotificationHandle<Level, float4>("carAndGroundCollisionNotification")
    override def updateWith(states : [TrainState], delta : float) {
        if(_workCounter > 0) {
            updateMatrix(states)
            world.updateWith(delta)
            _dyingTrains.for{train ->
                train.set(dieCarStates = train.cars.chain.mapOpt{car ->
                    world.bodyFor(item = car) ?> { b->
                        DieCarState(car, b.matrix, b.velocity, b.angularVelocity)
                    }
                }.toArray)
            }
            world.newCollisions.for {collision ->
                if(collision.bodies.a.isKinematic && collision.bodies.b.isKinematic) return nil
                collision.bodies.a.data ?> (level.knockDown(_.train))
                collision.bodies.b.data ?> (level.knockDown(_.train))
                if(collision.impulse > 0) {
                    if(collision.bodies.a.data == nil || collision.bodies.b.data == nil) {
                        carAndGroundCollisionNotification.post(level, collision.impulse)
                    } else {
                        carsCollisionNotification.post(level, collision.impulse)
                    }
                }
            }
        }
    }
}
