package com.antonzherdev.trains

import com.antonzherdev.eg._
import core.math._

case class EngineType(
    val tubePos : vec3, //tube position relative to start of the car
    val tubeSize : float
)

enum CarType(
    val width: float,
    val height: float,
    val weight : float,

    val startToFront : float,
    val frontToWheel : float,
    val betweenWheels : float,
    val wheelToBack : float,
    val backToEnd : float,

    val engineType : EngineType?)
{
    car(0.16, 0.3, 1,
        0.05, 0.06, 0.44, 0.06, 0.05, nil)
    engine(0.18, 0.3, 2,
        0.05, 0.14, 0.32, 0.22, 0.05,
        EngineType(tubePos = vec3(-0.08, 0, 0.4), tubeSize = 3))
    expressCar(0.16, 0.3, 1,
        0.05, 0.06, 0.44, 0.06, 0.05, nil)
    expressEngine(0.18, 0.3, 3,
        0.05, 0.14, 0.32, 0.19, 0.05,
        EngineType(tubePos = vec3(-0.03, 0, 0.35), tubeSize = 1))

    val startToWheel = startToFront + frontToWheel
    val wheelToEnd = wheelToBack + backToEnd
    val fullLength : float = startToWheel + betweenWheels + wheelToEnd
    def isEngine : bool = engineType != nil
    val collision2dShape : CollisionShape = CollisionBox2d(frontToWheel + betweenWheels + wheelToBack, width)
    val rigidShape : CollisionShape = CollisionBox(frontToWheel + betweenWheels + wheelToBack, width, height)
}

case class Car(weak val train : Train, val carType : CarType, val number : uint) {
    def isEqual(car : Car) : bool = self === car
    override def hash : uint = self.cast<uint>
}


abstract class CarState(val car : Car) {
    val carType = car.carType
    def matrix : mat4
}

case class DieCarState(car : Car, override val matrix : mat4, val velocity : vec3, val angularVelocity : vec3) extends CarState(car)

case class LiveCarState(car : Car, val frontConnector : RailPoint,
    val head : RailPoint, val tail : RailPoint, val backConnector : RailPoint,
    val line : Line2)
    extends CarState(car)
{
    static def apply(car : Car, frontConnector : RailPoint, head : RailPoint, tail : RailPoint, backConnector : RailPoint) : LiveCarState =
        LiveCarState(car, frontConnector, head, tail, backConnector, Line2(p0 = tail.point, p1 = head.point))

    def isOn(rail : Rail) : bool =
        (head.tile == rail.tile && head.form == rail.form) ||
        (tail.tile == rail.tile && tail.form == rail.form)

    val midPoint : vec2 = {
        val line = self.line
        if(carType.wheelToBack == carType.frontToWheel) line.p0 + line.u/2
        else {
            val u = line.u.set(length = line.u.length - (carType.wheelToBack - carType.frontToWheel))
            line.p0 + u/2
        }
    }

    override val matrix : mat4 = mat4.identity.translate(midPoint.x, midPoint.y, 0).rotate(line.degreeAngle, 0, 0, 1)
}

