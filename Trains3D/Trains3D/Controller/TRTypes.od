import EGTypes

enum TRColor(color : EGColor) {
    orange(EGColor(1.0, 0.5, 0.0, 1.0))
    green(EGColor(0.66, 0.9, 0.44, 1.0))
    purple(EGColor(0.9, 0.44, 0.66 , 1.0))

    def gl {
        egColor(color)
    }
}

enum TRRailConnector(x : int, y : int) {
    left(-1, 0)
    bottom(0, -1)
    top(0, 1)
    right(1, 0)

    static def connectorFor(x : int, y : int) : TRRailConnector =
        if(x == -1 && y == 0) left
        else if(x == 0 && y == -1) bottom
        else if(x == 0 && y == 1) top
        else if(x == 1 && y == 0) right
        else throw "No rail connector"
}

enum TRRailForm(start : TRRailConnector, end : TRRailConnector) {
    leftRight(TRRailConnector.left, TRRailConnector.right)
    leftBottom(TRRailConnector.left, TRRailConnector.bottom)
    leftTop(TRRailConnector.left, TRRailConnector.top)
    bottomTop(TRRailConnector.bottom, TRRailConnector.top)
    bottomRight(TRRailConnector.bottom, TRRailConnector.right)
    topRight(TRRailConnector.top, TRRailConnector.right)

    static def formFor(connector1 : TRRailConnector, connector2 : TRRailConnector) : TRRailForm =
        if(connector1.ordinal > connector2.ordinal) formFor(connector2, connector1)
        else if(connector1 == TRRailConnector.left && connector2 == TRRailConnector.right) leftRight
        else if(connector1 == TRRailConnector.left && connector2 == TRRailConnector.bottom) leftBottom
        else if(connector1 == TRRailConnector.left && connector2 == TRRailConnector.top) leftTop
        else if(connector1 == TRRailConnector.bottom && connector2 == TRRailConnector.top) bottomTop
        else if(connector1 == TRRailConnector.bottom && connector2 == TRRailConnector.right) bottomRight
        else if(connector1 == TRRailConnector.top && connector2 == TRRailConnector.right) topRight
        else throw "No form for connectors"

}

struct TRRailPoint(tile : EGIPoint, form : uint, x : float)