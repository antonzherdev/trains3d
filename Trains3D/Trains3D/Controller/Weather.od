package com.antonzherdev.trains

import com.pigeon3d.Progress._

case class WeatherRules(
    val sunny : float,
    val windStrength : float, //maximum wind strength in cell/second
    val blastness : float, //count of blasts in second
    val blastMinLength : float, val blastMaxLength : float,//blast length gap in seconds
    val blastStrength : float, //maximum wind strength in cell/second
    val precipitation : Precipitation?
) {
    def isRain : bool = precipitation?.tp == PrecipitationType.rain
    def isSnow : bool = precipitation?.tp == PrecipitationType.snow

    static val default = WeatherRules(sunny = 1.0, windStrength = 1,
        blastness = 0.1, blastMinLength = 5, blastMaxLength = 10, blastStrength = 10, nil)
}

case class Precipitation(val tp : PrecipitationType, val strength : float)

enum PrecipitationType {
    rain()
    snow()
}

struct Blast(val start : float, val length : float, val dir : vec2)

class Weather(val rules : WeatherRules) extends Actor {
    private var _constantWind : vec2 = vec2.rnd*rules.windStrength
    private var _blast : vec2 = vec2(0, 0)
    private volatile var _wind : vec2 = vec2(0, 0)
    def wind : vec2 = _wind
    private var _nextBlast = rndBlast
    private var _currentBlast : Blast = Blast(0, 0, vec2(0, 0))
    private var _blastWaitCounter : float = 0.0
    private var _blastCounter : float = 0.0
    private var _hasBlast = false

    def updateWith(delta : float) = future {
        _blastWaitCounter += delta
        if(_blastWaitCounter > _nextBlast.start) {
            _blastWaitCounter = 0
            if(!_hasBlast) {
                _hasBlast = true
                _currentBlast = _nextBlast
            }
            _nextBlast = rndBlast
        }
        if(_hasBlast) {
            _blastCounter += delta
            if(_blastCounter > _currentBlast.length) {
                _blastCounter = 0
                _hasBlast = false
                _blast = vec2(0, 0)
            } else {
                _blast = blastAnimation(_blastCounter)
            }
        }
        val wind = _constantWind + _blast
        _wind = wind
    }

    private def blastAnimation(t : float) = {
        if(t < 1) {
            val f = progress(vec2(0, 0), _currentBlast.dir)
            f(t)
        } else if(t > _currentBlast.length - 1) {
            val f = progress(_currentBlast.dir, vec2(0, 0))
            f((t - _currentBlast.length + 1))
        }
        else _currentBlast.dir
    }
    private def rndBlast = Blast(Float.rnd*2/rules.blastness, Float.rnd(rules.blastMinLength, rules.blastMaxLength),
        vec2.rnd*rules.blastStrength)
}
