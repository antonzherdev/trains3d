package com.antonzherdev.trains


import com.antonzherdev.eg._
import core.math._
import com.antonzherdev.eg.Progress._

final class Smoke(train : Train) extends EmissiveBillboardParticleSystem {
    private val trainType : TrainType = train.trainType
    private val speed = train.speedFloat
    private val engineCarType : CarType = train.carTypes.head
    private weak val weather : Weather = train.level.weather
    private val tubePos = engineCarType.engineType.get.tubePos
    private static val zSpeed = 0.1
    private val emitEvery = if(trainType == TrainType.fast) 0.005 else 0.01
    private val lifeLength = if(trainType == TrainType.fast) 1 else 2
    private var emitTime = 0.0
    private val tubeSize = engineCarType.engineType.get.tubeSize
    var _trainState : TrainState

    override def generateParticlesWith(delta : float) {
        if(_trainState.isDying) return nil

        emitTime += delta
        while(emitTime > emitEvery) {
            emitTime -= emitEvery
            emitParticle
        }
    }

    override def updateWith(delta : float) : Future<void> = lockAndOnSuccess(train.state){ state ->
        _trainState = state
        doUpdateWith(delta)
    }

    static val particleSize : float4 = 0.03
    static val modelQuad = Quad(particleSize)
    static val textureQuadrant : Quadrant = Quad.identity.quadrant
    static val defColor = vec4(0.0)
    override def generateParticle : SmokeParticle =  {
        val ts = _trainState.cast<LiveTrainState>
        val pos = ts.carStates.head
        val fPos = pos.head.point
        val bPos = pos.tail.point
        val delta = bPos - fPos
        val tubeXY = fPos.add(delta.set(length = tubePos.x))
        val emitterPos = vec3(tubeXY, tubePos.z)

        val p = SmokeParticle(lifeLength, weather)
        p.color = defColor
        p.position = vec3(emitterPos.x + tubeSize*Float.rnd(-0.01, 0.01), emitterPos.y + tubeSize*Float.rnd(-0.01, 0.01), emitterPos.z)
        p.model = modelQuad
        p.uv = textureQuadrant.rndQuad

        if(trainType == TrainType.fast) {
            val v = (if(ts.isBack) fPos - bPos else delta).set(length = (speed + Float4.rnd(-0.5, 0.05)).max(0)).mul(-1)
            p.speed = vec3(v + vec2(-v.y, v.x).set(length = Float4.rnd(-0.02, 0.02)), zSpeed.noise(0.1))
        } else {
            val s = vec3((if(ts.isBack) fPos.sub(bPos) else delta).set(length = speed), zSpeed)
            p.speed = vec3(-s.x.noise(0.3), -s.y.noise(0.3), s.z.noise(0.3))
        }
        p
    }
}

class SmokeParticle(lifeLength : float4, weak weather : Weather) extends EmittedParticle(lifeLength) with BillboardParticle {
    var speed : vec3
    static val dragCoefficient = 0.5 // air resistance coefficient | a = -dragCoefficient * sqr(speed)

    override def update(t : float4, dt : float4) {
        val a = speed*(-dragCoefficient)
        speed = speed + a*dt
        position = position.add((speed + vec3(weather.wind, 0))*dt)
        val pt = t/lifeLength
        if(pt <= 0.05) color = vec4(6*pt)
        else if(pt >= 0.75) color = vec4( ((-0.3*((pt - 0.75)/0.25)) + 0.3).max(0.0) )
    }
}

