package com.antonzherdev.trains


import core.math._
import com.pigeon3d.Progress._

final class Smoke(val train : Train)
    extends EmissiveParticleSystem<SmokeParticle, BillboardBufferData>(SmokeParticle.type, 202)
    with BillboardParticleSystem
{

    static val dragCoefficient = 0.5 // air resistance coefficient | a = -dragCoefficient * sqr(speed)
    private val trainType : TrainType = train.trainType
    private val speed = train.speedFloat
    private val engineCarType : CarType = train.carTypes.head.get
    private weak val weather : Weather = train.level.weather
    private val tubePos = engineCarType.engineType.get.tubePos
    private static val zSpeed = 0.1
    private val emitEvery = if(trainType == TrainType.fast) 0.005 else 0.01
    private val lifeLength = if(trainType == TrainType.fast) 1 else 2
    private var emitTime = 0.0
    private val tubeSize = engineCarType.engineType.get.tubeSize

    override def updateWith(delta : float) : Future<void> = lockAndOnSuccess(train.state){ state ->
        updateParticles { p ->
            val a = p.speed*(-dragCoefficient)
            p.speed = p.speed + a*delta
            p.billboard.position = p.billboard.position.add((p.speed + vec3(weather.wind, 0))*delta)
            p.lifeTime += delta
            val pt = p.lifeTime/lifeLength
            if(pt <= 0.05) p.billboard.color = vec4(6*pt)
            else if(pt >= 0.75) p.billboard.color = vec4( ((-0.3*((pt - 0.75)/0.25)) + 0.3).max(0.0) )
            pt < 1
        }

        if(state.isDying) return nil
        emitTime += delta
        if(emitTime > emitEvery) {
            val ts = state.cast<LiveTrainState>
            val pos = ts.carStates.head.get
            val fPos = pos.head.point
            val bPos = pos.tail.point
            val d = bPos - fPos
            val tubeXY = fPos.add(d.set(length = tubePos.x))
            val emitterPos = vec3(tubeXY, tubePos.z)

            while(emitTime > emitEvery) {
                emitTime -= emitEvery
                emit { p ->
                    p.billboard.color = defColor
                    p.billboard.position = vec3(emitterPos.x + tubeSize*Float.rnd(-0.01, 0.01), emitterPos.y + tubeSize*Float.rnd(-0.01, 0.01), emitterPos.z)
                    p.billboard.model = modelQuad
                    p.billboard.uv = textureQuadrant.rndQuad
                    p.lifeTime = 0
                    if(trainType == TrainType.fast) {
                        val v = (if(ts.isBack) fPos - bPos else d).set(length = (speed + Float4.rnd(-0.5, 0.05)).max(0)).mul(-1)
                        p.speed = vec3(v + vec2(-v.y, v.x).set(length = Float4.rnd(-0.02, 0.02)), zSpeed.noise(0.1))
                    } else {
                        val s = vec3((if(ts.isBack) fPos.sub(bPos) else d).set(length = speed), zSpeed)
                        p.speed = vec3(-s.x.noise(0.3), -s.y.noise(0.3), s.z.noise(0.3))
                    }
                }
            }
        }
    }

    protected override def doUpdateWith(delta : float) {}

    protected override def doWriteTo(array : Pointer<BillboardBufferData>) : uint4 = {
        writeParticles(array) {a, ref ->
            ref.billboard.writeTo(a)
        }
    }

    static val particleSize : float4 = 0.03
    static val modelQuad = Quad(particleSize)
    static val textureQuadrant : Quadrant = Quad.identity.quadrant
    static val defColor = vec4(0.0)
}

struct SmokeParticle(var life : byte, var speed : vec3, var billboard : BillboardParticle) {
    var lifeTime : float4 = 0
}

