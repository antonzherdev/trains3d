package com.antonzherdev.trains

import com.antonzherdev.eg._

class RailroadConnectorContent {
    def canAdd(rail : Rail) : bool = true
    def connect(rail : Rail, to : RailConnector) : RailroadConnectorContent
    def disconnect(rail : Rail, to : RailConnector) : RailroadConnectorContent
    def checkLightIn(connector : RailConnector, mustBe : bool) : RailroadConnectorContent = self
    def rails : [Rail]
    def isGreen : bool = true
    def isEmpty = false
    def cutDownTreesIn(forest : Forest) {}
}

class EmptyConnector extends RailroadConnectorContent {
    static val instance : RailroadConnectorContent = EmptyConnector()
    def rails : [Rail] = []
    def connect(rail : Rail, to : RailConnector) : RailroadConnectorContent = rail
    def disconnect(rail : Rail, to : RailConnector) : RailroadConnectorContent = self
    def isEmpty = true
}

class Rail(tile : vec2i, form : RailForm) extends RailroadConnectorContent {
    def has(connector : RailConnector) : bool = form.start == connector || form.end == connector
    def connect(rail : Rail, to : RailConnector) : RailroadConnectorContent = SwitchState(Switch(rail.tile, to, self, rail), true)
    def disconnect(rail : Rail, to : RailConnector) : RailroadConnectorContent = EmptyConnector.instance
    def rails : [Rail] = [self]
    def checkLightIn(connector : RailConnector, mustBe : bool) : RailroadConnectorContent =
        if(mustBe) RailLightState(RailLight(tile, connector, self), isGreen = true)
        else self
    def canAdd(rail : Rail) : bool = rail.form != form
    def line : Line2 = form.line + tile
}

class Switch(tile : vec2i, connector : RailConnector, rail1 : Rail, rail2 : Rail)  {
    def rails : [Rail] = [rail1, rail2]
    def railPoint1 = railPoint(rail1)
    def railPoint2 = railPoint(rail2)
    def disconnect(rail : Rail) : RailroadConnectorContent = if(rail == rail1) rail2 else rail1
    private def railPoint(rail : Rail) =  RailPoint(tile, rail.form, 0, rail.form.end == connector)
}
class SwitchState(switch : Switch, firstActive : bool) extends RailroadConnectorContent {
    def activeRail : Rail = if(firstActive) switch.rail1 else switch.rail2
    def rails : [Rail] = if(firstActive) switch.rails else [switch.rail2, switch.rail1]
    def connect(rail : Rail, to : RailConnector) : RailroadConnectorContent = self
    def disconnect(rail : Rail, to : RailConnector) : RailroadConnectorContent = switch.disconnect(rail)
    def cutDownTreesIn(forest : Forest) {
        forest.cutDownFor(switch)
    }
    def canAdd(rail : Rail) = false
    def turn = SwitchState(switch, !firstActive)
    def connector = switch.connector
    def tile = switch.tile
}

class RailLight(tile : vec2i, connector : RailConnector, rail : Rail)
class RailLightState(light : RailLight, isGreen : bool) extends RailroadConnectorContent {
    def checkLightIn(connector : RailConnector, mustBe : bool) : RailroadConnectorContent = if(mustBe) self else light.rail
    def rails : [Rail] = [light.rail]
    def cutDownTreesIn(forest : Forest) {
        forest.cutDownFor(light)
    }
    def canAdd(rail : Rail) : bool = light.rail.canAdd(rail)
    def connect(rail : Rail, to : RailConnector) : RailroadConnectorContent = SwitchState(Switch(light.tile, to, light.rail, rail), true)
    def disconnect(rail : Rail, to : RailConnector) : RailroadConnectorContent = EmptyConnector.instance
    def turn = RailLightState(light, !isGreen)
    def connector = light.connector
    def tile = light.tile

    def shift = vec3(if(light.connector == RailConnector.top) -0.2 else 0.2, 0, -0.45)
}


enum ObstacleType {
    damage()
    switch()
    light()
    end()
}
class Obstacle(obstacleType : ObstacleType, point : RailPoint) {}

class Railroad(map : MapSso, score : Score, forest : Forest) extends Actor {
    val _connectorIndex = MMapDefault(MHashMap<(vec2i, RailConnector), RailroadConnectorContent>(), EmptyConnector.instance)
    var _state : RailroadState = RailroadState(
        connectorIndex = ImMapDefault(ImHashMap<(vec2i, RailConnector), RailroadConnectorContent>(), EmptyConnector.instance),
        damages = RailroadDamages([]))
    def state : Future<RailroadState> = prompt {
        _state
    }

    def tryAdd(rail : Rail) : Future<bool> = future {
        if(_state.canAdd(rail)) {
            add(rail)
            score.railBuilt
            true
        } else false
    }

    static val switchTurnNotification = NotificationHandle<Railroad, SwitchState>("switchTurnNotification")
    def turn(switch : Switch) = future {
        _state.switches.find(_.switch == switch).for{state ->
            val ns = state.turn
            _connectorIndex.set(key = (switch.tile, switch.connector), value = ns)
            commitState
            switchTurnNotification.post(self, ns)
        }
    }

    private def commitState {
        _state = RailroadState(_connectorIndex.imCopy, _state.damages)
        changedNotification.post(self)
    }

    static val lightTurnNotification = NotificationHandle<Railroad, RailLightState>("Light turned")
    def turn(light : RailLight) = future {
        _state.lights.find(_.light == light).for{state ->
            val ns = state.turn
            _connectorIndex.set(key = (light.tile, light.connector), value = ns)
            commitState
            lightTurnNotification.post(self, ns)
        }
    }

    private def add(rail : Rail) {
        connect(rail, rail.form.start).cutDownTreesIn(forest)
        connect(rail, rail.form.end).cutDownTreesIn(forest)
        checkLightsNear(rail)
        forest.cutDownFor(rail)
        commitState
    }

    def remove(rail : Rail) = future {
        if(_state.rails.contains(rail)) {
            disconnect(rail, rail.form.start)
            disconnect(rail, rail.form.end)
            checkLightsNear(rail)
            commitState
        }
    }

    private def connect(rail : Rail, to : RailConnector) =
        _connectorIndex.modify(key = (rail.tile, to), by = _.connect(rail, to))

    private def disconnect(rail : Rail, to : RailConnector) =
        _connectorIndex.modify( key = (rail.tile, to), by = _.disconnect(rail, to))

    private def checkLightsNear(rail : Rail) {
        val tile = rail.tile
        checkLightsNear(tile, rail.form.start)
        checkLightsNear(tile, rail.form.end)
    }

    private def checkLightsNear(tile : vec2i, connector : RailConnector) = future {
        if(checkLightsNear(tile, connector, 4, this = true)) commitState
    }

    private def checkLightsNear(tile : vec2i, connector : RailConnector, distance : int, this : bool) : bool = {
        var changed = false
        if(distance <= 0) {
            changed = checkLightIn(tile, connector)
        } else {
            val c = _connectorIndex[(tile, connector)]
            c.rails.for {rail ->
                val oc = rail.form.otherConnector(than = connector)
                changed = (checkLightsNear(oc.next(tile),
                    connector = oc.otherSideConnector,
                    distance = distance - 1, this = false) || changed)
                changed = (checkLightIn(tile, oc) || changed)
            }
            if(!this) changed = (checkLightIn(tile, connector) || changed)
        }
        changed
    }

    private def needLightsIn(tile : vec2i, connector : RailConnector, distance : int, this : bool) : bool = {
        val content = _connectorIndex[(tile, connector)]
        if(content.is<RailLightState> && !this) false
        else if(distance == 0) true
        else {
            val nextTile = connector.next(tile)
            val otherSideConnector = connector.otherSideConnector
            val nc = _connectorIndex[(nextTile, otherSideConnector)]
            nc.rails.exists{ rail ->
                needLightsIn(
                    tile = nextTile,
                    connector = rail.form.otherConnector(than = otherSideConnector),
                    distance = distance - 1, this = false)
            }
        }
    }

    private def needLightsInOtherDirection(tile : vec2i, connector : RailConnector, distance : int, this : bool) : bool = {
        val content = _connectorIndex[(tile, connector)]
        if(content.is<RailLightState> && !this) false
        else if(distance == 0) true
        else {
            content.rails.exists{ rail ->
                val c = rail.form.otherConnector(than = connector)
                needLightsInOtherDirection(
                    tile = c.next(tile),
                    connector = c.otherSideConnector,
                    distance = distance - 1, this = false)
            }
        }
    }


    private def isTurnRailIn(tile : vec2i, connector : RailConnector) : bool = {
        val rails = _connectorIndex[(tile, connector)].rails
        rails.count == 1 && rails[0].form.isTurn
    }

    private def checkLightIn(tile : vec2i, connector : RailConnector) : bool = {
        if(needLightsIn(tile, connector, distance = 2, this = true) && needLightsInOtherDirection(tile, connector, distance = 2, this = true)) {
            buildLightIn(tile, connector, true)
        } else if(map.isPartial(tile) && map.isFull(connector.next(tile))) {
            buildLightIn(tile, connector, true)
        } else {
            val nextTile = connector.next(tile)
            val otherSideConnector = connector.otherSideConnector
            val c = _connectorIndex[(nextTile, otherSideConnector)]
            if(c.is<Rail> && c.rails.exists{ rail ->
                val oc = rail.form.otherConnector(than = otherSideConnector)
                rail.form.isTurn && _connectorIndex[(nextTile, oc)].is<SwitchState>
            }) {
                buildLightIn(tile, connector, true)
            } else {

                buildLightIn(tile, connector, false)
            }
        }
    }

    private def buildLightIn(tile : vec2i, connector : RailConnector, mustBe : bool) : bool = {
        var changed = false
        _connectorIndex.modify(key = (tile, connector)) {content ->
            val r = content.checkLightIn(connector, mustBe = mustBe)
            if(r != content) {
                if(r.is<RailLightState>) r.cutDownTreesIn(forest)
                changed = true
            }
            r
        }
        changed
    }


    static val changedNotification = NotificationHandle<Railroad, void>("Railroad changed")

    def addDamageAt(point : RailPoint) : Future<RailPoint> = future {
        var p = point
        if(p.back) p = p.invert

        val fl = p.form.length
        if(p.form.isStraight && p.x.between(0.35, 0.65)) p = p.set(x = 0.35)
        else if(p.x.between(0, 0.3)) p = p.set(x = 0.3)
        else if(p.x.between(fl - 0.3, fl)) p = p.set(x = fl - 0.3)

        if(!map.isVisible(p.point)) {
           p = p.set(x = 0)
           if(!map.isVisible(p.point)) {
               p = p.set(x = fl)
           }
        }

        _state = RailroadState(_state.connectorIndex, RailroadDamages(_state.damages.points + p))
        p
    }

    def fixDamageAt(point : RailPoint) = future {
        var p = point
        if(p.back) p = point.invert

        _state = RailroadState(_state.connectorIndex, RailroadDamages(_state.damages.points - p))
    }
}

class RailroadDamages(points : [RailPoint]) {
    private lazy val index : [(vec2i, RailForm) : [float]] = points.chain.group(by = (_.tile, _.form), map = _.x).toMap
}

class RailroadState(connectorIndex : ImMapDefault<(vec2i, RailConnector), RailroadConnectorContent>, damages : RailroadDamages) {
    lazy val rails : [Rail]= connectorIndex.values.chain.flatMap(_.rails).distinct.toArray
    lazy val switches : [SwitchState] = connectorIndex.values.chain.filter(_.is<SwitchState>).toArray
    lazy val lights : [RailLightState] = connectorIndex.values.chain.filter(_.is<RailLightState>).toArray

    def canAdd(rail : Rail) : bool =
        connectorIndex[(rail.tile, rail.form.start)].canAdd(rail)
        && connectorIndex[(rail.tile, rail.form.end)].canAdd(rail)


    private def activeRailFor(tile : vec2i, connector : RailConnector) : Rail? =
        connectorIndex[(tile, connector)].rails.headOpt


    def moveWith(obstacleProcessor : Obstacle -> bool, forLength : float, point : RailPoint) : RailPointCorrection = {
        val p = point + forLength

        val correction = p.correct
        val damage = checkDamagesWith(obstacleProcessor, point, correction.point.x)
        if(damage.isDefined) {
            val x = damage.get
            return RailPointCorrection(p.set(x = x), correction.error + correction.point.x - x)
        }

        if(correction.error == 0) {
            val switchCheckCorrection = (correction.point + 0.5).correct
            if(switchCheckCorrection.error == 0) return correction

            val scActiveRailOpt = connectorIndex[(p.tile, p.endConnector)].rails.headOpt
            if(scActiveRailOpt.isEmpty) return correction
            if(scActiveRailOpt.get.form != p.form) {
                if(!obstacleProcessor(Obstacle(ObstacleType.switch, correction.point))) {
                    return RailPointCorrection(switchCheckCorrection.point.add(-0.5), switchCheckCorrection.error)
                }
            }
            return correction
        }

        val connector = p.endConnector
        val connectorDesc = connectorIndex[(p.tile, connector)]
        val activeRailOpt = connectorDesc.rails.headOpt
        if(activeRailOpt.isEmpty) return correction

        if(activeRailOpt.get.form != p.form) {
            obstacleProcessor(Obstacle(ObstacleType.switch, correction.point))
            return correction
        }

        if(!connectorDesc.isGreen) {
            if(!obstacleProcessor(Obstacle(ObstacleType.light, correction.point))) {
                return correction
            }
        }

        val nextTile = connector.next(p.tile)
        val otherSideConnector = connector.otherSideConnector
        val nextRail = activeRailFor(nextTile, otherSideConnector)

        if(nextRail.isEmpty) {
            obstacleProcessor(Obstacle(ObstacleType.end, correction.point))
            return correction
        }

        val nextActiveRail = nextRail.get
        val form = nextActiveRail.form
        moveWith(obstacleProcessor, correction.error, RailPoint(nextTile, form, 0, form.end == otherSideConnector))
    }


    def checkDamagesWith(obstacleProcessor : Obstacle -> bool, from : RailPoint, to : float) : float? = {
        if(damages.points.isEmpty) return nil
        if(from.x == to) return nil
        val opt = damages.index.opt((from.tile, from.form))
        if(opt.isEmpty) return nil

        val on : Float -> bool = x : Float -> {
            !obstacleProcessor(Obstacle(ObstacleType.damage, from.set(x = x)))
        }
        val len = from.form.length
        if(from.back) opt.get.chain.filter(_.between(len - to, len - from.x)).sortDesc.map(len - _).find(on)
        else opt.get.chain.filter(_.between(from.x, to)).sort.find(on)
    }

    def contentIn(tile : vec2i, connector : RailConnector) : RailroadConnectorContent =
        connectorIndex[(tile, connector)]
}