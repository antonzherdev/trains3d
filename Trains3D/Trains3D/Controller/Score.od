package com.antonzherdev.trains

import com.antonzherdev.eg._

class ScoreRules(initialScore : int, railCost : int, railRemoveCost : int,
    arrivedPrize : Train -> int, destructionFine : Train -> int,
    delayPeriod : float, // seconds for speed 30.
    delayFine : (Train, int) -> int,
    repairCost : int) {
    static def default(initialScore : int = 10000) = ScoreRules(
        initialScore = initialScore,
        railCost = 1000, railRemoveCost = 1000,
        arrivedPrize = train -> 1000 + train.carsCount * 500,
        destructionFine = train -> 5000 + train.carsCount * 2500,
        delayPeriod = 60,
        delayFine = (train, i) -> 1000 + i*1000,
        repairCost = 1000
    )
}

class ScoreState(money : int, trains : [TrainScore])

class Score(rules : ScoreRules, notifications : Notifications) extends Actor {
    val money : Var<int> = Var<int>(rules.initialScore)

    def railBuilt = prompt {
        money.update(_ - rules.railCost)
        notifications.notify(Loc.railBuilt(rules.railCost))
    }

    def state = prompt {
        ScoreState(money.value, _trains)
    }
    def restore(state : ScoreState) = prompt {
        money.value = state.money
        _trains = state.trains
    }

    def railRemoved = prompt {
        money.update( _ - rules.railCost)
        notifications.notify(Loc.railRemoved(rules.railRemoveCost))
    }

    private var _trains : [TrainScore] = []
    def run(train : Train) = prompt {
        _trains += TrainScore(train)
    }
    def arrived(train : Train) = prompt {
        val prize = rules.arrivedPrize(train)
        money.update(_ + prize)
        notifications.notify(Loc.trainArrived(train, prize))
        remove(train)
    }
    def destroyed(train : Train) = prompt {
        val fine = rules.destructionFine(train)
        money.update(_ - fine)
        notifications.notify(Loc.trainDestroyed(fine))
        remove(train)
    }
    def remove(train : Train) = prompt{
        _trains = _trains.chain.filter(_.train != train).toArray
    }
    def updateWith(delta : float) = future {
        _trains = _trains.chain.map{ts ->
            val t = ts.updateWith(delta)
            if(t.needFineWith(rules.delayPeriod)) {
                val fine = rules.delayFine(t.train, t.fineTime)
                money.update(_ - fine)
                notifications.notify(Loc.trainDelayedFine(ts.train, fine))
                t.fine
            } else t
        }.toArray
    }
    def repairerCalled {

    }

    def damageFixed = prompt {
        if(rules.repairCost > 0) {
            money.update(_ - rules.repairCost)
            notifications.notify(Loc.damageFixedPayment(rules.repairCost))
        }
    }
}

class TrainScore(train : Train, delayTime : float = 0, fineTime : uint = 0) {
    def updateWith(delta : float) : TrainScore = {
        TrainScore(train, delayTime = delayTime + delta * train.speed / 30.0, fineTime = fineTime)
    }
    def needFineWith(delayPeriod : float) : bool = delayTime >= delayPeriod

    def fine  = TrainScore(train, delayTime = 0, fineTime = fineTime + 1)
}
