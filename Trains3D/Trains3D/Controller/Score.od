package com.antonzherdev.trains

import com.antonzherdev.eg._

class ScoreRules(initialScore : int, railCost : int,
    arrivedPrize : Train -> int, destructionFine : Train -> int,
    delayPeriod : float, delayFine : (Train, int) -> int,
    repairCost : int)

class Score(rules : ScoreRules, notifications : Notifications) extends Controller {
    private var _score : int = rules.initialScore
    def score : int = _score

    def railBuilt {
        _score -= rules.railCost
        notifications.notify(Strs.railBuilt(rules.railCost))
    }

    private var trains : [TrainScore] = []
    def run(train : Train) {
        trains += TrainScore(train)
    }
    def arrived(train : Train) {
        _score += rules.arrivedPrize(train)
        remove(train)
    }
    def destroyed(train : Train) {
        _score -= rules.destructionFine(train)
        remove(train)
    }
    def remove(train : Train) {
        trains = trains.chain.filter(_.train != train).toArray
    }
    def updateWith(delta : float) {
        trains.for(train -> {
            train.updateWith(delta)
            if(train.needFineWith(rules.delayPeriod)) {
                _score -= train.fineWith(rule = rules.delayFine)
            }
        })
    }
}

class TrainScore(train : Train) extends Controller {
    private var delayTime = 0.0
    private var fineCount = 0

    def updateWith(delta : float) {
        delayTime += delta
    }

    def needFineWith(delayPeriod : float) : bool = delayTime >= delayPeriod

    def fineWith(rule : (Train, int) -> int) : int = {
        fineCount++
        delayTime = 0
        rule(train, fineCount)
    }
}