package com.antonzherdev.trains

case class LevelRules(mapSize : vec2i, theme : LevelTheme, scoreRules : ScoreRules, rewindRules : RewindRules,
    weatherRules : WeatherRules,
    repairerSpeed : uint, sporadicDamagePeriod : uint, events : [(float, (Level) -> void)])

case class LevelState(time : float, seedPosition : uint4, schedule : ImSchedule,
    railroad : RailroadState, builderState : RailroadBuilderState, cities : [CityState],
    trains : [LiveTrainState], dyingTrains : [DieTrainState], repairer : Train?,
    score : ScoreState, trees : ImIterable<Tree>,
    timeToNextDamage : float, generators : [TrainGenerator])

class RewindButton {
    val animation = Counter(5).finished
    val position = Var<vec2>(vec2(0, 0))

    def show(at : vec2) {
        position.value = at
        animation.restart
    }
}

class Level(number : uint, rules : LevelRules) extends Actor with Controller {
    static val trainComingPeriod = 10
    val scale = Slot<float>(initial = 1.0)
    val cameraReserves = Slot<CameraReserve>(initial = CameraReserve(0, 0, top = 0.1, bottom = 0.0))
    val viewRatio = Slot<float4>(initial = 1.6)
    private val _seed = Seed()
    private var _time : float = 0
    val rewindButton = RewindButton()
    def time : Future<float> = prompt {
        _time
    }

    def state : Future<LevelState> = promptJoin {
        lockAndOnSuccess(Future.join(
            railroad.state,
            _trains.chain.append(_dyingTrains).map(_.state).future,
            forest.trees, score.state, builder.state
        )) { t ->
            val rrState = t.a
            val trains = t.b
            val trees = t.c
            val scoreState = t.d
            val builderState = t.e
            LevelState(
                time = _time,
                seedPosition = _seed.position,
                schedule = _schedule.imCopy,
                railroad = rrState, builderState = builderState,
                cities = _cities.chain.map(_.state).toArray,
                trains = trains.chain.filterCast(LiveTrainState.type).toArray,
                dyingTrains = trains.chain.filterCast(DieTrainState.type).toArray,
                repairer = _repairer,
                score = scoreState, trees, _timeToNextDamage, _generators
            )
        }
    }

    def restore(state : LevelState) = future {
        _time = state.time
        _seed.position = state.seedPosition
        railroad.restore(state.railroad)
        _schedule.assign(state.schedule)
        val newCities = state.cities.chain.map(_.city.restore(_)).toArray
        _cities.chain.exclude(newCities).for(collisions.remove(_))
        _cities = newCities

        val newTrains : [Train] = state.trains.chain.map{ts ->
            ts.train.restore(ts)
            ts.train
        }.toArray
        val newDyingTrains : [Train] = state.dyingTrains.chain.map{ts ->
            ts.train.restore(ts)
            ts.train
        }.toArray
        newTrains.chain.append(newDyingTrains).exclude(_trains + _dyingTrains).for{tr ->
            trainWasAdded.post(tr)
        }
        _trains.chain.append(_dyingTrains).exclude(newTrains + newDyingTrains).for{tr ->
            collisions.remove(tr)
            trainWasRemoved.post(tr)
        }
        _dyingTrains.chain.intersect(newTrains).for{tr ->
            collisions.remove(tr)
            collisions.add(tr, state = state.trains.find(_.train === tr).get)
        }
        _trains.chain.intersect(newDyingTrains).for{tr ->
            collisions.die(tr, dieState = state.dyingTrains.find(_.train === tr).get)
        }

        _trains = newTrains
        _dyingTrains = newDyingTrains
        _repairer = state.repairer
        _timeToNextDamage = state.timeToNextDamage
        score.restore(state.score)
        forest.restore(state.trees)
        _schedule.assign(state.schedule)
        _generators = state.generators
        state.generators.for(_runTrainWith(_))
        rewindButton.animation.finish
        builder.restore(state.builderState)
    }

    val history = History(self, rules.rewindRules)
    val map : MapSso = MapSso(rules.mapSize)
    val notifications = Notifications()
    val score : Score = Score(rules.scoreRules, notifications)
    val weather = Weather(rules.weatherRules)
    val forest = Forest(map, rules.theme.forestRules, weather)
    val railroad : Railroad = Railroad(map, score, forest)
    val builder : RailroadBuilder = RailroadBuilder(self)
    private var _cities : [City] = []
    private val _schedule : MSchedule = MSchedule()
    def cities : Seq<City> = _cities
    private var _trains : [Train] = []
    def trains : Future<[Train]> = prompt{
        _trains
    }
    private var _repairer : Train? = nil
    def repairer = _repairer

    def init {
        var time = 0.0
        weak val ws = self
        rules.events.for{t ->
            val f = t.b
            time += t.a
            if(time == 0) {
                f(ws)
            } else {
                _schedule.schedule(after = time, event = f(ws))
            }
        }
    }

    val collisions = TrainCollisions(self)

    private var _dyingTrains : [Train] = []
    def dyingTrains : Future<Seq<Train>> = prompt{
        _dyingTrains
    }

    def schedule(after : float, event : () -> void) = prompt {
        _schedule.schedule(after, event)
    }

    private var _timeToNextDamage : float = Float.rnd(rules.sporadicDamagePeriod*0.75, rules.sporadicDamagePeriod*1.25)

    def create2Cities : Future<void> = onSuccess(railroad.state){rlState ->
        val city1 = doCreateNewCity(rlState, check = true)
        val cityTile1 = city1.tile
        doCreateNewCity(rlState, check = (tile, _) -> (tile - cityTile1).length > 2)
    }.cast<Future<void>>
    def createNewCity : Future<City> = onSuccess(railroad.state){rlState ->
        doCreateNewCity(rlState, check = true)
    }

    private def doCreateNewCity(rlState : RailroadState, check : (vec2i, CityAngle) -> bool) : City = {
        val c = rndCityTime(rlState, check)
        createCityWith(tile = c.a, direction = c.b)
    }

    private def hasCityIn(tile : vec2i) : bool = cities.exists(_.tile == tile)

    private def rndCityTime(rlState : RailroadState, check : (vec2i, CityAngle) -> bool ) : (vec2i, CityAngle) = {
        val chain = map.partialTiles.chain.exclude(cities.chain.map(_.tile)).mul(CityAngle.values).filter{t ->
            val cut = map.cutStateFor(t.a)
            val angle = t.b.angle
            (angle == 0 && cut.x2 == 0 && cut.y2 == 0)
            || (angle == 90 && cut.x == 0 && cut.y2 == 0)
            || (angle == 180 && cut.x == 0 && cut.y == 0)
            || (angle == 270 && cut.x2 == 0 && cut.y == 0)
        }.shuffle

        chain.filter{t ->
            val tile = t.a
            val dir = t.b
            val nextTile = dir.out.next(tile)

            !RailConnector.values.chain.filter(_ != dir.out.otherSideConnector).all{connector ->
                rlState.contentIn(nextTile, connector).is<Switch>
            }
            && !dir.in.otherSideConnector.neighbours.exists{ n ->
                hasCityIn(n.next(dir.in.next(tile)))
            }
            && !(map.isRight(tile) && (map.isTop(tile) || map.isBottom(tile)))
            && !(map.isLeft(tile) && map.isBottom(tile))
            && check(tile, dir)
        }.headOpt.getOrElse{chain.head}
    }

    static val buildCityNotification = NotificationHandle<Level, City>("buildCityNotification")
    private def createCityWith(tile : vec2i, direction : CityAngle) : City = {
        val city = City(level = self, CityColor[cities.count], tile, direction)
        forest.cutDown(tile)
        railroad.tryAdd(Rail(tile, city.angle.form), free = true)
        _cities += city
        collisions.add(city)
        buildCityNotification.post(self, city)
        if(_cities.count > 2) {
            notifications.notify(Loc.cityBuilt)
        }
        city
    }


    val trainIsAboutToRun = Signal<(Train, City)>()
    val trainIsExpected = Signal<(Train, City)>()
    private def run(train : Train, fromCity : City) {
        fromCity.expect(train)
        trainIsExpected.post((train, fromCity))
    }

    private def lockedTiles : Future<Set<vec2i>> = _trains.chain.map(_.lockedTiles).future(_.flat.toSet)

    val trainWasAdded = Signal<Train>()
    def add(train : Train) = future {
        _trains += train
        score.run(train)
        collisions.add(train)
        trainWasAdded.post(train)
    }

    private var _generators : [TrainGenerator] = []
    def runTrainWith(generator : TrainGenerator) = {
        _generators += generator
        _runTrainWith(generator)
    }
    private def _runTrainWith(generator : TrainGenerator) = lockAndOnSuccess(lockedTiles) {lts ->
        val fromCityOpt = _cities.chain.filter{c ->
            c.canRunNewTrain && !lts.contains(c.tile)
        }.randomItem(_seed)
        _generators -= generator
        if(fromCityOpt.isEmpty) {
            _schedule.schedule(after = 1, runTrainWith(generator))
        } else {
            val fromCity = fromCityOpt.get
            val color =
                if(generator.trainType == TrainType.crazy) CityColor.grey
                else _cities.chain.filter(_ != fromCity).randomItem(_seed).get.color
            val train = Train(self, generator.trainType, color, generator.generateCarTypes(_seed), generator.generateSpeed(_seed))
            run(train, fromCity)
        }
    }

    def testRun(train : Train, fromPoint : RailPoint) = future {
        train.set(head = fromPoint)
        add(train)
    }

    private var looseCounter = 0.0
    private var _resultSent = false
    def updateWith(delta : float) {
        _updateWith(delta)
    }

    def _updateWith(delta : float) : Future<void> = future {
        if(!history.rewindCounter.isRunning.value) {
            _time += delta
            railroad.state.onSuccess{rrState ->
                _trains.for(_.updateWith(rrState, delta))
                _dyingTrains.for(_.updateWith(rrState, delta))
            }

            score.updateWith(delta)
            builder.updateWith(delta)

            _schedule.updateWith(delta)
            weather.updateWith(delta)
            forest.updateWith(delta)
            slowMotionCounter.updateWith(delta)

            if(rules.sporadicDamagePeriod > 0) {
                _timeToNextDamage -= delta
                if(_timeToNextDamage <= 0) {
                    addSporadicDamage
                    _timeToNextDamage = Float.rnd(rules.sporadicDamagePeriod * 0.75, rules.sporadicDamagePeriod*1.25)
                }
            }
            if(score.money.value < 0) {
                looseCounter += delta
                if(looseCounter > 5 && !_resultSent) {
                    _resultSent = true
                    lose
                }
            } else {
                looseCounter = 0
                if(_schedule.isEmpty && _generators.isEmpty && _trains.isEmpty && _dyingTrains.isEmpty && _cities.all(_.canRunNewTrain) && !_resultSent) {
                    _resultSent = true
                    win
                }
            }
            _cities.for(_.updateWith(delta))

            collisions.updateWith(delta)
            if(_cities.exists(_.expectedTrainCounter.isRunning.value || _.isWaitingToRunTrain)) {
                checkCitiesLock
            }
            rewindButton.animation.updateWith(delta)
        }
        history.updateWith(delta)
        nil
    }

    private def checkCitiesLock = onSuccess(lockedTiles){lts ->
        _cities.for{city ->
            if(city.expectedTrainCounter.isRunning.value) {
                if(lts.contains(city.tile)) city.waitToRunTrain
            } else if(city.isWaitingToRunTrain) {
                if(!lts.contains(city.tile)) city.resumeTrainRunning
            }
        }
    }

    def tryTurn(switch : Switch) : Future<void> = {
        isLocked(switch).flatMap{locked ->
            if(!locked) railroad.turn(switch)
            else Future.successful<void>(nil)
        }
    }

    def isLocked(theSwitch : Switch) : Future<bool> = trains.flatMap{trs -> trs.chain.map(_.isLocked(theSwitch)).future(_.or)}
    def isLocked(rail : Rail) : Future<bool> = Future.map(trains.flatMap{trs -> trs.chain.map(_.isLocked(rail)).future(_.or)}, railroad.isLocked(rail)) {a, b -> a || b}

    def cityFor(tile : vec2i) : City? = _cities.find(_.tile == tile)

    def possiblyArrived(train : Train, tile : vec2i, tailX : float) = future {
        cityFor(tile).for{city ->
            if(city.startPointX - 0.1 > tailX) arrived(train)
        }
    }

    private def arrived(train : Train) {
        if(repairer.contains(train)) {
            score.remove(train)
        } else {
            score.arrived(train)
        }
        remove(train)
    }

    static val crashNotification = NotificationHandle<Level, Iterable<Train>>("Trains crashed")
    private var _crashCounter : uint = 0


    def processCollisions : Future<void> = detectCollisions.map{collisions -> collisions.for{collision ->
        _process(collision)
    }}

    def process(collision : CarsCollision) : Future<void> = future {
        _process(collision)
    }

    private def _process(collision : CarsCollision) {
        collision.trains.for(doDestroy(_, wasCollision = true))
        _crashCounter = 2
        crashNotification.post(self, collision.trains)
        addDamageAfterCollision(collision.railPoint)
    }

    private def addDamageAfterCollision(railPoint : RailPoint) {
        weak val ws = self
        rewindButton.show(at = railPoint.point)
        _schedule.schedule(5) {
            ws.railroad.addDamageAt(railPoint).onSuccess{pp ->
                damageNotification.post(ws, pp)
            }
        }
    }

    static val knockDownNotification = NotificationHandle<Level, (Train, uint)>("Knock down crashed")
    def knockDown(train : Train) = future {
        if(_trains.contains(train)) {
            doDestroy(train, wasCollision = false)
            _crashCounter += 1
            knockDownNotification.post(self, (train, _crashCounter))
        }
    }

    static val damageNotification = NotificationHandle<Level, RailPoint>("damageNotification")
    static val sporadicDamageNotification = NotificationHandle<Level, RailPoint>("sporadicDamageNotification")
    def addSporadicDamage = onSuccess(railroad.state){rlState ->
        rlState.rails.chain.randomItem(_seed).for {rail ->
            val p = RailPoint(rail.tile, rail.form, Float.rnd(0, rail.form.length), false)
            railroad.addDamageAt(p).onSuccess{pp ->
                sporadicDamageNotification.post(self, pp)
                damageNotification.post(self, pp)
            }
       }
    }

    def detectCollisions : Future<[CarsCollision]> = collisions.detect

    def destroy(train : Train, railPoint : RailPoint? = Option.none<RailPoint>) = future {
        if(_trains.contains(train)) {
            _crashCounter = 1
            crashNotification.post(self, [train])
            doDestroy(train, wasCollision = false)
            railPoint.for(addDamageAfterCollision(_))
        }
    }

    private def doDestroy(train : Train, wasCollision : bool) {
        if(_trains.contains(train)) {
            score.destroyed(train)
            _trains -= train
            _dyingTrains += train

            train.die.onSuccess{state ->
                collisions.die(train, state, wasCollision)
            }
            weak val ws = self
            _schedule.schedule(after = 5) {
                ws.remove(train)
            }
        }
    }

    val trainWasRemoved = Signal<Train>()
    private def remove(train : Train) {
        _trains -= train
        collisions.remove(train)
        _dyingTrains -= train
        _repairer = _repairer.filter(_ != train)
        trainWasRemoved.post(train)
    }


    static val runRepairerNotification = NotificationHandle<Level, void>("runRepairerNotification")
    def runRepairerFrom(city : City) = future {
        if(_repairer.isEmpty) {
            score.repairerCalled
            val train = Train(self, TrainType.repairer, CityColor.grey, [CarType.engine], rules.repairerSpeed)
            run(train, city)
            _repairer = train
            runRepairerNotification.post(self)
        }
    }

    static val fixDamageNotification = NotificationHandle<Level, RailPoint>("fixDamageNotification")
    def fixDamageAt(point : RailPoint) = future {
        railroad.fixDamageAt(point)
        score.damageFixed
        fixDamageNotification.post(self, point)
    }

    val help = Var<Help?>(Option.none<Help>)
    def showHelp(text : string) {
        help.set(Help(text))
    }
    def clearHelp {
        help.set(Option.none<Help>)
    }

    val result = Var<LevelResult?>(Option.none<LevelResult>)
    static val winNotification = NotificationHandle<Level, void>("Level was passed")
    private def win {
        result.set(LevelResult(true))
        winNotification.post(self)
    }

    private def lose {
        result.set(LevelResult(false))
    }

//    def dealloc {
//        log("Dealloc level $number")
//    }

    def rewind {
        result.set(Option.none<LevelResult>)
        looseCounter = 0.0
        _resultSent = false
        history.rewind
    }

    var rate = false
    var rewindShop = 0
    var slowMotionCounter : Counter = EmptyCounter()
}

class Help(text : string)
class LevelResult(win : bool)

enum LevelTheme(background : string, forestRules : ForestRules, dark : bool) {
    forest("Grass", ForestRules(ForestType.Pine, thickness = 2), true)
    winter("Snow", ForestRules(ForestType.SnowPine, thickness = 2), false)
    leafForest("Grass2", ForestRules(ForestType.Leaf, thickness = 2), true)
    palm("PalmGrass", ForestRules(ForestType.Palm, thickness = 1.5), true)
}

class Notifications {
    private val queue = ConcurrentQueue<string>()

    def notify(notification : string) {
        queue.enqueue(notification)
    }

    def isEmpty = queue.isEmpty

    def take : string? = queue.dequeue
}

