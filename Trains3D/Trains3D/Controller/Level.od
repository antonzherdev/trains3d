package com.antonzherdev.trains

import com.antonzherdev.eg._

class LevelRules(mapSize : vec2i, scoreRules : ScoreRules, forestRules : ForestRules, weatherRules : WeatherRules,
    repairerSpeed : uint, events : [(float, (Level) -> void)])

class Level(number : uint, rules : LevelRules) extends Controller {
    static val trainComingPeriod = 10

    val map : MapSso = MapSso(rules.mapSize)
    val notifications = Notifications()
    val score : Score = Score(rules.scoreRules, notifications)
    val weather = Weather(rules.weatherRules)
    val forest = Forest(map, rules.forestRules, weather)
    val railroad : Railroad = Railroad(map, score, forest)
    private var _cities = MutableArray<City>()
    val schedule : Schedule = createSchedule
    def cities : [City] = _cities
    private var _trains : [Train] = []
    def trains = _trains
    private var _repairer : Train? = nil
    def repairer = _repairer



    val collisionWorld = TrainsCollisionWorld(map)
    val dynamicWorld = TrainsDynamicWorld()

    private var _dyingTrains = MutableArray<Train>()
    def dyingTrains : [Train] = _dyingTrains


    private def createSchedule : Schedule = {
        val schedule = Schedule()
        var time = 0.0
        rules.events.for(t -> {
            val f = t.b
            time += t.a
            schedule.schedule(after = time, event = f(self))
        })
        schedule
    }

    def createNewCity {
        val tile = map.partialTiles.chain.exclude(cities.chain.map(_.tile)).randomItem.get
        createCityWith(tile = tile,
            direction = randomCityDirectionFor(tile))
    }

    static val buildCityNotification = NotificationHandle<(City)>("buildCityNotification")
    def createCityWith(tile : vec2i, direction : CityAngle) {
        val city = City(CityColor[cities.count], tile, direction)
        forest.cutDown(tile)
        railroad.add(Rail(tile, city.angle.form))
        _cities.append(city)
        buildCityNotification.post(city)
    }

    private def randomCityDirectionFor(tile : vec2i) = {
        val cut = map.cutStateFor(tile)
        CityAngle.values.chain.filter{a ->
            val angle = a.angle
            (angle == 0 && cut.x2 == 0 && cut.y2 == 0)
            || (angle == 90 && cut.x == 0 && cut.y2 == 0)
            || (angle == 180 && cut.x == 0 && cut.y == 0)
            || (angle == 270 && cut.x2 == 0 && cut.y == 0)
        }.randomItem.get
    }

    static val expectedTrainNotification = NotificationHandle<(Train, City)>("expectedTrainNotification")
    private def run(train : Train, fromCity : City) {
        fromCity.expectedTrainColor = train.color
        fromCity.expectedTrainCounter = Counter(trainComingPeriod, finish = {
            train.startFrom(fromCity)
            add(train)
        })
        expectedTrainNotification.post((train, fromCity))
    }

    static val runTrainNotification = NotificationHandle<Train>("runTrainNotification")
    private def add(train : Train) {
        _trains += train
        score.run(train)
        collisionWorld.add(train)
        dynamicWorld.add(train)
        runTrainNotification.post(train)
    }

    def runTrainWith(generator : TrainGenerator) {
        val fromCityOpt = _cities.chain.filter{c ->
            c.canRunNewTrain && !trains.exists(_.isIn(c.tile))
        }.randomItem
        if(fromCityOpt.isEmpty) {
            schedule.schedule(after = 1, runTrainWith(generator))
            return nil
        }
        val fromCity = fromCityOpt.get
        val city = _cities.chain.filter(_ != fromCity).randomItem.get
        val train = Train(self, generator.trainType, city.color, generator.generateCarsFor(_), generator.generateSpeed)
        run(train, fromCity)
    }

    def testRun(train : Train, fromPoint : RailPoint) {
        train.set(head = fromPoint)
        add(train)
    }

    private var looseCounter = 0.0
    def updateWith(delta : float) {
        score.updateWith(delta)
        _trains.for(_.updateWith(delta))
        _cities.for(_.updateWith(delta))
        if(!trains.isEmpty) processCollisions
//        if(!_dyingTrains.isEmpty) dynamicWorld.updateWith(delta)
        railroad.updateWith(delta)
        dynamicWorld.updateWith(delta)
        schedule.updateWith(delta)
        weather.updateWith(delta)
        forest.updateWith(delta)
        _cities.for{city ->
            if(city.expectedTrainCounter.isRunning) {
                if(_trains.exists(_.isIn(city.tile))) city.waitToRunTrain
            } else if(city.isWaitingToRunTrain) {
                if(!_trains.exists(_.isIn(city.tile))) city.resumeTrainRunning
            }
        }
        if(score.score < 0) {
            looseCounter += delta
            if(looseCounter > 5) lose
        } else {
            looseCounter = 0
            if(schedule.isEmpty && _trains.isEmpty && _dyingTrains.isEmpty && _cities.all(_.canRunNewTrain)) win
        }
    }

    def tryTurn(theSwitch : Switch) {
        if(!isLocked(theSwitch)){
            theSwitch.turn
        }
    }

    private def isLocked(theSwitch : Switch) : bool = _trains.find(_.isLocked(theSwitch)).isDefined

    def cityFor(tile : vec2i) : City? = _cities.find(_.tile == tile)

    def arrived(train : Train) {
        if(repairer.contains(train)) {
            score.remove(train)
        } else {
            score.arrived(train)
        }
        remove(train)
    }

    static val crashNotification = NotificationHandle<void>("Trains crashed")
    def processCollisions {
        detectCollisions.for(collision -> {
            crashNotification.post
            collision.cars.for(destroy(_.train))
            railroad.addDamageAt(collision.railPoint)
        })
    }

    def detectCollisions = collisionWorld.detect

    def destroy(train : Train) {
        if(_trains.contains(train)) {
            score.destroyed(train)
            train.isDying = true
            _trains -= train
            collisionWorld.remove(train)
            _dyingTrains.append(train)
            dynamicWorld.die(train)
            schedule.schedule(after = 5) {
                remove(train)
            }
        }
    }

    def remove(train : Train) {
        _trains -= train
        collisionWorld.remove(train)
        dynamicWorld.remove(train)
        _dyingTrains.remove(train)
        _repairer = _repairer.filter(_ != train)
    }

    def runRepairerFrom(city : City) {
        if(_repairer.isEmpty) {
            score.repairerCalled
            val train = Train(self, TrainType.repairer, CityColor.grey, [Car(_, CarType.engine)], rules.repairerSpeed)
            run(train, city)
            _repairer = train
        }
    }

    def fixDamageAt(point : RailPoint) {
        railroad.fixDamageAt(point)
        score.damageFixed
    }

    private var _help : Help? = nil
    def help = _help
    def showHelp(text : string) {
        _help = Help(text)
    }
    def clearHelp {
        _help = nil
    }

    private var _result : LevelResult? = nil
    def result = _result
    static val winNotification = NotificationHandle<int>("Level was passed")
    def win {
        _result = LevelResult(true)
        winNotification.post(number)
    }

    def lose {
        _result = LevelResult(false)
    }
}

class Help(text : string)
class LevelResult(win : bool)