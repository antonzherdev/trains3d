package com.antonzherdev.trains

enum LevelEventType {
    train()
    city()
    twoCities()
    help()
    await()
}

case class LevelRules(val mapSize : vec2i, val theme : LevelTheme, val trainComingPeriod : uint,
    val scoreRules : ScoreRules, val rewindRules : RewindRules,
    val weatherRules : WeatherRules,
    val repairerSpeed : uint, val sporadicDamagePeriod : uint, val events : [(float, (LevelEventType, (Level) -> void))]) {
    static def default =
        LevelRules(vec2i(5, 5), LevelTheme.forest, trainComingPeriod = 10, ScoreRules.default,
        RewindRules.default, WeatherRules.default,
            repairerSpeed = 30,  sporadicDamagePeriod = 0, [])
}

case class LevelState(val time : float, val seedPosition : uint4, val schedule : ImSchedule,
    val railroad : RailroadState, val builderState : RailroadBuilderState, val cities : [CityState],
    val trains : [LiveTrainState], val dyingTrains : [DieTrainState], val repairer : Train?,
    val score : ScoreState, val trees : [Tree],
    val timeToNextDamage : float, val generators : [TrainGenerator], val scheduleAwait : (Level -> Future<bool>)?,
    val remainingTrainsCount : int)

class RewindButton {
    val animation = Counter(5).finished
    val position = Var<vec2>(vec2(0, 0))

    def show(at : vec2) {
        position.value = at
        animation.restart
    }
}

class Level(val number : uint, val rules : LevelRules) extends Actor with Controller {
    val scale = Slot<float>(initial = 1.0)
    val cameraReserves = Slot<CameraReserve>(initial = CameraReserve(0, 0, top = 0.1, bottom = 0.0))
    val viewRatio = Slot<float4>(initial = 1.6)
    private val _seed = Seed()
    private var _time : float = 0
    val rewindButton = RewindButton()
    def time : Future<float> = prompt {
        _time
    }

    def state : Future<LevelState> = promptJoin {
        lockAndOnSuccess(Future.join(
            railroad.state,
            _trains.chain.append(_dyingTrains).map(_.state).future,
            forest.trees, score.state, builder.state
        )) { t ->
            val rrState = t.a
            val trains = t.b
            val trees = t.c
            val scoreState = t.d
            val builderState = t.e
            LevelState(
                time = _time,
                seedPosition = _seed.position,
                schedule = _schedule.imCopy,
                railroad = rrState, builderState = builderState,
                cities = _cities.chain.map(_.state).toArray,
                trains = trains.chain.filterCast(LiveTrainState.type).toArray,
                dyingTrains = trains.chain.filterCast(DieTrainState.type).toArray,
                repairer = _repairer,
                score = scoreState, trees, _timeToNextDamage, _generators,
                scheduleAwait = _scheduleAwait,
                remainingTrainsCount = _remainingTrainsCount.value
            )
        }
    }

    def restore(state : LevelState) = future {
        _time = state.time
        _seed.position = state.seedPosition
        railroad.restore(state.railroad)
        _schedule.assign(state.schedule)
        val newCities = state.cities.chain.map(_.city.restore(_)).toArray
        _cities.chain.exclude(newCities).for(collisions.remove(_))
        _cities = newCities

        val newTrains : [Train] = state.trains.chain.map{ts ->
            ts.train.restore(ts)
            ts.train
        }.toArray
        val newDyingTrains : [Train] = state.dyingTrains.chain.map{ts ->
            ts.train.restore(ts)
            ts.train
        }.toArray
        newTrains.chain.append(newDyingTrains).exclude(_trains + _dyingTrains).for{tr ->
            trainWasAdded.post(tr)
        }
        _trains.chain.append(_dyingTrains).exclude(newTrains + newDyingTrains).for{tr ->
            collisions.remove(tr)
            trainWasRemoved.post(tr)
        }
        _dyingTrains.chain.intersect(newTrains).for{tr ->
            collisions.remove(tr)
            collisions.add(tr, state = state.trains.find(_.train === tr).get)
        }
        _trains.chain.intersect(newDyingTrains).for{tr ->
            collisions.die(tr, dieState = state.dyingTrains.find(_.train === tr).get)
        }
        _trains = newTrains
        _dyingTrains = newDyingTrains
        _repairer = state.repairer
        _timeToNextDamage = state.timeToNextDamage
        score.restore(state.score)
        forest.restore(state.trees)
        _schedule.assign(state.schedule)
        _generators = state.generators
        state.generators.for(_runTrainWith(_))
        rewindButton.animation.finish
        builder.restore(state.builderState)
        _scheduleAwait = state.scheduleAwait
        _scheduleAwaitLastFuture = nil
        _remainingTrainsCount.set(state.remainingTrainsCount)
    }

    private val _remainingTrainsCount : Var<int> = Var(rules.events.chain.filter(_.b.a == LevelEventType.train).count)
    def remainingTrainsCount : React<int> = _remainingTrainsCount

    val history = History(self, rules.rewindRules)
    val map : MapSso = MapSso(rules.mapSize)
    val notifications = Notifications()
    val score : Score = Score(rules.scoreRules, notifications)
    val weather = Weather(rules.weatherRules)
    val forest = Forest(map, rules.theme.forestRules, weather)
    val railroad : Railroad = Railroad(map, score, forest)
    val builder : RailroadBuilder = RailroadBuilder(self)
    private volatile var _cities : [City] = []
    private val _schedule : MSchedule = MSchedule()
    private var _scheduleAwait : (Level -> Future<bool>)?
    private var _scheduleAwaitLastFuture : Future<bool>?
    def scheduleAwait(by : Level -> Future<bool>) {
        _scheduleAwait = by
    }
    def cities : Future<[CityState]> = prompt{
        _cities.chain.map(_.state).toArray
    }
    private volatile var _trains : [Train] = []
    def trains : Future<[Train]> = prompt{
        _trains
    }
    private var _repairer : Train? = nil
    def repairer = _repairer

    def init {
        var time = 0.0
        weak val ws = self
        rules.events.for{t ->
            val f = t.b.b
            time += t.a
            if(time == 0) {
                f(ws)
            } else {
                _schedule.schedule(after = time, event = f(ws))
            }
        }
    }

    val collisions = TrainCollisions(self)

    private var _dyingTrains : [Train] = []
    def dyingTrains : Future<Seq<Train>> = prompt{
        _dyingTrains
    }

    def schedule(after : float, event : () -> void) = prompt {
        _schedule.schedule(after, event)
    }

    private var _timeToNextDamage : float = Float.rnd(rules.sporadicDamagePeriod*0.75, rules.sporadicDamagePeriod*1.25)

    def create2Cities : Future<void> = onSuccess(railroad.state){rlState ->
        val city1 = doCreateNewCity(rlState, check = true)
        val cityTile1 = city1.tile
        doCreateNewCity(rlState, check = (tile, _) -> (tile - cityTile1).length > 2)
    }.cast<Future<void>>
    def createNewCity : Future<City> = onSuccess(railroad.state){rlState ->
        doCreateNewCity(rlState, check = true)
    }

    private def doCreateNewCity(rlState : RailroadState, check : (vec2i, CityAngle) -> bool) : City = {
        val c = rndCityTime(rlState, check)
        createCityWith(tile = c.a, direction = c.b)
    }

    private def hasCityIn(tile : vec2i) : bool = _cities.exists(_.tile == tile)

    private def rndCityTime(rlState : RailroadState, check : (vec2i, CityAngle) -> bool ) : (vec2i, CityAngle) = {
        val chain = map.partialTiles.chain
            .filter{tile ->
                   !(map.isRight(tile) && (map.isTop(tile) || map.isBottom(tile)))
                && !(map.isLeft(tile)  && (map.isTop(tile) || map.isBottom(tile)))
            }
            .exclude(_cities.chain.map(_.tile))
            .mul(CityAngle.values)
            .filter{t ->
                val cut = map.cutStateFor(t.a)
                val angle = t.b.angle
                (angle == 0 && cut.x2 == 0 && cut.y2 == 0)
                || (angle == 90 && cut.x == 0 && cut.y2 == 0)
                || (angle == 180 && cut.x == 0 && cut.y == 0)
                || (angle == 270 && cut.x2 == 0 && cut.y == 0)
            }.shuffle

        chain.find{t ->
            val tile = t.a
            val dir = t.b
            val nextTile = dir.out.next(tile)

            !RailConnector.values.chain.filter(_ != dir.out.otherSideConnector).all{connector ->
                rlState.contentIn(nextTile, connector).is<Switch>
            }
            && !dir.in.otherSideConnector.neighbours.exists{ n ->
                hasCityIn(n.next(dir.in.next(tile)))
            }
            && check(tile, dir)
        }.getOr(chain.head.get)
    }

    val cityWasBuilt = Signal<City>()
    private def createCityWith(tile : vec2i, direction : CityAngle) : City = {
        val city = City(level = self, CityColor[_cities.count], tile, direction)
        forest.cutDown(tile)
        railroad.tryAdd(Rail(tile, city.angle.form), free = true)
        _cities += city
        collisions.add(city)
        cityWasBuilt.post(city)
        if(_cities.count > 2) {
            notifications.notify(Loc.cityBuilt)
        }
        city
    }


    val trainIsAboutToRun = Signal<(Train, City)>()
    val trainIsExpected = Signal<(Train, City)>()
    private def run(train : Train, fromCity : City) {
        fromCity.expect(train)
        trainIsExpected.post((train, fromCity))
    }

    private def lockedTiles : Future<Set<vec2i>> = _trains.chain.map(_.lockedTiles).future(_.flat.toSet)

    val trainWasAdded = Signal<Train>()
    def add(train : Train) = future {
        _trains += train
        score.run(train)
        if(train.trainType != TrainType.repairer) _remainingTrainsCount.update(_ - 1)
        collisions.add(train)
        trainWasAdded.post(train)
    }

    private var _generators : [TrainGenerator] = []
    def runTrainWith(generator : TrainGenerator) = {
        _generators += generator
        _runTrainWith(generator)
    }
    private def _runTrainWith(generator : TrainGenerator) : Future<void> = lockAndOnSuccess(lockedTiles) {lts ->
        val fromCityOpt = _cities.chain.filter{c ->
            c.canRunNewTrain && !lts.contains(c.tile)
        }.randomItem(_seed)
        _generators -= generator
        if(fromCityOpt == nil) {
            _schedule.schedule(after = 1, runTrainWith(generator))
        } else {
            val color =
                if(generator.trainType == TrainType.crazy) CityColor.grey
                else _cities.chain.filter(_ != fromCityOpt).randomItem(_seed).get.color
            val train = Train(self, generator.trainType, color, generator.generateCarTypes(_seed), generator.generateSpeed(_seed))
            run(train, fromCityOpt)
        }
    }

    def testRun(train : Train, fromPoint : RailPoint) = future {
        train.set(head = fromPoint)
        add(train)
    }

    private var looseCounter = 0.0
    private var _resultSent = false
    override def updateWith(delta : float) {
        _updateWith(delta)
    }

    def _updateWith(delta : float) : Future<void> = future {
        if(!history.rewindCounter.isRunning.value) {
            _time += delta
            railroad.state.onSuccess{rrState ->
                _trains.for(_.updateWith(rrState, delta))
                _dyingTrains.for(_.updateWith(rrState, delta))
            }

            score.updateWith(delta)
            builder.updateWith(delta)

            if(_scheduleAwait != nil) {
                if(_scheduleAwaitLastFuture != nil) {
                    val r = _scheduleAwaitLastFuture.result
                    if(r != nil) {
                        if(r.value.getOr(true)) {
                            _scheduleAwait = nil
                            _scheduleAwaitLastFuture = nil
                            _schedule.updateWith(delta)
                        } else {
                            _scheduleAwaitLastFuture = _scheduleAwait.apply(self)
                        }
                    }
                } else {
                    _scheduleAwaitLastFuture = _scheduleAwait.apply(self)
                }
            } else {
                _schedule.updateWith(delta)
            }
            weather.updateWith(delta)
            forest.updateWith(delta)
            slowMotionCounter.updateWith(delta)

            if(rules.sporadicDamagePeriod > 0) {
                _timeToNextDamage -= delta
                if(_timeToNextDamage <= 0) {
                    addSporadicDamage
                    _timeToNextDamage = Float.rnd(rules.sporadicDamagePeriod * 0.75, rules.sporadicDamagePeriod*1.25)
                }
            }
            if(score.money.value < 0) {
                looseCounter += delta
                if(looseCounter > 5 && !_resultSent) {
                    _resultSent = true
                    lose
                }
            } else {
                looseCounter = 0
                if(_schedule.isEmpty && _generators.isEmpty && _trains.isEmpty && _dyingTrains.isEmpty && _cities.all(_.canRunNewTrain) && !_resultSent) {
                    _resultSent = true
                    win
                }
            }
            _cities.for(_.updateWith(delta))

            collisions.updateWith(delta)
            if(_cities.exists(_.expectedTrainCounter.isRunning.value || _.isWaitingToRunTrain)) {
                checkCitiesLock
            }
            rewindButton.animation.updateWith(delta)
        }
        history.updateWith(delta)
        nil
    }

    private def checkCitiesLock = onSuccess(lockedTiles){lts ->
        _cities.for{city ->
            if(city.expectedTrainCounter.isRunning.value) {
                if(lts.contains(city.tile)) city.waitToRunTrain
            } else if(city.isWaitingToRunTrain) {
                if(!lts.contains(city.tile)) city.resumeTrainRunning
            }
        }
    }

    def tryTurn(switch : Switch) : Future<void> = {
        isLocked(switch).flatMap{locked ->
            if(!locked) railroad.turn(switch)
            else Future.successful<void>(nil)
        }
    }

    def isLocked(theSwitch : Switch) : Future<bool> = trains.flatMap{trs -> trs.chain.map(_.isLocked(theSwitch)).future(_.or)}
    def isLocked(rail : Rail) : Future<bool> = Future.map(trains.flatMap{trs -> trs.chain.map(_.isLocked(rail)).future(_.or)}, railroad.isLocked(rail)) {a, b -> a || b}

    def cityFor(tile : vec2i) : City? = _cities.find(_.tile == tile)

    def possiblyArrived(train : Train, tile : vec2i, tailX : float) = future {
        cityFor(tile).for{city ->
            if(city.startPointX - 0.1 > tailX) arrived(train)
        }
    }

    private def arrived(train : Train) {
        if(repairer == train) {
            score.remove(train)
        } else {
            score.arrived(train)
        }
        remove(train)
    }

    static val crashed = Signal<Iterable<Train>>()
    private var _crashCounter : uint = 0


    def processCollisions : Future<void> = detectCollisions.map{collisions -> collisions.for{collision ->
        _process(collision)
    }}

    def process(collision : CarsCollision) : Future<void> = future {
        _process(collision)
    }

    private def _process(collision : CarsCollision) {
        collision.trains.for(doDestroy(_, wasCollision = true))
        _crashCounter = 2
        crashed.post(collision.trains)
        addDamageAfterCollision(collision.railPoint)
    }

    private def addDamageAfterCollision(railPoint : RailPoint) {
        weak val ws = self
        rewindButton.show(at = railPoint.point)
        _schedule.schedule(5) {
            ws.railroad.addDamageAt(railPoint).onSuccess{pp ->
                damaged.post(pp)
            }
        }
    }

    static val knockedDown = Signal<(Train, uint)>()
    def knockDown(train : Train) = future {
        if(_trains.contains(train)) {
            doDestroy(train, wasCollision = false)
            _crashCounter += 1
            knockedDown.post((train, _crashCounter))
        }
    }

    static val damaged = Signal<RailPoint>()
    static val sporadicDamaged = Signal<RailPoint>()
    def addSporadicDamage : Future<void> = onSuccess(railroad.state){rlState ->
        rlState.rails.chain.randomItem(_seed).for{rail ->
            val p = RailPoint(rail.tile, rail.form, Float.rnd(0, rail.form.length), false)
            railroad.addDamageAt(p).onSuccess{pp ->
                sporadicDamaged.post(pp)
                damaged.post(pp)
            }
       }
    }

    def detectCollisions : Future<[CarsCollision]> = collisions.detect

    def destroy(train : Train, railPoint : RailPoint? = nil) = future {
        if(_trains.contains(train)) {
            _crashCounter = 1
            crashed.post([train])
            doDestroy(train, wasCollision = false)
            railPoint.for(addDamageAfterCollision(_))
        }
    }

    private def doDestroy(train : Train, wasCollision : bool) {
        if(_trains.contains(train)) {
            score.destroyed(train)
            _trains -= train
            _dyingTrains += train

            train.die.onSuccess{state ->
                state.for(collisions.die(train, _, wasCollision))
            }
            weak val ws = self
            _schedule.schedule(after = 5) {
                ws.remove(train)
            }
        }
    }

    val trainWasRemoved = Signal<Train>()
    private def remove(train : Train) {
        _trains -= train
        collisions.remove(train)
        _dyingTrains -= train
        if(train == _repairer) _repairer = nil
        trainWasRemoved.post(train)
    }


    static val runRepairer = Signal<void>()
    def runRepairerFrom(city : City) = future {
        if(_repairer == nil) {
            score.repairerCalled
            val train = Train(self, TrainType.repairer, CityColor.grey, [CarType.engine], rules.repairerSpeed)
            run(train, city)
            _repairer = train
            runRepairer.post
        }
    }

    static val fixedDamage = Signal<RailPoint>()
    def fixDamageAt(point : RailPoint) = future {
        railroad.fixDamageAt(point)
        score.damageFixed
        fixedDamage.post(point)
    }

    val help = Var<Help?>(nil)
    def showHelp(text : string) {
        help.set(Help(text))
    }
    def clearHelp {
        help.set(nil)
    }

    val result = Var<LevelResult?>(nil)
    static val wan = Signal<Level>()
    private def win {
        result.set(LevelResult(true))
        wan.post(self)
    }

    private def lose {
        result.set(LevelResult(false))
    }

//    def dealloc {
//        log("Dealloc level $number")
//    }

    def rewind {
        result.set(nil)
        looseCounter = 0.0
        _resultSent = false
        history.rewind
    }

    var rate = false
    var rewindShop = 0
    var slowMotionCounter : Counter = EmptyCounter()
}

case class Help(val text : string)
case class LevelResult(val win : bool)

enum LevelTheme(val background : string, val forestRules : ForestRules, dark : bool) {
    forest("Grass", ForestRules(ForestType.Pine, thickness = 2), true)
    winter("Snow", ForestRules(ForestType.SnowPine, thickness = 2), false)
    leafForest("Grass2", ForestRules(ForestType.Leaf, thickness = 2), true)
    palm("PalmGrass", ForestRules(ForestType.Palm, thickness = 1.5), true)
}

class Notifications {
    private val queue = ConcurrentQueue<string>()

    def notify(notification : string) {
        queue.enqueue(notification)
    }

    def isEmpty = queue.isEmpty

    def take : string? = queue.dequeue
}

