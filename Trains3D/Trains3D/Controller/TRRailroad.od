import EGMap
import EGTypes

/*
 * tile - плитка на карте
 * start - начальная позиция на клетке
 * start - конечная позиция на клетке
 */
class TRRail(tile : EGIPoint, start : EGIPoint, end : EGIPoint)


class TRRailroad(mapSize : EGISize) {
    var rails : [TRRail] = [] | private set
    val builder = TRRailroadBuilder(self)

    def canAdd(rail : TRRail) : bool = {
        val railsInTile = rails.filter(_.tile == rail.tile).array
        val countsAtStart = railsInTile.filter(_.start == rail.start || _.end == rail.start).count
        val countsAtEnd = railsInTile.filter(_.start == rail.end || _.end == rail.end).count

        countsAtStart < 2 &&  countsAtEnd < 2
    }

    def tryAdd(rail : TRRail) : bool = {
        if(canAdd(rail)) {
            rails += rail
            true
        } else false
    }
}

class TRRailroadBuilder(weak railroad : TRRailroad) {
    var rail : TRRail? = nil | private set

    def tryBuild(rail : TRRail) : bool = {
        if(railroad.canAdd(rail)) {
            self.rail = rail
            true
        } else false
    }

    def clear {
        rail = nil
    }

    def fix {
        rail.for(r -> railroad.tryAdd(r))
        rail = nil
    }
}

