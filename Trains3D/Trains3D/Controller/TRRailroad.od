import CNTreeMap

import EGMap
import EGMapIso
import EGTypes
import EGMapIsoTileIndex

import TRRailPoint
import TRScore

class TRRailroadConnectorContent {
    def canAdd(rail : TRRail) : bool = true
    def connect(rail : TRRail, to : TRRailConnector) : TRRailroadConnectorContent
    def buildLightIn(connector : TRRailConnector) : TRRailroadConnectorContent = self
    def rails : [TRRail]
    def isGreen : bool = true
}

class TREmptyConnector extends TRRailroadConnectorContent {
    static val instance : TRRailroadConnectorContent = TREmptyConnector.new
    def rails : [TRRail] = []
    def connect(rail : TRRail, to : TRRailConnector) : TRRailroadConnectorContent = rail
}

class TRRail(tile : EGPointI, form : TRRailForm) extends TRRailroadConnectorContent {
    def has(connector : TRRailConnector) : bool = form.start == connector || form.end == connector
    def connect(rail : TRRail, to : TRRailConnector) : TRRailroadConnectorContent = TRSwitch(rail.tile, to, self, rail)
    def rails : [TRRail] = [self]
    def buildLightIn(connector : TRRailConnector) : TRRailroadConnectorContent = TRLight(tile, connector, self)
    def canAdd(rail : TRRail) : bool = rail.form != form
}

class TRSwitch(tile : EGPointI, connector : TRRailConnector, rail1 : TRRail, rail2 : TRRail) extends TRRailroadConnectorContent {
    var firstActive = true
    def activeRail : TRRail = if(firstActive) rail1 else rail2
    def turn { firstActive = !firstActive }
    def canAdd(rail : TRRail) = false
    def connect(rail : TRRail, to : TRRailConnector) : TRRailroadConnectorContent = throw "Couldn't add rail to switch"
    def rails : [TRRail] = if(firstActive) [rail1, rail2] else [rail2, rail1]
    def buildLightIn(connector : TRRailConnector) : TRRailroadConnectorContent = self
}

class TRLight(tile : EGPointI, connector : TRRailConnector, rail : TRRail) extends TRRailroadConnectorContent {
    var isGreen = true
    def turn { isGreen = !isGreen }
    def canAdd(rail : TRRail) : bool = self.rail.canAdd(rail)
    def connect(rail : TRRail, to : TRRailConnector) : TRRailroadConnectorContent = TRSwitch(tile, to, self.rail, rail)
    def rails : [TRRail] = [rail]
    def buildLightIn(connector : TRRailConnector) : TRRailroadConnectorContent = self
}

enum TRObstacleType {
    damage()
    switch()
    light()
    end()
}
class TRObstacle(obstacleType : TRObstacleType, point : TRRailPoint) {}

class TRRailroad(map : EGMapSso, score : TRScore) {
    private var _rails : [TRRail] = []
    def rails = _rails
    private var _switches : [TRSwitch] = []
    def switches = _switches
    private var _lights : [TRLight] = []
    def lights = _lights
    val builder = TRRailroadBuilder(self)
    private val connectorIndex = CNMapDefault(TREmptyConnector.instance, CNMutableHashMap.new<(EGPointI, TRRailConnector), TRRailroadConnectorContent>)
    private val damages = CNMutableHashMap.new<(EGPointI, TRRailForm), [float]>

    def canAdd(rail : TRRail) : bool =
        connectorIndex[(rail.tile, rail.form.start)].canAdd(rail)
        && connectorIndex[(rail.tile, rail.form.end)].canAdd(rail)

    def tryAdd(rail : TRRail) : bool = {
        if(canAdd(rail)) {
            connect(rail, rail.form.start)
            connect(rail, rail.form.end)
            buildLightsFor(rail.tile, rail.form.start)
            buildLightsFor(rail.tile, rail.form.end)
            rebuildArrays
            score.railBuilt
            true
        } else false
    }

    def contentIn(tile : EGPointI, connector : TRRailConnector) : TRRailroadConnectorContent =
        connectorIndex[(tile, connector)]

    private def connect(rail : TRRail, to : TRRailConnector) {
        connectorIndex.modify(by = _.connect(rail, to), forKey = (rail.tile, to))
    }

    private def buildLightsFor(tile : EGPointI, connector : TRRailConnector) {
        val nextTile = connector.next(tile)
        val otherSideConnector = connector.otherSideConnector

        if(map.isFull(tile) && map.isPartial(nextTile)) {
            buildLightIn(nextTile, otherSideConnector)
        } else if (isTurnRailIn(nextTile, otherSideConnector)) {
            buildLightIn(nextTile, otherSideConnector)
        }

        if(isTurnRailIn(tile, connector) && connectorIndex[(nextTile, otherSideConnector)].rails.count == 1) {
            buildLightIn(tile, connector)
        }
    }

    private def isTurnRailIn(tile : EGPointI, connector : TRRailConnector) : bool = {
        val rails = connectorIndex[(tile, connector)].rails
        rails.count == 1 && rails[0].form.isTurn
    }

    private def buildLightIn(tile : EGPointI, connector : TRRailConnector) {
        connectorIndex.modify(by = _.buildLightIn(connector), forKey = (tile, connector))
    }


    private def rebuildArrays {
        _rails = connectorIndex.values.chain.flatMap(_.rails).distinct.toArray
        _switches = connectorIndex.values.chain.filter(_.is<TRSwitch>).toArray
        _lights = connectorIndex.values.chain.filter(_.is<TRLight>).toArray
    }

    def moveWith(obstacleProcessor : TRObstacle -> bool, forLength : float, point : TRRailPoint) : TRRailPointCorrection =
        correctWith(obstacleProcessor, point.add(forLength))

    private def activeRailFor(tile : EGPointI, connector : TRRailConnector) : TRRail? =
        connectorIndex[(tile, connector)].rails.head

    private def correctWith(obstacleProcessor : TRObstacle -> bool, point : TRRailPoint) : TRRailPointCorrection = {
        val correction = point.correct

        if(correction.error == 0) return correction

        val connector = point.endConnector
        val connectorDesc = connectorIndex[(point.tile, connector)]
        val activeRailOpt = connectorDesc.rails.head
        if(activeRailOpt.isEmpty) return correction

        if(!connectorDesc.isGreen) {
            if(!obstacleProcessor(TRObstacle(TRObstacleType.light, correction.point))) {
                return correction
            }
        }

        if(activeRailOpt.get.form != point.form) {
            obstacleProcessor(TRObstacle(TRObstacleType.switch, correction.point))
            return correction
        }

        val nextTile = connector.next(point.tile)
        val otherSideConnector = connector.otherSideConnector
        val nextRail = activeRailFor(nextTile, otherSideConnector)

        if(nextRail.isEmpty) {
            obstacleProcessor(TRObstacle(TRObstacleType.end, correction.point))
            return correction
        }

        val nextActiveRail = nextRail.get
        val form = nextActiveRail.form
        correctWith(obstacleProcessor, TRRailPoint(nextTile, form, correction.error, form.end == otherSideConnector))
    }

    def addDamageAt(point : TRRailPoint) {
        if(point.back) addDamageAt(point.invert)
        damages.modify(by = arr -> arr.map(_ + point.x).getOrElse([point.x]), forKey = (point.tile, point.form))
    }

    def fixDamageAt(point : TRRailPoint) {
        if(point.back) fixDamageAt(point.invert)
        damages.modify(by = arrOpt -> arrOpt.map(arr -> arr.chain.filter(_ != point.x).toArray), forKey = (point.tile, point.form))
    }
}

class TRRailroadBuilder(weak railroad : TRRailroad) {
    private var _rail : TRRail? = nil
    def rail = _rail

    def tryBuild(rail : TRRail) : bool = {
        if(railroad.canAdd(rail)) {
            _rail = rail
            true
        } else false
    }

    def clear {
        _rail = nil
    }

    def fix {
        _rail.for(r -> railroad.tryAdd(r))
        _rail = nil
    }
}

