package com.antonzherdev.trains


class ForestRules(
    types : [TreeType],
    thickness : float //count on tile
)

class Forest( map : MapSso, rules : ForestRules) {
    private var _trees = (rules.thickness * map.allTiles.count).cast<int>.range.chain.map{ _ ->
        val tile = map.allTiles.randomItem.get
        val pos = vec2(math.randomFloatGap(-0.5, 0.5), math.randomFloatGap(-0.5, 0.5))
        Tree(rules.types.randomItem.get, pos + tile, vec2(math.randomFloatGap(0.8, 1.2), math.randomFloatGap(0.8, 1.2)))
    }.sort.toArray

    def trees = _trees

    def cutDown(tile : vec2i) {
        cutDown(rect = Rect(tile, vec2(1.4, 1.4)) - vec2(0.7, 0.7))
    }

    def cutDownFor(rail : Rail) {
        val s = rail.form.start.vec/2.0
        val e = rail.form.end.vec/2.0
        val ds = if(s.x == 0) vec2(0.3, 0) else vec2(0, 0.3)
        val de = if(e.x == 0) vec2(0.3, 0) else vec2(0, 0.3)
        cutDown(rect = Quad(s - ds, s + ds, e - de, e + de).boundingRect + rail.tile)
    }

    def cutDown(rect : Rect) {
        _trees = _trees.chain.filter(!rect.contains(_.position)).toArray
    }
}


class Tree(treeType : TreeType, position : vec2, size : vec2) extends Comparable<Tree> {
    def compare(to : Tree) : int = -(position.y - position.x).compare(to.position.y - to.position.x)
}

enum TreeType {
    pine()
    tree1()
    tree2()
    tree3()
    yellow()
}