package com.antonzherdev.trains


class ForestRules(
    forestType : ForestType,
    thickness : float //count on tile
)

class Forest(map : MapSso, rules : ForestRules, weather : Weather) extends Updatable {
    private var _trees : Iterable<Tree> = (rules.thickness * map.allTiles.count * 1.1).cast<int>.range.chain.map{ _ ->
        val tile = map.allTiles.randomItem.get
        val pos = vec2(Float.rnd(-0.5, 0.5), Float.rnd(-0.5, 0.5))
        Tree(rules.forestType.treeTypes.randomItem.get, pos + tile, vec2(Float.rnd(0.9, 1.1), Float.rnd(0.9, 1.1)))
    }.toTreeSet
    def trees = _trees

    def cutDown(tile : vec2i) {
        cutDown(rect = Rect(tile, vec2(1.4, 1.4)) - vec2(0.7, 0.7))
    }

    def cutDownFor(rail : Rail) {
        val s = rail.form.start.vec/2.0
        val e = rail.form.end.vec/2.0
        val ds = if(s.x == 0) vec2(0.3, 0) else vec2(0, 0.3)
        val de = if(e.x == 0) vec2(0.3, 0) else vec2(0, 0.3)
        cutDown(rect = Quad(s - ds, s + ds, e - de, e + de).boundingRect + rail.tile)
    }

    def cutDownFor(switch : Switch) {
        cutDown(switch.connector.vec*0.4 + switch.tile, 0.5, 2.5)
    }

    def cutDownFor(light : RailLight) {
        cutDown(light.connector.vec*0.45 + light.tile, 0.3, 2.5)
    }

    private def cutDown(pos : vec2, xLength : float, yLength : float) {
        val xx = pos.x + pos.y
        val yy = pos.y - pos.x
        _trees = _trees.chain.filter{tree ->
        val ty = tree.position.y - tree.position.x
        if(yy - yLength <= ty && ty <= yy) {
            val tx = tree.position.x + tree.position.y
            if(xx - xLength < tx && tx < xx + xLength) false else true
        } else true
        }.toArray
    }

    def cutDown(rect : Rect) {
        _trees = _trees.chain.filter(!rect.contains(_.position)).toArray
    }

    def updateWith(delta : float) {
        _trees.for(_.updateWith(weather.wind, delta))
    }
}


class Tree(treeType : TreeType, position : vec2, size : vec2) extends Comparable<Tree> {
    val z : int = ((position.y - position.x)*400).round
    def compare(to : Tree) : int = -(z).compare(to.z)

    val rigidity = Float.rnd(0.5, 1.5)
    private var _rustleUp : bool = true
    var rustle : float = 0.0
    private var _incline : vec2 = vec2(0, 0)
    private var _inclineUp : bool = false
    def incline = _incline

    def updateWith(wind : vec2, delta : float) {
        val mw = wind*0.3*rigidity
        val mws = mw.x.abs + mw.y.abs
        if(_rustleUp) {
            rustle += delta*mws*mws*65
            if(rustle > mws) _rustleUp = false
        } else {
            rustle -= delta*mws*mws*65
            if(rustle < -mws) _rustleUp = true
        }


        if(_inclineUp) {
            _incline = _incline*(1.0 - delta)
            if(_incline.x.abs + _incline.y.abs < mws*0.8) {
                _inclineUp = false
            }
        } else {
            _incline += wind*delta
            if(_incline.x.abs + _incline.y.abs > mws) {
                _inclineUp = true
            }
        }
    }
}

enum ForestType(treeTypes : [TreeType]) {
    Pine([TreeType.Pine])
    Leaf([TreeType.Leaf, TreeType.WeakLeaf])
    SnowPine([TreeType.SnowPine])
}

enum TreeType(uv : Rect, scale : float, rustleStrength : float) {
    Pine(Rect(0, 0, 184.0/512, 1), 1, 1)
    SnowPine(Rect(0, 0, 184.0/512, 1), 1, 1)
    Leaf(Rect(0, 0, 197.0/512, 0.5), 1.6, 1)
    WeakLeaf(Rect(0, 0.5, 115.0/512, 0.5), 0.6, 2)

    val uvQuad : Quad = uv.upsideDownStripQuad
    val size : vec2 = vec2(uv.width, 0.5) * scale
}