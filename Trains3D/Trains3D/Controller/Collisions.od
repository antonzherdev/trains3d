package com.antonzherdev.trains

import com.antonzherdev.eg._
import core.math._

class BaseTrainsCollisionWorld extends TypedActor {
    def world : PhysicsWorld<Car>
    def level : Level
    private var _trains = MutableArray<Train>()

    def add(train : Train) {
        train.state.onSuccess{ state ->
            actor.add(train, state)
        }
    }

    def add(train : Train, state : TrainState) : Future<void>
    protected def _add(train : Train, state : TrainState) {
        _trains.append(train)
    }


    def remove(train : Train) = future {
        _remove(train)
    }

    protected def _remove(train : Train) {
        _trains.remove(train)
        train.cars.for{car ->
            world.remove(item = car)
        }
    }

    def update<T>(f : [TrainState] -> Future<T>) =
        _trains.chain.map(_.state)
        .futureArray
        .flatMap{m -> f(m)}

    def updateMatrix(states : [TrainState]) {
        states.for{state ->
            if(!state.isDying) {
                state.carStates.for{carState ->
                    world.bodyFor(item = carState.car).for{body ->
                        body.matrix = carState.matrix
                    }
                }
            }
        }
    }
}

class TrainsCollisionWorld(weak level : Level) extends BaseTrainsCollisionWorld {
    val world = CollisionWorld<Car>()

    def add(train : Train, state : TrainState) = future {
        _add(train, state)
        state.carStates.for{ pos ->
            val body = CollisionBody(pos.car, pos.carType.collision2dShape, isKinematic = true)
            body.matrix = pos.matrix
            world.add(body)
        }
    }

    def detect : Future<[CarsCollision]> = update{m -> actor._detect(m)}

    def _detect(states : [TrainState]) : Future<[CarsCollision]> = future {
        updateMatrix(states)
        world.detect.chain.flatMap<CarsCollision>{collision ->
            if(collision.contacts.all(isOutOfMap(_))) return Option.none<CarsCollision>

            val statesMap = states.chain.flatMap(_.carStates).map((_.car, _)).toMap
            val t1 = collision.bodies.a.data
            val t2 = collision.bodies.b.data
            val car1 = statesMap.opt(t1).flatMap(_.as<LiveCarState>)
            val car2 = statesMap.opt(t2).flatMap(_.as<LiveCarState>)
            if(car1.isEmpty || car2.isEmpty) return Option.none<CarsCollision>

            val point =
            [car1.get.head, car1.get.tail].chain
                .mul([car2.get.head, car2.get.tail])
                .sortBy.asc{pair ->
                    val x = pair.a
                    val y = pair.b
                    if(x.form == y.form && x.tile == y.tile) (x.x - y.x).abs
                    else 1000
                }.endSort
                .map(_.a)
                .head
            Option.some(CarsCollision([car1.get.car.train, car2.get.car.train].chain.toSet, point))
        }.toArray
    }

    private def isOutOfMap(contact : Contact) : bool =
        level.map.distanceToMap(contact.a.xy).length > 0.5 && level.map.distanceToMap(contact.b.xy).length > 0.5
}

class CarsCollision(trains : Set<Train>, railPoint : RailPoint)

class TrainsDynamicWorld(weak level : Level) extends BaseTrainsCollisionWorld {
    val world = {
        val w = DynamicWorld<Car>(gravity = vec3(0, 0, -10))
        val plane = RigidBody<Car>(nil, CollisionPlane(vec3(0, 0, 1), 0), false, 0)
        plane.friction = 0.4
        w.add(plane)
        level.forest.trees.for{ tree ->
            tree.body.for(w.add(_))
        }
        w
    }

    private val cutDownObs = Tree.cutDownNotification.observe{ tree, _ -> actor.cutDown(tree)}
    def cutDown(tree : Tree) = prompt {
        tree.body.for{b -> world.remove(b)}
    }

    def add(city : City) = prompt {
        city.bodies.for(world.add(_))
    }

    def add(train : Train, state : TrainState) = future {
        _add(train, state)
        state.carStates.for{ pos ->
            val body = RigidBody.kinematic(pos.car, pos.carType.collision2dShape)
            body.matrix = pos.matrix
            world.add(body)
        }
    }

    var _workCounter = 0
    val _dyingTrains = MutableArray<Train>()
    def die(train : Train) {
        train.state.onSuccess(actor.die(train, _.cast<LiveTrainState>))
    }
    private def die(train : Train, state : LiveTrainState) = future {
        _dyingTrains.add(train)
        _workCounter++
        val carStates = state.carStates.chain.map{carState ->
            world.remove(item = carState.car)
            val line = carState.line
            val len = line.u.length
            val vec = line.u
            val mid = carState.midPoint
            val tp = carState.carType
            val b = RigidBody.dynamic(Weak(self), tp.rigidShape, tp.weight)
            b.matrix = mat4.identity.translate(mid.x, mid.y, tp.height/2).rotate(line.degreeAngle, 0, 0, 1)
            val rnd = vec3(Float.rnd(-0.1, 0.1), Float.rnd(-0.1, 0.1), Float.rnd(0, 5))
            val vel = vec3(vec.mul(train.speedFloat/len*2), 0) + rnd
            //        val vel = Vec3(vec.mul(train.speedFloat/len*2), 0)
            b.velocity = if(state.isBack) vel.negate else vel
            b.angularVelocity = vec3(Float.rnd(-5, 5), Float.rnd(-5, 5), Float.rnd(-5, 5))
            world.add(b)
            DieCarState(carState.car, b.matrix)
        }.toArray
        train.set(dieCarStates = carStates)
    }

    protected def _remove(train : Train) {
        super._remove(train)
        if(_dyingTrains.contains(train)) {
            _dyingTrains.remove(train)
            _workCounter--
        }
    }

    static val carsCollisionNotification = NotificationHandle<Level, float4>("carsCollisionNotification")
    static val carAndGroundCollisionNotification = NotificationHandle<Level, float4>("carAndGroundCollisionNotification")
    def updateWith(delta : float) : Future<void> =
        if(_workCounter > 0) {
            update{m -> actor._updateWith(delta, m)}
        } else Future.successful<void>(nil)

    private def _updateWith(delta : float, states : [TrainState]) : Future<void> = future {
        if(_workCounter > 0) {
            updateMatrix(states)
            world.updateWith(delta)
            _dyingTrains.for{train ->
                train.set(dieCarStates = train.cars.chain.map{car ->
                    DieCarState(car, world.bodyFor(item = car).get.matrix)
                }.toArray)
            }
            world.newCollisions.for {collision ->
                if(collision.bodies.a.isKinematic && collision.bodies.b.isKinematic) return nil
                if(collision.bodies.a.isKinematic) {
                    level.knockDown(collision.bodies.a.data.train)
                } else if(collision.bodies.b.isKinematic) {
                    level.knockDown(collision.bodies.b.data.train)
                }
                if(collision.impulse > 0) {
                    if(collision.bodies.a.data == nil || collision.bodies.b.data == nil) {
                        carAndGroundCollisionNotification.post(level, collision.impulse)
                    } else {
                        carsCollisionNotification.post(level, collision.impulse)
                    }
                }
            }
        }
    }
}
