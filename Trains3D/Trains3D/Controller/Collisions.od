package com.antonzherdev.trains

import com.antonzherdev.eg._
import core.math._

class TrainsCollisionWorld(map : MapSso) {
    private val world = CollisionWorld<Car>()

    def add(train : Train) {
        train.cars.for{car ->
            world.add(car.collisionBody)
        }
    }

    def remove(train : Train) {
        train.cars.for{car ->
            world.remove(car.collisionBody)
        }
    }

    def detect : [CarsCollision] = world.detect.chain.flatMap<CarsCollision>{collision ->
        if(collision.contacts.all(isOutOfMap(_))) return Option.none<CarsCollision>

        val car1 = collision.bodies.a.data
        val car2 = collision.bodies.b.data

        val point =
            [car1.position.head, car1.position.tail].chain
                .mul([car2.position.head, car2.position.tail])
                .sortBy.asc{pair ->
                    val x = pair.a
                    val y = pair.b
                    if(x.form == y.form && x.tile == y.tile) (x.x - y.x).abs
                    else 1000
                }.endSort
                .map(_.a)
                .head
        Option.some(CarsCollision(Pair(car1, car2), point))
    }.toArray

    private def isOutOfMap(contact : Contact) : bool =
        !map.isVisible(contact.a.xy) && !map.isVisible(contact.b.xy)
}

class CarsCollision(cars : Pair<Car>, railPoint : RailPoint)

class TrainsDynamicWorld extends Updatable {
    private val world = {
        val w = DynamicWorld<Car>(gravity = vec3(0, 0, -10))
        val plane = RigidBody<Car>(nil, CollisionPlane(vec3(0, 0, 1), 0), false, 0)
        plane.friction = 0.4
        w.add(plane)
        w
    }

    def add(train : Train) {
    }

    private var workCounter = 0
    def die(train : Train) {
        workCounter++
        train.cars.for{car ->
            world.add(car.dynamicBody)
        }
    }

    def remove(train : Train) {
        workCounter--
        train.cars.for{car ->
            world.remove(car.dynamicBody)
        }
    }

    static val carsCollisionNotification = NotificationHandle<float4>("carsCollisionNotification")
    static val carAndGroundCollisionNotification = NotificationHandle<float4>("carAndGroundCollisionNotification")
    def updateWith(delta : float) {
        world.updateWith(delta)
        if(workCounter > 0) {
            world.newCollisions.for {collision ->
                if(collision.impulse > 0) {
                    if(collision.bodies.a.data == nil || collision.bodies.b.data == nil) {
                        carAndGroundCollisionNotification.post(collision.impulse)
                    } else {
                        carsCollisionNotification.post(collision.impulse)
                    }
                }
            }
        }
    }
}
