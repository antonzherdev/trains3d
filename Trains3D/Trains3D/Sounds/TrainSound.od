package com.antonzherdev.trains

class TrainSound(level : Level) extends SoundPlayer {
    val choo = SoundParallel(8, Sound("Choo.wav", 0.05))

    def updateWith(delta : float) {
        level.trains.for { train ->
            var sd = train.soundData.cast<TrainSoundData>
            if(sd == nil) {
                sd = TrainSoundData()
                train.soundData = sd
            }
            if(sd.chooCounter > 0 && sd.toNextChoo <= 0.0) {
                choo.play
                sd.nextChoo
            } else {
                val h = train.head
                if(h.tile != sd.lastTile) {
                    choo.play
                    sd.lastTile = h.tile
                    sd.lastX = h.x
                    sd.nextChoo
                } else if(sd.chooCounter > 0) {
                    sd.next(h)
                }
            }
        }
    }
    def pause{
        choo.pause
    }
    def resume{
        choo.resume
    }
}

class TrainSoundData {
    var chooCounter = 0
    var toNextChoo = 0.0
    var lastTile = vec2i(0, 0)
    var lastX = 0.0

    def nextChoo {
        if(chooCounter == 0) {
            toNextChoo = 0.03
            chooCounter = 1
        } else if(chooCounter == 1) {
            chooCounter = 2
            toNextChoo = 0.15
        } else if(chooCounter == 2) {
            toNextChoo = 0.03
            chooCounter = 3
        } else if(chooCounter == 3) {
            chooCounter = 0
        }
    }

    def next(head : RailPoint) {
        toNextChoo -= (lastX - head.x).abs
        lastX = head.x
    }
}