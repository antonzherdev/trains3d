package com.antonzherdev.trains

import com.antonzherdev.data._
import com.testflightapp._

class GameDirector {
    val gameCenterPrefix = "grp.com.antonzherdev.Trains3D"
    val gameCenterAchievmentPrefix = "grp.com.antonzherdev.Train3D"
    val cloudPrefix = ""

    val maxDaySlowMotions = 5
    val slowMotionRestorePeriod = 60*60*4
    static val instance : GameDirector = GameDirector()

    val local = LocalKeyValueStorage([("currentLevel", 1), ("soundEnabled", 1),
        ("lastSlowMotions", []),
        ("daySlowMotions", maxDaySlowMotions),
        ("boughtSlowMotions", 5)])
    val resolveMaxLevel : (any, any) -> any = (a : any, b : any) -> {
        val v = Conflict.resolveMax(a, b)
        log("Max level from cloud $v = max($a, $b)")
        if(currentLevel == a.cast<int>) {
            log("Update current level with $v from cloud")
            local.set("currentLevel", value = v)
        }
        v
    }

    val cloud = CloudKeyValueStorage([("maxLevel", 1), ("pocket.maxLevel", 1)], name ->
        if(name == "$(cloudPrefix)maxLevel") resolveMaxLevel
        else Conflict.resolveMax)

    static val playerScoreRetrieveNotification = NotificationHandle<GameDirector, LocalPlayerScore>("playerScoreRetrieveNotification")
    private val obs = Level.winNotification.observe{ level, _ ->
        val n = level.number
        TestFlight.pass("Win level $n")
        cloud.keepMax("$(cloudPrefix)maxLevel", n + 1)
        local.set("currentLevel", i = n + 1)
        val leaderboard = "$gameCenterPrefix.Level$n"
        val s = level.score.score
        cloud.keepMax("$(cloudPrefix)level$n.score", level.score.score)
        GameCenter.instance.reportScore(leaderboard, s) { score ->
            playerScoreRetrieveNotification.post(self, score)
        }
    }
    private val sporadicDamageHelpObs = Level.sporadicDamageNotification.observe{ level, _ ->
        if(cloud.intFor("help.sporadicDamage") == 0) {
            level.schedule.schedule(1) {
                level.showHelp(Loc.helpSporadicDamage)
                cloud.set("help.sporadicDamage", 1)
            }
        }
    }

    private val damageHelpObs = Level.damageNotification.observe{ level, _ ->
        if(cloud.intFor("help.damage") == 0) {
            level.schedule.schedule(1) {
                level.showHelp(Loc.helpDamage)
                cloud.set("help.damage", 1)
            }
        }
    }

    private val repairerHelpObs = Level.runRepairerNotification.observe{ level, _ ->
        if(cloud.intFor("help.repairer") == 0) {
            level.schedule.schedule(Level.trainComingPeriod + 7) {
                level.showHelp(Loc.helpRepairer)
                cloud.set("help.repairer", 1)
            }
        }
    }

    private val crazyHelpObs = Level.runTrainNotification.observe{ level, train ->
        if(train.trainType == TrainType.crazy && cloud.intFor("help.crazy") == 0) {
            level.schedule.schedule(2) {
                level.showHelp(Loc.helpCrazy)
                cloud.set("help.crazy", 1)
            }
        }
    }

    private val lineAdviceObs = LevelFactory.lineAdviceTimeNotification.observe{ _, level ->
        if(cloud.intFor("help.linesAdvice") == 0) {
            level.showHelp(Loc.linesAdvice)
            cloud.set("help.linesAdvice", 1)
        }
    }

    private val slowMotionHelpObs = LevelFactory.slowMotionHelpNotification.observe{ _, level ->
        if(cloud.intFor("help.slowMotion") == 0) {
            level.showHelp(Loc.helpSlowMotion)
            cloud.set("help.slowMotion", 1)
        }
    }

    private val zoomHelpObs = CameraIsoMove.cameraChangedNotification.observe{ move, _ ->
        if(cloud.intFor("help.zoom") == 0 && move.scale > 1) {
            Director.current.scene.get.controller.cast<Level>.showHelp(Loc.helpInZoom)
            cloud.set("help.zoom", 1)
        }
    }

    def clearTutorial {
        cloud.set("help.sporadicDamage", 0)
        cloud.set("help.damage", 0)
        cloud.set("help.repairer", 0)
        cloud.set("help.crazy", 0)
        cloud.set("help.linesAdvice", 0)
        cloud.set("help.slowMotion", 0)
        cloud.set("help.zoom", 0)
    }

    def bestScore(levelNumber : uint) : int = cloud.intFor("$(cloudPrefix)level$levelNumber.score")

    private val crashObs = Level.crashNotification.observe{level, trains ->
        GameDirector.instance.destroyTrains(trains)
    }
    private val knockDownObs = Level.knockDownNotification.observe{level, p ->
        GameDirector.instance.destroyTrains([p.a])
        if(p.b == 2) {
            GameCenter.instance.completeAchievement("$gameCenterAchievmentPrefix.KnockDown")
        } else if(p.b > 2) {
            GameCenter.instance.completeAchievement("$gameCenterAchievmentPrefix.Crash$(p.b)")
        }
    }

    def destroyTrains(trains : [Train]) {
        GameCenter.instance.completeAchievement("$gameCenterAchievmentPrefix.Crash")
        if(trains.exists(_.trainType == TrainType.fast)) {
            GameCenter.instance.completeAchievement("$gameCenterAchievmentPrefix.ExpressCrash")
        }
        if(trains.exists(_.trainType == TrainType.repairer)) {
            GameCenter.instance.completeAchievement("$gameCenterAchievmentPrefix.RepairCrash")
        }
        if(trains.exists(_.trainType == TrainType.crazy)) {
            GameCenter.instance.completeAchievement("$gameCenterAchievmentPrefix.CrazyCrash")
        }
    }

    def init {
        SoundDirector.instance.enabled = (local.intFor("soundEnabled") == 1)
        Rate.instance.setIds(ios = 736579117, osx = 736545415)
//        Rate.instance.setIds(ios = 343200656, osx = 403961173)
        GameCenter.instance.authenticate
//        cloud.keepMax("$(cloudPrefix)maxLevel", 16)
//        clearTutorial

        if(daySlowMotions > maxDaySlowMotions) local.set("daySlowMotions", i = maxDaySlowMotions)
        val fullDayCount = lastSlowMotions.count + daySlowMotions
        if(fullDayCount > maxDaySlowMotions) {
            local.set("lastSlowMotions", array = lastSlowMotions.chain.top(maxDaySlowMotions - daySlowMotions).toArray)
        } else if(fullDayCount < maxDaySlowMotions) {
            local.set("daySlowMotions", i = maxDaySlowMotions - lastSlowMotions.count)
        }
        checkLastSlowMotions

        _slowMotionsCount = daySlowMotions + boughtSlowMotions
    }


    def localPlayerScore(level : uint, callback : LocalPlayerScore? -> void) {
        val leaderboard = "$gameCenterPrefix.Level$level"
        GameCenter.instance.localPlayerScore(leaderboard) { score ->
            val bs = bestScore(level)
            if( (score.isDefined && score.get.value <  bs) || (bs > 0 && score.isEmpty) ) {
                log("No result in game center for level $level. We are trying to report.")
                GameCenter.instance.reportScore(leaderboard, bs) { ls ->
                    callback(ls)
                }
            } else {
                callback(score)
            }
        }
    }

    def currentLevel = local.intFor("currentLevel")
    def maxAvailableLevel = cloud.intFor("$(cloudPrefix)maxLevel")
    def restoreLastScene {
        TestFlight.pass("Start with $currentLevel")
        Director.current.set(scene = SceneFactory.sceneForLevelWith(number = currentLevel))
    }

    def restartLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            if(level.number == 16 && isNeedRate) {
                level.rate = true
                Director.current.redraw
            } else {
                set(level = level.number)
                Director.current.resume
            }
        }
    }

    def chooseLevel {
        TestFlight.pass("Choose level menu")
        Director.current.scene = LevelChooseMenu.scene
        Director.current.pause
    }

    def nextLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            if(isNeedRate) {
                TestFlight.pass("Show rate dialog")
                level.rate = true
                Director.current.redraw
            } else {
                set(level = level.number + 1)
                Director.current.resume
            }
        }
    }

    def rateLater {
        Rate.instance.later
        nextLevel
    }

    def rateClose {
        Rate.instance.never
        nextLevel
    }

    def set(level : int) {
        if(level <= maxAvailableLevel) {
            TestFlight.pass("Start level $level")
            local.set("currentLevel", i = level)
            Director.current.timeSpeed = 1.0
            Director.current.scene = SceneFactory.sceneFor(LevelFactory.levelWith(number = level))
        }
    }


    def showLeaderboard(level : Level) {
        TestFlight.pass("Show leaderboard for level $(level.number)")
        GameCenter.instance.showLeaderboard("$gameCenterPrefix.Level$(level.number)")
    }

    def synchronize {
        local.synchronize
        cloud.synchronize
    }

    def showSupport(changeLevel : bool) {
        TestFlight.pass("Show support")
        val text = "\n\n> " + Loc.supportEmailText.replace("\n", "\n> ")
        val htmlText = text.replace(">", "&gt;").replace("\n", "<br/>\n")
        Director.current.scene.get.controller.as<Level>.for{level ->
            EMail.instance.showInterface(to = "support@raildale.com",
                subject = "Raildale - $(UInt.rnd)",
                text = text,
                htmlText = "<small><i>$(htmlText)</i></small>")
            if(changeLevel) set(level = level.number + 1)
        }

    }

    def isNeedRate : bool = maxAvailableLevel > 6 && Rate.instance.shouldShow(everyVersion = true)
    def showRate {
        TestFlight.pass("Rate")
        Director.current.scene.get.controller.as<Level>.for{level ->
            Rate.instance.showRate
            set(level = level.number + 1)
        }
    }

    def soundEnabled = SoundDirector.instance.enabled
    def set(soundEnabled : bool) {
        if( SoundDirector.instance.enabled != soundEnabled) {
            TestFlight.pass("SoundEnabled = $soundEnabled")
            local.set("soundEnabled", i = if(soundEnabled) 1 else 0)
            SoundDirector.instance.enabled = soundEnabled
        }
    }


    def lastSlowMotions = local.arrayFor<DateTime>("lastSlowMotions")
    def daySlowMotions = local.intFor("daySlowMotions")
    def boughtSlowMotions = local.intFor("boughtSlowMotions")
    private var _slowMotionsCount = 0
    def slowMotionsCount = _slowMotionsCount

    def runSlowMotion(level : Level) {
        if(level.slowMotionCounter.isStopped) {
            TestFlight.pass("slow motion : $_slowMotionsCount")
            Director.current.timeSpeed = 0.1
            level.slowMotionCounter = LengthCounter(1).onEnd {
                Director.current.timeSpeed = 1.0
            }
            val dsm = daySlowMotions
            if(dsm > 0) {
                local.decrement("daySlowMotions")
                if(local.appendToArray("lastSlowMotions", value = DateTime()).count == 1) {
                    checkLastSlowMotions
                }
                _slowMotionsCount--
            } else {
                val bsm = boughtSlowMotions
                if(bsm > 0) {
                    local.decrement("boughtSlowMotions")
                    _slowMotionsCount--
                } else {
                    return nil
                }
            }
        }
    }

    def checkLastSlowMotions {
        val lsm = lastSlowMotions
        if(!lsm.isEmpty) {
            val first = lsm.head
            if(first.beforeNow > slowMotionRestorePeriod) {
                local.set("lastSlowMotions", array = lastSlowMotions.tail)
                local.increment("daySlowMotions")
                _slowMotionsCount++
                checkLastSlowMotions
            } else {
                weak val ws = self
                Action.delay(first.beforeNow + 1) {
                    ws.checkLastSlowMotions
                }
            }
        }
    }


    def share {
        if(!ShareDialog.isSupported) return nil

        TestFlight.pass("Share")
        val url = "http:\/\/get.raildale.com/?x=a"
        ShareContent(Loc.shareText(url), "Share.jpg")
            .twitter(Loc.twitterText(url))
            .email(Loc.shareText(url), Loc.shareSubject)
            .dialog
            .display
    }
}