package com.antonzherdev.trains

import com.antonzherdev.data._

class GameDirector {
    static val instance = GameDirector()
    val local = LocalKeyValueStorage([("currentLevel", 1)])
    private val resolveMaxLevel : (any, any) -> any = (a : any, b : any) -> {
        val v = Conflict.resolveMax(a, b)
        log("Max level from cloud $v = max($a, $b)")
        if(currentLevel == a.cast<int>) {
            log("Update current level with $v from cloud")
            local.set("currentLevel", value = v)
        }
        v
    }

    private val cloud = CloudKeyValueStorage([("maxLevel", 1)], [("maxLevel", resolveMaxLevel)])

    def init {
//        cloud.set("maxLevel", i = 1)
//        local.set("currentLevel", i = 1)
//        cloud.synchronize
        GameCenter.instance.authenticate
        NotificationCenter.instance.addObserver<int>("level was passed", {
            cloud.keepMax("maxLevel", _ + 1)
            local.set("currentLevel", i = _ + 1)
        })
    }

    def currentLevel = local.intFor("currentLevel")
    def maxAvailableLevel = cloud.intFor("maxLevel")
    def restoreLastScene {
        Director.current.set(scene = SceneFactory.sceneForLevelWith(number = currentLevel))
    }

    def restartLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            Director.current.set(scene = SceneFactory.sceneFor(Level(level.number, level.rules)))
            local.keepMax("currentLevel", i = level.number)
            Director.current.resume
        }
    }

    def chooseLevel {
        Director.current.resume
    }

    def nextLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            local.keepMax("currentLevel", i = level.number + 1)
            Director.current.set(scene = SceneFactory.sceneFor(LevelFactory.levelWith(number = level.number + 1)))
            Director.current.resume
        }
    }

    def synchronize {
        local.synchronize
        cloud.synchronize
    }
}