package com.antonzherdev.trains

import com.antonzherdev.data._

class GameDirector {
    static val instance = GameDirector()
    val local = LocalKeyValueStorage([("currentLevel", 1)])
    val resolveMaxLevel : (any, any) -> any = (a : any, b : any) -> {
        val v = Conflict.resolveMax(a, b)
        log("Max level from cloud $v = max($a, $b)")
        if(currentLevel == a.cast<int>) {
            log("Update current level with $v from cloud")
            local.set("currentLevel", value = v)
        }
        v
    }

    val cloud = CloudKeyValueStorage([("maxLevel", 1)], name ->
        if(name == "maxLevel") resolveMaxLevel
        else Conflict.resolveMax)

    private val obs = Level.winNotification.observe{ level ->
        val n = level.number + 1
        cloud.keepMax("maxLevel", n)
        local.set("currentLevel", i = n)
        GameCenter.instance.reportScore("grp.com.antonzherdev.Trains3D.Level$n", level.score.score)
        cloud.keepMax("level$n.score", level.score.score)
    }
    private val crashObs = Level.crashNotification.observe { _ ->
        GameCenter.instance.completeAchievement("grp.Crash")
    }

    def init {
        GameCenter.instance.authenticate
    }

    def currentLevel = local.intFor("currentLevel")
    def maxAvailableLevel = cloud.intFor("maxLevel")
    def restoreLastScene {
        Director.current.set(scene = SceneFactory.sceneForLevelWith(number = currentLevel))
    }

    def restartLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            set(level = level.number)
        }
    }

    def chooseLevel {
        Director.current.scene = LevelChooseMenu.scene
        Director.current.pause
    }

    def nextLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            set(level = level.number + 1)
        }
    }

    def set(level : int) {
        if(level <= maxAvailableLevel) {
            local.set("currentLevel", i = level)
            Director.current.scene = SceneFactory.sceneFor(LevelFactory.levelWith(number = level))
            Director.current.resume
        }
    }

    def synchronize {
        local.synchronize
        cloud.synchronize
    }
}