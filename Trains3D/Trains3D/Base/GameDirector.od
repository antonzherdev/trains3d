package com.antonzherdev.trains

import com.antonzherdev.data._

class GameDirector {
    static val instance = GameDirector()
    private val storage = KeyValueStorage([("maxLevel", 1), ("currentLevel", 1)])

    def init {
        NotificationCenter.default.addObserver<int>("level was passed", {
            storage.keepMax("maxLevel", _ + 1)
            storage.keepMax("currentLevel", _ + 1)
            storage.synchronize
        })
    }

    def maxAvailableLevel = storage.intFor("maxLevel")
    def restoreLastScene  = SceneFactory.sceneForLevelWith(number = storage.intFor("currentLevel"))

    def restartLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            Director.current.set(scene = SceneFactory.sceneFor(Level(level.number, level.rules)))
            storage.keepMax("currentLevel", i = level.number)
            Director.current.resume
        }
    }

    def chooseLevel {
        Director.current.resume
    }

    def nextLevel {
        Director.current.scene.get.controller.as<Level>.for{level ->
            storage.keepMax("currentLevel", i = level.number + 1)
            Director.current.set(scene = SceneFactory.sceneFor(LevelFactory.levelWith(number = level.number + 1)))
            Director.current.resume
        }
    }
}