package com.antonzherdev.trains

class LevelFactory {
    static val scoreRules = scoreRulesWith(100000)
    static def scoreRulesWith(initialScore : int) = ScoreRules(
        initialScore = initialScore,
        railCost = 1000,
        arrivedPrize = train -> train.cars.count * 2000,
        destructionFine = train -> train.cars.count * 5000,
        delayPeriod = 60,
        delayFine = (train, i) -> i*1000,
        repairCost = 2000
        )

    static val forestRules = ForestRules(types = TreeType.values, thickness = 1)
    static val weatherRules = WeatherRules(windStrength = 1,
        blastness = 0.1, blastMinLength = 5, blastMaxLength = 10, blastStrength = 10)
    private static def train(cars : Range, speed : Range) : Level -> void = (level : Level)->
        level.runTrainWith(TrainGenerator(TrainType.simple, cars, speed, [CarType.car, CarType.engine]))
    private static def expressTrain(cars : Range, speed : Range) : Level -> void = (level : Level)->
        level.runTrainWith(TrainGenerator(TrainType.simple, cars, speed, [CarType.expressCar, CarType.expressEngine]))
    private static def showHelp(text : string) : Level -> void = (level : Level) -> level.showHelp(text)
    private static def createNewCity : Level -> void = (level : Level) -> level.createNewCity
    private static def create2Cities : Level -> void = (level : Level) -> {
        level.createNewCity
        level.createNewCity
    }
    private static def createCityWith(tile : vec2i, direction : CityAngle) : Level -> void = (level : Level) ->
        level.createCityWith(tile, direction)
    private static val rules = [
        //1
        LevelRules(vec2i(5, 3), scoreRulesWith(20000),
            ForestRules(types = [TreeType.pine], thickness = 2),
            WeatherRules(windStrength = 0.3, blastness = 0.1, blastMinLength = 1, blastMaxLength = 3, blastStrength = 0.3),
            repairerSpeed = 20, [
                (0, create2Cities),
                (1, showHelp(Loc.helpConnectTwoCities)),
                (30, train(cars = 2, speed = 30)),
                (Level.trainComingPeriod + 3, showTrainHelp),
                (40, createNewCity),
                (1, showHelp(Loc.helpNewCity)),
                (20, train(cars = 1, speed = 20)),
                (Level.trainComingPeriod + 3, showTrainHelpWithSwitches),
                (50, train(cars = 3, speed = 30))
        ]),

        //2
        LevelRules(vec2i(5, 3), scoreRulesWith(20000),
            ForestRules(types = [TreeType.pine], thickness = 2),
            WeatherRules(windStrength = 0.3, blastness = 0.1, blastMinLength = 1, blastMaxLength = 3, blastStrength = 0.3),
            repairerSpeed = 20, [
                (0, create2Cities),
                (20, slowTrain),
                (30, createNewCity),
                (20, slowTrain),
                (30, slowTrain),
                (10, createNewCity),
                (20, slowTrain),
                (10, slowTrain)
            ]),
        //3
        LevelRules(vec2i(5, 3), scoreRulesWith(20000),
            ForestRules(types = [TreeType.pine], thickness = 2),
            WeatherRules(windStrength = 0.3, blastness = 0.1, blastMinLength = 1, blastMaxLength = 3, blastStrength = 0.3),
            repairerSpeed = 20, [
                (0, create2Cities),
                (20, slowTrain),
                (30, slowTrain),
                (30, slowTrain),
                (10, createNewCity),
                (20, slowTrain),
                (30, slowTrain),
                (30, slowTrain),
                (10, createNewCity),
                (20, slowTrain),
                (30, slowTrain),
                (30, slowTrain),
                (10, createNewCity),
                (10, slowTrain),
                (30, slowTrain),
                (10, slowTrain),
                (30, slowTrain),
                (30, slowTrain),
                (25, slowTrain),
                (30, slowTrain),
                (20, slowTrain)
            ])
    ]
    static def slowTrain = train(cars = 1.to(4), speed = 25.to(35))
    static def levelWith(number : uint) = Level(number, rules[number - 1])
    static def levelWith(mapSize : vec2i) = Level(0, LevelRules(mapSize, scoreRules, forestRules, weatherRules, repairerSpeed = 30, []))
    static def score = Score(scoreRules, Notifications())
    static def railroadWith(mapSize : vec2i) = {
        val map = MapSso(mapSize)
        Railroad(map, score, Forest(map, forestRules, Weather(weatherRules)))
    }

    static def showTrainHelp : Level -> void = (level : Level) -> level.showHelp(Loc.helpTrain(level.trains.head.color.localName))
    static def showTrainHelpWithSwitches : Level -> void = (level : Level) -> level.showHelp(Loc.helpTrainWithSwitches(level.trains.head.color.localName))
}