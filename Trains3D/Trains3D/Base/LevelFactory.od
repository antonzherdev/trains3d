package com.antonzherdev.trains

import com.antonzherdev.eg._

class LevelFactory {
    static def sceneFor(level : Level) = Scene(vec4(215, 230, 195, 255)/255, level, TrainLayers(level), LevelSound(level))
    static def restartLevel = {
        director.scene.get.controller.as<Level>.for{level ->
            director.set(scene = sceneFor(Level(level.rules)))
        }
    }
    static val scoreRules = ScoreRules(
        initialScore = 100000,
        railCost = 1000,
        arrivedPrize = train -> train.cars.count * 2000,
        destructionFine = train -> train.cars.count * 3000,
        delayPeriod = 10,
        delayFine = (train, i) -> i*1000,
        repairCost = 2000
        )

    static val forestRules = ForestRules(types = TreeType.values, thickness = 1)
    static val weatherRules = WeatherRules(windStrength = 1,
        blastness = 0.1, blastMinLength = 1, blastMaxLength = 3, blastStrength = 10)
    private static def train(cars : Range, speed : Range) : Level -> void = (level : Level)->
        level.runTrainWith(TrainGenerator(TrainType.simple, cars, speed, [CarType.car, CarType.engine]))
    private static def createNewCity : Level -> void = (level : Level)->
        level.createNewCity
    private static val rules = [
        LevelRules(vec2i(5, 3), scoreRules,
            ForestRules(types = [TreeType.pine], thickness = 2),
            WeatherRules(windStrength = 0.3, blastness = 0.1, blastMinLength = 1, blastMaxLength = 3, blastStrength = 0.3),
            repairerSpeed = 30, [
            (1, train(cars = 2.to(4), speed = 50.to(60).set(step = 10))),
            (10, train(cars = 2.to(3), speed = 50.to(60).set(step = 10))),
            (15, createNewCity)//,
//            (20, train(cars = 1.to(3), speed = 30.to(60).set(step = 10)))
        ])
    ]
    static def levelWith(number : uint) = Level(rules[number - 1])
    static def levelWith(mapSize : vec2i) = Level(LevelRules(mapSize, scoreRules, forestRules, weatherRules, repairerSpeed = 30, []))
    static def sceneForLevelWith(number : uint) = sceneFor(levelWith(number))
    static def score = Score(scoreRules, Notifications())
    static def railroadWith(mapSize : vec2i) = {
        val map = MapSso(mapSize)
        Railroad(map, score, Forest(map, forestRules, Weather(weatherRules)))
    }
}

class TrainLayers(level : Level) extends Layers {
    val levelLayer = Layer(LevelView(level))
    val menuLayer = Layer(LevelMenuView(level))
    val pauseMenuLayer = Layer(LevelPauseMenuView(level))


    def layers : [Layer] = [levelLayer, menuLayer, pauseMenuLayer]
    def viewportsWith(viewSize : vec2) = {
        if(viewSize.y > 1279) {
            [(levelLayer, Rect(0, 0, viewSize.x, viewSize.y - 92)),
            (menuLayer, Rect(0, viewSize.y - 92, viewSize.x, 92)),
            (pauseMenuLayer, Rect(vec2(0, 0), viewSize))]
        } else {
            [(levelLayer, Rect(0, 0, viewSize.x, viewSize.y - 46)),
             (menuLayer, Rect(0, viewSize.y - 46, viewSize.x, 46)),
             (pauseMenuLayer, Rect(vec2(0, 0), viewSize))]
        }
    }
}