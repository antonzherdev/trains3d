package com.antonzherdev.trains

class CallRepairerView(level : Level) extends InputProcessor with MouseProcessor {
    def draw {
        if(!level.railroad.damagesPoints.isEmpty && level.repairer.isEmpty) {
            glDisable(GL_DEPTH_TEST)
            BlendFunction.standard {
                level.cities.for(drawButtonFor(_))
            }
            glEnable(GL_DEPTH_TEST)
        } else if(!buttons.isEmpty) {
            buttons.clear
        }
    }

    val font = fontWith(name = "lucida_grande_18")
    private val buttonSize = Cache<Rect, vec2>{vp ->
        val textSize = font.measure(Loc.callRepairer)
        matrix.p.divBySelf(vec4(textSize * 1.2, 0, 0)).xy
    }
    private var buttons = MutableHashMap<City, Billboard>()

    def drawButtonFor(city : City) {
        val cut = level.map.cutStateFor(city.tile)

        val bs = buttonSize(context.viewport)
        var p : vec2
        if(cut.x != 0 && cut.y == 0 && cut.y2 == 0) p = vec2(0, MapSso.ISO/4 + bs.y)
        else if(cut.y != 0)
            if(cut.x2 != 0) p = vec2(-MapSso.ISO/2 - bs.x, -bs.y)
            else p = vec2(MapSso.ISO/2, -bs.y)
        else if(cut.y2 != 0)
            if(cut.x2 != 0) p = vec2(-MapSso.ISO/2 - bs.x, 0)
            else p = vec2(MapSso.ISO/2, 0)
        else p = vec2(-bs.x, MapSso.ISO/4 + bs.y)

        val billboard = buttons.objectFor(city, orUpdateWith = Billboard(material = vec4(city.color.color.xyz, 0.8)))
        billboard.position = vec3(city.tile, 0)
        billboard.rect = Rect(p, bs)
        billboard.draw
        font.draw(Loc.callRepairer, color = vec4(0.1, 0.1, 0.1, 1), billboard.position, TextAlignment(0, 0, false, vec3(p + bs/2, 0)))
    }

    def process(event : Event) : bool = {
        event.leftMouse(self)
    }

    def mouseDown(event : Event) : bool = {
        val p = event.locationInViewport
        val b = buttons.chain.find(_.b.contains(p))
        b.for{kv -> level.runRepairerFrom(kv.a)}
        b.isDefined
    }
}