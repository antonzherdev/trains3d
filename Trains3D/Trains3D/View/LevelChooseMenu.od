package com.antonzherdev.trains


class LevelChooseMenu extends SceneView {
    static def scene = Scene(LevelChooseMenu())
    override val name = "Level Choose manu"
    private val maxLevel = GameDirector.instance.maxAvailableLevel
    override def camera = Camera2D(vec2(4, 4))
    private val buttons : [ShopButton] = 0.to(3).chain.flatMap{ y ->
        weak 0.to(3).chain.map{ x ->
            val level = (3 - y)*4 + x + 1
            ShopButton(Rect(x, y, 1, 1), drawButton(x, y, level), {
                GameDirector.instance.set(level = level)
                Director.current.resume
            })}
    }.toArray

    private val fontRes : Font = mainFontWith(size = if(egPlatform.isPhone) 14 else 16).beReadyFor(Loc.level(1) + "0123456789")
    private val fontBottom : Font = mainFontWith(size = if(egPlatform.isPhone) 12 else 14).beReadyFor("\$0123456789'%")

    var _scores = MHashMap<uint, LocalPlayerScore>()
    override def start {
        context.clearCache
        1.to(16).for { level ->
            GameDirector.instance.localPlayerScore(level) { score ->
                if(score != nil) {
                    _scores.set(level, score)
                    Director.current.redraw
                }
            }
        }
    }

    override def stop {
        context.clearCache
    }


    private static val rankProgress = Progress.progress(vec4(232, 255, 208, 255)/255, vec4(255, 249, 217, 255)/255)
    static def rankColor(score : LocalPlayerScore) : vec4 = rankProgress(score.percent)

    private static val textColor = vec4(0.1, 0.1, 0.1, 1)
    private def drawButton(x : int, y : int, level : int) = {
        val ph = egPlatform.isPhone
        rect : Rect -> weak {
            val dis = level > maxLevel
            val score : LocalPlayerScore? = _scores(level)

            val color = score.map(rankColor(_)).getOr(vec4(0.95, 0.95, 0.95, 1.0))

            D2D.drawSprite(color, vec3(x, y + 0.8, 0), Rect(0, 0, 1, 0.2))
            if(!dis) {
                D2D.drawSprite(color, vec3(x, y, 0), Rect(0, 0, 1, if(ph) 0.34 else 0.14))
            }
            BlendFunction.standard {
                fontRes.draw(Loc.level(level), vec3(x + 0.5, y + 0.91, 0), TextAlignment(0, 0), color = textColor)
                if(dis) {
                    D2D.drawSprite(vec4(1, 1, 1, 0.8), vec3(x, y, 0), Rect(0, 0, 1, 1))
                } else {
                    val ss = score?.value.getOr(GameDirector.instance.bestScore(level))
                    if(ss > 0 || score != nil) {
                        fontBottom.draw(Loc.format(ss), vec3(x + 0.02, y + if(ph) 0.25 else 0.07, 0), TextAlignment(-1, 0), color = textColor)
                    }
                    if(score != nil) {
                        fontBottom.draw(Loc.top(score),
                            vec3(x + if(ph) 0.02 else 0.98, y + if(ph) 0.11 else 0.07, 0),
                            TextAlignment(if(ph) -1 else 1, 0), color = textColor)
                    }
                }
            }
        }
    }

    override def draw {
        context.depthTest.disabled {
            D2D.drawSprite(textureFor("Levels", TextureFileFormat.JPEG), vec3(0, 0, 0), Rect(0, 0, 4, 4).stripQuad, Rect(0, 0, 1, 0.75).upsideDownStripQuad)

            BlendFunction.standard {
                buttons.for(_.draw)
            }

            1.to(3).for{ c ->
                D2D.drawLine(vec4(0.5, 0.5, 0.5, 1), vec2(c, 0), vec2(c, 5))
                D2D.drawLine(vec4(0.5, 0.5, 0.5, 1), vec2(0, c), vec2(5, c))
            }
        }
    }

    override def isProcessorActive : bool = true
    override def recognizers : Recognizers = Recognizer(Tap()){event -> buttons.exists(_.tap(event))}

    override def viewportWith(viewSize : vec2) : Rect = Rect(0, 0, viewSize)
}
