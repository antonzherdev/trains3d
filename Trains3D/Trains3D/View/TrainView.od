package com.antonzherdev.trains


import core.math._
import com.antonzherdev.eg._

class TrainView(level : Level) {
    val smokeView = SmokeView()

    val blackMaterial = StandardMaterial(vec4(0, 0, 0, 1), vec4(0.1, 0.1, 0.1, 1), 1)

    def trainMaterialFor(color : vec4) : Material = StandardMaterial(color, vec4(0.1, 0.1, 0.1, 1), 0.1)

    def draw {
        draw(trains = level.trains)
        draw(dyingTrains = level.dyingTrains)
    }

    def drawSmoke {
        drawSmoke(trains = level.trains)
        drawSmoke(trains = level.dyingTrains)
    }

    def draw(trains : [Train]) {
        if(trains.isEmpty) return nil

        trains.for {train ->
            draw(train = train)
            if(train.viewData == nil) train.viewData = Smoke(train, level.weather)
            smokeView.draw(train.viewData)
        }
    }

    def drawSmoke(trains : [Train]) {
        trains.for {train -> smokeView.draw(train.viewData)}
    }

    private def draw(train : Train) {
        val material = trainMaterialFor(train.color.color)
        train.cars.for{ car ->
            matrix(
                _.modify(w = w -> {
                    val mid = car.position.line.mid
                    w.translate(mid.x, mid.y, 0.04)
                }).modify(m = m -> {
                    m.rotate(car.position.line.degreeAngle + 90, 0, 1, 0)
                })
            ){
                doDraw(car, material)
            }
        }
    }

    private def doDraw(car : Car, material : Material) {
        if(car.carType == CarType.car) {
            drawCar1(material)
        } else {
            drawEngine1(material)
        }
    }

    val defMat = trainMaterialFor(vec4(1, 1, 1, 1))
    val car1Vao = StandardShaderSystem.instance.vaoWith(defMat, Models.car.vertexBuffer)
    private def drawCar1(material : Material) {
        if(!context.renderTarget.is<ShadowRenderTarget>) {
            material.draw(car1Vao, Models.car.indexBuffer)
        }
//        material.draw(Models.car)
        blackMaterial.draw(Models.carBlack)
    }

    private def drawEngine1(material : Material) {
        material.draw(Models.engine)
        material.draw(Models.engineFloor)
        blackMaterial.draw(Models.engineBlack)
    }

    def draw(dyingTrains : [Train]) {
        if(dyingTrains.isEmpty) return nil

        dyingTrains.for {train ->
            draw(dyingTrain = train)
        }
    }

    private def draw(dyingTrain : Train) {
        val material = trainMaterialFor(dyingTrain.color.color)
        dyingTrain.cars.for{ car ->
            matrix(
                _.modify(m = m -> {
                    car.dynamicBody.matrix.translate(0, 0, -car.carType.height/2 + 0.04).mul(m.rotate(90, 0, 1, 0))
                })
            ){
                doDraw(car, material)
            }
        }
    }


    def updateWith(delta : float, train : Train) {
        train.viewData.cast<Smoke>.updateWith(delta)
    }
}