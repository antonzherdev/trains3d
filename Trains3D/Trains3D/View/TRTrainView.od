package com.antonzherdev.trains

import com.antonzherdev.eg.EGGL._
import core.ODMath._
import com.antonzherdev.eg._

class TRTrainView {
    val smokeView = TRSmokeView()

    val blackMaterial = EGStandardMaterial(EGColor(0, 0, 0, 1), EGColor(0.1, 0.1, 0.1, 1), 1)

    def trainMaterialFor(color : EGColor) : EGMaterial = EGStandardMaterial(color, EGColor(0.3, 0.3, 0.3, 1), 1)
    def draw(trains : [TRTrain]) {
        if(trains.isEmpty) return nil

        trains.for {train ->
            draw(train = train)
            if(train.viewData == nil) train.viewData = TRSmoke(train)
            smokeView.draw(train.viewData)
        }
    }

    def draw(train : TRTrain) {
        train.cars.for(car -> {
            EG.matrix(
                _.modify(w = w -> {
                    val mid = car.position.line.mid
                    w.translate(mid.x, mid.y, 0.05)
                }).modify(m = m -> {
                    m.rotate(car.position.line.degreeAngle - 90, 0, 1, 0)
                })
            ){
                val material = trainMaterialFor(train.color.color)
                if(car.carType == TRCarType.car) {
                    material.draw(TR3D.car)
                    blackMaterial.draw(TR3D.carBlack)
                } else {
                    material.draw(TR3D.engine)
                    material.draw(TR3D.engineFloor)
                    blackMaterial.draw(TR3D.engineBlack)
                }
            }
        })
    }

    def updateWith(delta : float, train : TRTrain) {
        train.viewData.cast<TRSmoke>.updateWith(delta)
    }
}