package com.antonzherdev.trains


import core.math._
import com.antonzherdev.eg._

class TRTrainView {
    val smokeView = TRSmokeView()

    val blackMaterial = StandardMaterial(Color(0, 0, 0, 1), Color(0.1, 0.1, 0.1, 1), 1)

    def trainMaterialFor(color : Color) : Material = StandardMaterial(color, Color(0.3, 0.3, 0.3, 1), 1)
    def draw(trains : [TRTrain]) {
        if(trains.isEmpty) return nil

        trains.for {train ->
            draw(train = train)
            if(train.viewData == nil) train.viewData = TRSmoke(train)
            smokeView.draw(train.viewData)
        }
    }

    private def draw(train : TRTrain) {
        val material = trainMaterialFor(train.color.color)
        train.cars.for{ car ->
            matrix(
                _.modify(w = w -> {
                    val mid = car.position.line.mid
                    w.translate(mid.x, mid.y, 0.04)
                }).modify(m = m -> {
                    m.rotate(car.position.line.degreeAngle + 90, 0, 1, 0)
                })
            ){
                doDraw(car, material)
            }
        }
    }

    private def doDraw(car : TRCar, material : Material) {
        if(car.carType == TRCarType.car) {
            material.draw(TR3D.car)
            blackMaterial.draw(TR3D.carBlack)
        } else {
            material.draw(TR3D.engine)
            material.draw(TR3D.engineFloor)
            blackMaterial.draw(TR3D.engineBlack)
        }
    }

    def draw(dyingTrains : [TRTrain]) {
        if(dyingTrains.isEmpty) return nil

        dyingTrains.for {train ->
            smokeView.draw(train.viewData)
            draw(dyingTrain = train)
        }
    }

    private def draw(dyingTrain : TRTrain) {
        val material = trainMaterialFor(dyingTrain.color.color)
        dyingTrain.cars.for{ car ->
            matrix(
                _.modify(m = m -> {
                    car.dynamicBody.matrix.translate(0, 0, -car.carType.height/2 + 0.04).mul(m.rotate(90, 0, 1, 0))
                })
            ){
                doDraw(car, material)
            }
        }
    }


    def updateWith(delta : float, train : TRTrain) {
        train.viewData.cast<TRSmoke>.updateWith(delta)
    }
}