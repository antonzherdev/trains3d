package com.antonzherdev.trains


import com.antonzherdev.eg._

class CityView {
    val expectedTrainModel = Mesh([
        0, 0, 0, 1, 0, -0.5, 0.001, -0.5,
        1, 0, 0, 1, 0, 0.5, 0.001, -0.5,
        1, 1, 0, 1, 0, 0.5, 0.001, 0.5,
        0, 1, 0, 1, 0, -0.5, 0.001, 0.5
        ], [0, 1, 2,
        2, 3, 0]).vao(StandardMaterial(vec4(1, 1, 1, 1)), shadow = false)
    val roofTexture = textureFor("Roof.png")
    val vaoBody = Models.cityBodies.vao(StandardMaterial(vec4(1, 1, 1, 1)), shadow = false)
    val vaoRoof = Models.cityRoofs.vao(StandardMaterial(roofTexture), shadow = false)
    val vaoWindows = Models.cityWindows.vao(StandardMaterial(textureFor("Window.png"), vec4(1, 1, 1, 1), 1), shadow = false)

    def draw(city : City) {
        matrix(
            _.modify(w = w -> w.translate(city.tile.x, city.tile.y, 0))
             .modify(m = m -> m.rotate(city.angle.angle, 0, -1, 0))
        ) {
            vaoBody.draw(StandardMaterial(city.color.color))
            if(!context.renderTarget.is<ShadowRenderTarget>) {
                context.cullFace.disabled {
                    val roofMaterial = StandardMaterial(ColorSource(city.color.color, roofTexture), vec4(0.5, 0.5, 0.5, 1), 1)
                    vaoRoof.draw(roofMaterial)
                }
                vaoWindows.draw
                city.expectedTrainCounter.for{time ->
                    val x = -time/2
                    expectedTrainModel.draw(StandardMaterial(vec4(1.0, 0.5 - x, 0.5 - x, 1)))
                }
            }
        }
    }
}