package com.antonzherdev.trains

class ShopButton(onDraw : (Rect) -> void, onClick : () -> void) {
    static def apply(rect : Rect, onDraw : (Rect) -> void, onClick : () -> void) = {
        val b = ShopButton(onDraw, onClick)
        b.rect = rect
        b
    }

    var rect : Rect = Rect(0, 0, 1, 1)
    def tap(event : Event) : bool =
        if(rect.contains(event.location)) {
            onClick()
            true
        } else false

    def draw {
        onDraw(rect)
    }


    static def drawText(font : Font, color : vec4, text : string) : Rect -> void = {
        val r = Var<vec3>(vec3(0, 0, 0))
        val tc = Text(font, text, r, TextAlignment(0, 0), color)
        (rect : Rect) -> {
            r.value = vec3(rect.center)
            tc.draw
        }
    }
}

class ShopMenu extends PauseView {
    lazy val shop = scaledTextureFor("Shop", TextureFormat.RGBA4)

    val shareFont = mainFontWith(size = 18).beReadyFor("0123456789,.FacebookTwitter")

    def drawBuyButton(count : uint, price : string, rect : Rect) {
        drawSnail(vec3(0.95, 1.0, 0.95), count, rect)
        shareFont.draw(if(GameDirector.instance.purchasing.contains(count)) "..." else price,
        at = rect.p(0.5, 0.1) + vec2(0, 16), TextAlignment(0, 0), color = vec4(0.1, 0.1, 0.1, 1))
    }

    def drawShareButton(color : vec3, texture : Texture, name : string, count : uint, rect : Rect) {
        drawSnail(color, count, rect)

        val pos = rect.p(0.1, 0.1)
        D2D.drawSprite(texture, at = vec3(pos, 0), rect = Rect(0, 0, 32, 32))
        shareFont.draw(name, at = pos + vec2(36, 16), TextAlignment(-1, 0), color = vec4(0.1, 0.1, 0.1, 1))
    }

    def drawButtonBackground(color : vec3, rect : Rect) {
        D2D.drawSprite(vec4(color, 0.9), at = vec3(rect.p, 0), rect = Rect(0, 0, rect.size - vec2(2, 2)))
    }
    def drawSnail(color : vec3, count : uint, rect : Rect) {
        if(count != 10 && count != 20 && count != 50 && count != 200) return nil

        drawButtonBackground(color, rect)

        val pos = rect.p(0.5, 0.6)

        val snailPos =
        if(count == 10) vec2(0, 128)
        else if(count == 20) vec2(128, 128)
        else if(count == 50) vec2(128, 64)
        else vec2(0, 64)
        D2D.drawSprite(shop.region(snailPos.x, snailPos.y, 128, 64), at = vec3(pos , 0), rect = Rect(-64, -32, 128, 64))
    }

    def drawCloseButton(rect : Rect) {
        drawButtonBackground(vec3(0.95, 0.95, 0.95), rect)
        D2D.drawSprite(shop.region(0, 0, 64, 64), at = rect.p(0.5, 0.5), rect = Rect(-32, -32, 64, 64))
    }

    private val buttonSize = vec2(150, 150)
    private var curButtons : [ShopButton] = []
    def draw {
        val buttons : [(() -> bool, ShopButton)] = [
            (() -> GameDirector.instance.isShareToFacebookAvailable,
            ShopButton(drawShareButton(vec3(0.92, 0.95, 1.0), shop.region(128, 0,  32, 32), "Facebook", GameDirector.facebookShareRate, _), GameDirector.instance.shareToFacebook)),
            (() -> GameDirector.instance.isShareToTwitterAvailable,
            ShopButton(drawShareButton(vec3(0.92, 0.95, 1.0), shop.region(160, 0, 32, 32), "Twitter",  GameDirector.twitterShareRate, _), GameDirector.instance.shareToTwitter))
            ] + GameDirector.instance.rewindPrices.chain.map{item ->
                (() -> true, ShopButton(
                    rect -> drawBuyButton(count = item.a, price = item.b.map(_.price).getOr(""), rect),
                    item.b.for(GameDirector.instance.buyRewinds(_))) )
            }.toArray +
        [(() -> true, ShopButton(drawCloseButton(_), GameDirector.instance.closeShop) )]

        curButtons = buttons.chain.filter(_.a()).map(_.b).toArray

        val size = vec2(((curButtons.count + 1)/2).cast<uint>, 2) * buttonSize
        var pos = ((context.scaledViewSize.value) - size)/2 + vec2(0, buttonSize.y)
        var row = 0
        curButtons.for { btn ->
            btn.rect = Rect(pos, buttonSize)
            if(row == 0) {
                row++
                pos += vec2(0, -buttonSize.y)
            } else {
                row = 0
                pos += vec2(buttonSize.x, buttonSize.y)
            }
            btn.draw
        }
    }

    def tap(event : Event) : bool  = curButtons.find(_.tap(event)).isDefined
}
