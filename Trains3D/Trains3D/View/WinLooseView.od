package com.antonzherdev.trains

final class WinMenu(val level : Level) extends MenuView {
    override def buttons : [(string, Rect -> void)] = weak
        (if(level.number < 16) [(Loc.goToNext(level.number), (rect : Rect) -> GameDirector.instance.nextLevel)] else []) +
        (if(GameCenter.isSupported) [(Loc.leaderboard, (rect : Rect) -> GameDirector.instance.showLeaderboard(level))] else []) +
        [(Loc.replay(level.number), (rect : Rect) -> GameDirector.instance.restartLevel),
        (Loc.chooseLevel, (rect : Rect) -> GameDirector.instance.chooseLevel)] +
        (if(ShareDialog.isSupported) [(Loc.shareButton, (rect : Rect) -> GameDirector.instance.share(rect))] else [])


    override def headerHeight = 100.0
    override def buttonHeight : int = if(egPlatform.isPhone) 40 else 50
    override def drawHeader {
        headerText.draw
        resultText.draw
        topText.draw
        bestScoreText.draw
    }

    private val gcScore = Var<LocalPlayerScore?>(nil)
    private val obs = GameDirector.instance.playerScoreRetrieved.observe{score ->
        gcScore.value = score
        Director.current.redraw
    }

    override def headerMaterial : React<ColorSource>? = gcScore.map{gcs ->
        ColorSource(color = gcs.map(LevelChooseMenu.rankColor(_)).getOr(vec4(0.85, 0.9, 0.75, 1.0)))
    }

    def init {
        headerText = Text(
            font = mainFontWith(size = 36), text = Loc.victory,
            position = headerRect.map(vec3(_.p(0.5, 0.75))),
            alignment = TextAlignment(0, 0), color = vec4(0, 0, 0, 1))
        resultText = Text(
            font = mainFontWith(size = 18),
            text = level.score.money.map("$(Loc.result): $(Loc.format(_))"),
            position = headerRect.map(vec3(_.p(0.03, 0.4))),
            alignment = TextAlignment(-1, 0), color = vec4(0, 0, 0, 1))
        bestScoreText = Text(
            font = mainFontWith(size = 18),
            text = gcScore.map{gcs ->
                val bs = gcs?.value.getOr(GameDirector.instance.bestScore(level.number))
                "$(Loc.best): $(Loc.format(bs))"
            },
            position = headerRect.map(vec3(_.p(0.97, 0.4))),
            alignment = TextAlignment(1, 0), color = vec4(0, 0, 0, 1))
        topText = Text(
            visible = gcScore.map(_ != nil),
            font = mainFontWith(size = 18),
            text = gcScore.map{gcs ->
                gcs.map(Loc.top(_)).getOr("")
            },
            position = headerRect.map(vec3(_.p(0.97, 0.2))),
            alignment = TextAlignment(1, 0), color = vec4(0, 0, 0, 1))
    }

    private val headerText : Text
    private val resultText : Text
    private val bestScoreText : Text
    private val topText : Text
}

final class LooseMenu(val level : Level) extends MenuView {
    override def buttons : [(string, Rect -> void)] = weak [
    (Loc.rewind, (rect : Rect) -> {
        Director.current.resume
        GameDirector.instance.runRewind(level)
        }),
    (Loc.replay(level.number), (rect : Rect) -> {
        GameDirector.instance.restartLevel
        Director.current.resume}),
    (Loc.chooseLevel, (rect : Rect) -> GameDirector.instance.chooseLevel),
    (Loc.supportButton, (rect : Rect) -> GameDirector.instance.showSupport(changeLevel = false))]
    override def headerHeight = 75.0
    override def drawHeader {
        headerText.draw
        detailsText.draw
    }
    override def headerMaterial : React<ColorSource>? =  ColorSource(vec4(1.0, 0.85, 0.75, 1.0))

    def init {
        headerText = Text(
            font = mainFontWith(size = 36),
            text = Loc.defeat,
            position = headerRect.map(vec3(_.p(0.05, 0.7))),
            alignment = TextAlignment(-1, 0), color = vec4(0, 0, 0, 1))
        detailsText = Text(
            font = mainFontWith(size = 16),
            text = Loc.moneyOver,
            position = headerRect.map(vec3(_.p(0.5, 0.35))),
            alignment = TextAlignment(0, 0), color = vec4(0, 0, 0, 1))
    }
    private val headerText : Text
    private val detailsText : Text
}

