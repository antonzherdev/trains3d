package com.antonzherdev.trains


class TreeView(forest : Forest) {
    val textures = [textureFor("Pine.png"), textureFor("Tree1.png"), textureFor("Tree2.png"), textureFor("Tree3.png")
        , textureFor("YellowTree.png")]
    val materials = textures.chain.map(ColorSource(_)).toArray
    val rects = textures.chain.map(Rect(0, 0, _.size.x/(_.size.y*4), _.size.y/(_.size.y*2)).centerX).toArray

    def draw {
        glAlphaFunc(GL_GREATER, 0.3)
        glEnable(GL_ALPHA_TEST)
        BlendFunction.standard {
            forest.trees.for(draw(_))
        }
        glDisable(GL_ALPHA_TEST)
    }

    private val mainUv = Rect(0, 0, 0.5, 1).upsideDownQuad
    private val rustleUv = Rect(0.5, 0, 0.5, 1).upsideDownQuad
    private def draw(tree : Tree) {
        val planeCoord = PlaneCoord(Plane(vec3(0, 0, 0), vec3(0, 0, 1)), vec3(1, 0, 0), vec3(0, 1, 0))
        val mPlaneCoord = planeCoord.set(y = (planeCoord.y + vec3(tree.incline.x, 0, tree.incline.y)).normalize)
        val tp = tree.treeType.ordinal
        val quad = (rects(tp)*tree.size).quad
        val quad3 = Quad3(mPlaneCoord, quad)
        val mQuad = Quad(quad3.p0.xy, quad3.p1.xy, quad3.p2.xy, quad3.p3.xy)
        Billboard.draw(materials[tp], at = vec3(tree.position, 0), mQuad, uv = mainUv)

        val r = tree.rustle*0.03
        val rPlaneCoord = mPlaneCoord.set(x = mPlaneCoord.x + vec3(0, r, 0))
        val rQuad3 = Quad3(rPlaneCoord, quad)
        Billboard.draw(textures(tp), at = vec3(tree.position, 0),
            Quad(rQuad3.p0.xy, rQuad3.p1.xy, rQuad3.p2.xy, rQuad3.p3.xy),
            uv = rustleUv)
    }
}