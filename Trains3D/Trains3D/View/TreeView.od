package com.antonzherdev.trains


class TreeShaderBuilder(shadow : bool) extends ShaderTextBuilder
{
    def vertex =
        "$vertexHeader

         $ain highp vec3 position;
         $ain lowp vec2 model;
         $ain mediump vec2 vertexUV;
         $ain mediump vec2 vertexUVShiver;

         $out mediump vec2 UV;
         $out mediump vec2 UVShiver;


         uniform mat4 wc;
         uniform mat4 p;

         void main(void) {
            highp vec4 pos = wc*vec4(position, 1);
            pos.x += model.x;
            pos.y += model.y;
            gl_Position = p*pos;
            UV = vertexUV;
            UVShiver = vertexUVShiver;
        }"
    def fragment =
        "$versionString

         $in mediump vec2 UV;
         $in mediump vec2 UVShiver;
         uniform lowp sampler2D txt;
        $if(shadow)
         uniform lowp float alphaTestLevel;
        $endif
        $if(shadow && version > 100)
         out float depth;
        $else
         $fragColorDeclaration
        $endif

        void main(void) {
            lowp vec4 fragColor;$when(shadow && !isFragColorDeclared)
            lowp vec4 t1 = $texture2D\(txt, UV);
            lowp vec4 t2 = $texture2D\(txt, UVShiver);
            $fragColor = vec4(t1.a) * t1 + vec4(1.0 - t1.a) * t2;
           $if(shadow)
            if($fragColor.a < 0.1) {
                discard;
            }
           $endif
            depth = gl_FragCoord.z;$when(shadow && version > 100)
        }"

    def program = ShaderProgram("Tree", vertex, fragment)
}

class TreeShader(program : ShaderProgram, shadow : bool) extends Shader<ColorSource>(program) {
    static val instanceForShadow = TreeShader(TreeShaderBuilder(true).program, true)
    static val instance = TreeShader(TreeShaderBuilder(false).program, false)

    val positionSlot = attributeFor("position")
    val modelSlot = attributeFor("model")
    val uvSlot : ShaderAttribute = attributeFor("vertexUV")
    val uvShiverSlot : ShaderAttribute = attributeFor("vertexUVShiver")

    val wcUniform = uniformMat4("wc")
    val pUniform = uniformMat4("p")

    override def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, shift = vbDesc.position)
        modelSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.model)
        uvSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.uv)
        uvShiverSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.uv + 2*4)
    }

    override def loadUniforms(param : ColorSource) {
        wcUniform(matrix = matrix.value.wc)
        pUniform(matrix = matrix.value.p)
        param.texture.for(context.bindTexture(_))
    }

    static val vbDesc = VertexBufferDesc<TreeData>(TreeData.type,
        position = 0, uv = 5*4, normal = -1, color = -1, model = 3*4)
}

struct TreeData(var position : vec3, var model : vec2, var uv : vec2, var uvShiver : vec2)

class TreeView(forest : Forest) {
    val texture = compressedTextureFor(forest.rules.forestType.name, TextureFilter.linear)
    val material = ColorSource(vec4(1, 1, 1, 1), texture)
//    val materials = textures.chain.map(ColorSource(vec4(1, 1, 1, 1), _, 0.3)).toArray
//    val rects = textures.chain.map(Rect(0, 0, _.size.x/(_.size.y*4), _.size.y/(_.size.y*2)).centerX).toArray
    val vbs = 1.to(3).chain.map(VBO.mut(TreeShader.vbDesc, GL_DYNAMIC_DRAW)).toArray
    private var vao : VertexArray<ColorSource>?
    private val vaos =
        VertexArrayRing<ColorSource>(ringSize = 3, creator = Mesh(vertex = vbs(_).get, IBO.mut(GL_STREAM_DRAW)).vao(TreeShader.instance))
    private val shadowMaterial = ColorSource(vec4(1, 1, 1, 1), texture, 0.1)
    private var shadowVao : VertexArray<ColorSource>?
    private val shadowVaos =
        VertexArrayRing<ColorSource>(ringSize = 3, creator = Mesh(vertex = vbs(_).get, IBO.mut(GL_STREAM_DRAW)).vao(TreeShader.instanceForShadow))
    private var vbo : MutableVertexBuffer<TreeData>?
    private var ibo : MutableIndexBuffer?
    private var shadowIbo : MutableIndexBuffer?
    private val writer = TreeWriter(forest)
    private var writeFuture : Future<uint>?
    private var _first = true

    def prepare {
        _firstDrawInFrame = true
        if(_first) {
            complete
            _first = false
        }
    }

    def complete {
        vao = vaos.next
        shadowVao = shadowVaos.next
        if(vao != nil && shadowVao != nil) {
            shadowVao.syncWait
            vao.syncWait

            vbo = vao.mutableVertexBuffer.get
            ibo = vao.index.cast<MutableIndexBuffer>
            shadowIbo = shadowVao.index.cast<MutableIndexBuffer>

            val n = forest.treesCount
            val r = vbo.get.beginWrite(4 * n)
            val ir = ibo.get.beginWrite(6 * n)
            val sr = shadowIbo.get.beginWrite(6 * n)
            if(r != nil && ir != nil && sr != nil) {
                writeFuture = writer.writeTo(vbo = r, ibo = ir, shadowIbo = sr, maxCount = n)
            } else {
                writeFuture = nil
            }
        }
    }

    private var _firstDrawInFrame = true
    private var _treesIndexCount : uint = 0
    def draw {
        if(writeFuture != nil) {
            if(_firstDrawInFrame) {
                _treesIndexCount = writeFuture.getResult(1)
                vbo?.endWrite
                ibo?.endWrite
                shadowIbo?.endWrite
                _firstDrawInFrame = false
            }
            if(context.renderTarget.isShadow) {
                context.cullFace.disabled {
                    shadowVao?.draw(shadowMaterial, start = 0, end = _treesIndexCount)
                }
                shadowVao?.syncSet
            } else {
                BlendFunction.standard{ context.cullFace.disabled {
                    vao?.draw(material, start = 0, end = _treesIndexCount)
                }}
                vao?.syncSet
            }
        }
    }

}

class TreeWriter(forest : Forest) extends Actor {
    def writeTo(vbo : Pointer<TreeData>, ibo : Pointer<uint4>, shadowIbo : Pointer<uint4>, maxCount : uint4) : Future<uint4> = lockAndOnSuccess(forest.trees){ trees ->
        _writeTo(vbo, ibo, shadowIbo, trees, maxCount)
    }

    private def _writeTo(vbo : Pointer<TreeData>, ibo : Pointer<uint4>, shadowIbo : Pointer<uint4>, trees : [Tree], maxCount : uint4) : uint4 = {
        var a = vbo
        var ia = ibo
        val n = trees.count.min(maxCount)
        var ib = shadowIbo + 6*(n - 1)
        var j : uint4 = 0
        var i : uint4 = 0
        trees.for{tree ->
            if(j < n) {
                a = write(a, tree)
                ia = D2D.writeQuadIndex(ia, i)
                ib = D2D.writeQuadIndex(ib, i)
                ib -= 12
                i += 4
                j++
            }
        }
        (6*n).cast<uint4>
    }

    private inline def write(a : Pointer<TreeData>, tree : Tree) : Pointer<TreeData> = {
        val tp = tree.treeType
        val mainUv = tp.uvQuad

        val planeCoord = PlaneCoord(Plane(vec3(0, 0, 0), vec3(0, 0, 1)), vec3(1, 0, 0), vec3(0, 1, 0))
        val mPlaneCoord = planeCoord.set(y = (planeCoord.y + vec3(tree.incline.x, 0, tree.incline.y)).normalize)
        val quad = (Rect(0, 0, tp.size).centerX*tree.size).stripQuad
        val quad3 = Quad3(mPlaneCoord, quad)
        val mQuad = Quad(quad3.p0.xy, quad3.p1.xy, quad3.p2.xy, quad3.p3.xy)

        val r = tree.rustle*0.1 * tp.rustleStrength
        val rustleUv = mainUv + vec2(tp.uv.width, 0)

        val at = vec3(tree.position, 0)
        var v = a
        v.position = at
        v.model = mQuad.p0
        v.uv = mainUv.p0
        v.uvShiver = rustleUv.p0 + vec2(r, -r)
        v++
        v.position = at
        v.model = mQuad.p1
        v.uv = mainUv.p1
        v.uvShiver = rustleUv.p1 + vec2(-r, r)
        v++
        v.position = at
        v.model = mQuad.p2
        v.uv = mainUv.p2
        v.uvShiver = rustleUv.p2 + vec2(r, -r)
        v++
        v.position = at
        v.model = mQuad.p3
        v.uv = mainUv.p3
        v.uvShiver = rustleUv.p3 + vec2(-r, r)
        v + 1
    }
}
