package com.antonzherdev.trains


trait Strings {
    def format(cost : int) : string = {
        var i = 0
        val a = "'".head
        val str = "$cost".chain.reverse.flatMap{s ->
            i++
            if(i == 3) List(s, List(a))
            else Option(s)
        }.reverse.charsToString

        "\$$str"
    }

    def level(number : uint) : string
    def startLevel(number : uint) : string = level(number)
    def railBuilt(cost : int) : string
    def trainArrived(cost : int) : string
    def trainDestroyed(cost : int) : string
    def trainDelayedFine(cost : int) : string
    def damageFixedPayment(cost : int) : string
    def cityBuilt : string
    def resumeGame : string
    def restart(level : Level) : string
    def replay(level : Level) : string
    def goToNext(level : Level) : string
    def chooseLevel : string
    def callRepairer : string
    def undo : string
    def victory : string
    def defeat : string
    def moneyOver : string
    def result : string
    def best : string
    def rate : string
    def top(score : LocalPlayerScore) : string
    def leaderboard : string
    def supportButton : string

    def colorOrange : string
    def colorBlue : string
    def colorMint : string
    def colorYellow : string
    def colorRed : string
    def colorGreen : string
    def colorPink : string
    def colorBeige : string
    def colorPurple : string
    def colorGrey : string

    def helpConnectTwoCities : string
    def helpRules : string
    def helpNewCity : string
    def helpSporadicDamage : string
    def helpDamage : string
    def helpRepairer : string
    def helpCrazy : string
    def helpExpressTrain : string
    def helpTrain(to : string) : string
    def helpTrainWithSwitches(to : string) : string
    def helpToMakeZoom : string
}

class EnStrings extends Strings {
    def level(number : uint) : string = "Level $number"
    def railBuilt(cost : int) : string = "-$(format(cost)): For the railroad building"
    def trainArrived(cost : int) : string = "+$(format(cost)): For the arrived train"
    def trainDestroyed(cost : int) : string = "-$(format(cost)): For the train destroying"
    def trainDelayedFine(cost : int) : string = "-$(format(cost)): Fine for the delayed train"
    def damageFixedPayment(cost : int) : string = "-$(format(cost)): Payment for the railroad repairing"
    def resumeGame : string = "Continue the game"
    def restart(level : Level) : string = "Restart the level $(level.number)"
    def replay(level : Level) : string = "Play the level $(level.number) more one time"
    def goToNext(level : Level) : string = "Play the next level $(level.number + 1)"
    def chooseLevel : string = "Choose level"
    def callRepairer : string = "Call\nrepairers"
    def undo : string = "Undo"
    def victory : string = "Victory!"
    def defeat : string = "Defeat!"
    def moneyOver : string = "Money is over"
    def cityBuilt : string = "New city has been built"

    def colorOrange : string = "orange"
    def colorGreen : string = "green"
    def colorPink : string = "pink"
    def colorPurple : string = "purple"
    def colorGrey : string = "grey"
    def colorBlue : string = "blue"
    def colorMint : string = "mint"
    def colorRed : string = "red"
    def colorBeige : string = "beige"
    def colorYellow : string = "yellow"
    def rate : string = "Rate it"

    def helpConnectTwoCities : string =
       "Connect two cities by rails.
       $if(egPlatform.touch)
        Simply paint rails by your finger.
       $else
        Use mouse or
        move two fingers on a touchpad.
       $endif"
    def helpRules : string =
        "Don't allow falling of account balance lower than zero.
         Stand assigned time with a positive balance and win a level."
    def helpNewCity : string =
        "New cities sometimes appear.
         Connect theirs to your railroad."
    def helpTrain(to : string) : string =
        "This train is going to $to city.
         You can understand it by train's color."
    def helpTrainWithSwitches(to : string) : string =
        "Turn railroad switches by$if(egPlatform.touch) tap$else click$endif,
         so train arrive at $to city."
    def helpExpressTrain : string =
        "It's very fast express train.
         It doesn't have time to stop in front of a switch.
         In this case the train will be destroyed.
         But you can use lights to conduct the train."
    def helpToMakeZoom : string =
        "You can change scale using pinch gesture.
         Use two fingers for scrolling.
         And one finger for railway building."
    def helpSporadicDamage : string =
        "Sometimes rails could be broken in itself."
    def helpDamage : string =
        "Call the special train using a button to fix the damage.
         It's better to call train from the closest city to the damage."
    def helpCrazy : string =
        "The machinist of the train is crazy.
         He doesn't pay attention to lights or closed switches.
         Send this train to any city."

    def helpRepairer : string =
        "Move the repairer train throught the damage
         and send it to any city."

    def result : string = "Score:"
    def best : string = "Your best:"
    def top(score : LocalPlayerScore) : string =
        if(score.rank == 1) "The best ever!"
        else if(score.rank == 2) "The 2-nd ever!"
        else if(score.rank == 3) "The 3-rd ever!"
        else {
            val p = score.rank.cast<float> / score.maxRank
            if(p <= 5) "Top 5%"
            else if(p <= 10) "Top 10%"
            else if(p <= 20) "Top 20%"
            else if(p <= 30) "Top 30%"
            else if(p <= 50) "Better than average"
            else "Worse than average"
        }
    def leaderboard : string = "Best results"
    def supportButton : string = "Question or support"
}

class RuStrings extends Strings{
    def level(number : uint) : string = "Уровень $number"
    def railBuilt(cost : int) : string = "-$(format(cost)): За постройку железной дороги"
    def trainArrived(cost : int) : string = "+$(format(cost)): За прибывший поезд"
    def trainDestroyed(cost : int) : string = "-$(format(cost)): За уничтожение поезда"
    def trainDelayedFine(cost : int) : string = "-$(format(cost)): Штраф за задерживающийся поезд"
    def damageFixedPayment(cost : int) : string = "-$(format(cost)): Плата за починку железной дороги"
    def resumeGame : string = "Продолжить игру"
    def restart(level : Level) : string = "Начать заново уровень $(level.number)"
    def replay(level : Level) : string = "Переиграть уровень $(level.number)"
    def goToNext(level : Level) : string = "Перейти к уровеню $(level.number + 1)"
    def chooseLevel : string = "Выбрать уровень"
    def callRepairer : string = "Вызвать\nремонтников"
    def undo : string = "Отменить"
    def victory : string = "Победа!"
    def defeat : string = "Вы проиграли!"
    def moneyOver : string = "Закончились деньги"
    def cityBuilt : string = "Построен новый город"

    def colorOrange : string = "оранжевый"
    def colorGreen : string = "зеленый"
    def colorPink : string = "розовый"
    def colorPurple : string = "cиреневый"
    def colorGrey : string = "серый"
    def colorBlue : string = "синий"
    def colorMint : string = "мятный"
    def colorRed : string = "красный"
    def colorBeige : string = "бежевый"
    def colorYellow : string = "желтый"

    def helpConnectTwoCities : string =
        "Соедините два города рельсами.
        $if(egPlatform.touch)
         Для этого просто проведите пальцем по экрану.
        $else
         Используйте мышку или
         проведите двумя пальцами по тачпаду.
        $endif"
    def helpNewCity : string =
        "Иногда появляются новые города.
         Подсоединяйте их к своей железной дороге."
    def helpTrain(to : string) : string =
        "Этот поезд направляется в $to город.
         Вы можете понять это по цвету поезда."
    def helpTrainWithSwitches(to : string) : string =
        "Переключите железнодорожные стрелки$if(egPlatform.touch) касанием$else кликом$endif,
         чтобы этот поезд попал в $to город."
    def helpExpressTrain : string =
        "Это очень быстрый экспресс.
         Он не успеет остановиться перед стрелкой.
         Если заблокировать его стрелкой, то он уничтожится.
         Но можно использовать светофоры."

    def helpToMakeZoom : string =
        "Вы можете изменять масштаб с помощью жеста.
         Для прокрутки используйте два пальца.
         Для строительства рельсов один."
    def helpRules : string =
        "Не позволяйте балансу опускаться ниже нуля.
         Продержитесь с положительным балансов отведенное время
         и выграйте уровень."
    def helpSporadicDamage : string =
        "Иногда рельсы могут ломаться сами по себе."
    def helpDamage : string =
        "Вызовите специальный поезд с помощью кнопки, чтобы починить рельсы.
         Лучше вызвать из города, который находиться ближе к повреждению."
    def helpRepairer : string =
        "Проведите ремонтный поезд через повреждение
         и отправьте его в любой город."
    def helpCrazy : string =
        "Машинист этого поезда сошел с ума.
         Он не обращает внимания на светофоры или закрытые стрелки.
         Отправьте этот поезд в любой город."

    def rate : string = "Оценить игру"
    def result : string = "Счет:"
    def best : string = "Ваш лучший:"
    def top(score : LocalPlayerScore) : string =
        if(score.rank == 1) "1-й!"
        else if(score.rank == 2) "2-й!"
        else if(score.rank == 3) "3-й!"
        else {
            val p = score.rank.cast<float> / score.maxRank
            if(p <= 5) "Лучшие 5%"
            else if(p <= 10) "Лучшие 10%"
            else if(p <= 20) "Лучшие 20%"
            else if(p <= 30) "Лучшие 30%"
            else if(p <= 50) "Выше среднего"
            else "Ниже среднего"
        }
    def leaderboard : string = "Лучшие результаты"
    def supportButton : string = "Вопрос или поддержка"
}

object Str {
    private val locales : [string : Strings] = [("en", EnStrings()), ("ru", RuStrings())].chain.toMap
    val Loc : Strings = locales.opt(Locale.currentLanguageId).getOrElse(EnStrings())
}
