package com.antonzherdev.trains


trait Strings {
    def format(cost : int) : string = {
        var i = 0
        val a = "'".head
        val str = "$cost".chain.reverse.flatMap{s ->
            i++
            if(i == 3) List(s, List(a))
            else Option(s)
        }.reverse.charsToString

        "\$$str"
    }

    def level(number : uint) : string
    def startLevel(number : uint) : string = level(number)
    def railBuilt(cost : int) : string
    def trainArrived(train : Train, cost : int) : string
    def trainDestroyed(cost : int) : string
    def trainDelayedFine(train : Train, cost : int) : string
    def damageFixedPayment(cost : int) : string
    def cityBuilt : string
    def resumeGame : string
    def restart(level : Level) : string
    def replay(level : Level) : string
    def goToNext(level : Level) : string
    def chooseLevel : string
    def callRepairer : string
    def undo : string
    def victory : string
    def defeat : string
    def moneyOver : string
    def result : string
    def best : string

    def supportButton : string
    def supportEmailText : string
    def rateText : string
    def rateNow : string
    def rateProblem : string
    def rateLater : string
    def rateClose : string

    def top(score : LocalPlayerScore) : string
    def leaderboard : string
    def tapToContinue : string

    def colorOrange : string
    def colorBlue : string
    def colorMint : string
    def colorYellow : string
    def colorRed : string
    def colorGreen : string
    def colorPink : string
    def colorBeige : string
    def colorPurple : string
    def colorGrey : string

    def helpConnectTwoCities : string
    def helpRules : string
    def helpNewCity : string
    def helpSporadicDamage : string
    def helpDamage : string
    def helpRepairer : string
    def helpCrazy : string
    def helpInZoom : string
    def helpExpressTrain : string
    def helpTrain(to : string) : string
    def helpTrainWithSwitches(to : string) : string
    def helpToMakeZoom : string
    def linesAdvice : string
}

class EnStrings extends Strings {
    def level(number : uint) : string = "Level $number"
    def railBuilt(cost : int) : string = "-$(format(cost)): Payment for the railroad building"
    def trainArrived(train : Train, cost : int) : string = "+$(format(cost)): Reward for the arrived $(train.color.localName) train"
    def trainDestroyed(cost : int) : string = "-$(format(cost)): Fine for the destroyed train"
    def trainDelayedFine(train : Train, cost : int) : string = "-$(format(cost)): Fine for the delayed $(train.color.localName) train"
    def damageFixedPayment(cost : int) : string = "-$(format(cost)): Payment for the railroad repairs"
    def resumeGame : string = "Continue the game"
    def restart(level : Level) : string = "Restart the level $(level.number)"
    def replay(level : Level) : string = "Play level $(level.number) again"
    def goToNext(level : Level) : string = "Play the next level"
    def chooseLevel : string = "Choose the level"
    def callRepairer : string = "Call the\nservice train"
    def undo : string = "Undo"
    def victory : string = "Victory!"
    def defeat : string = "Defeat!"
    def moneyOver : string = "Money is over"
    def cityBuilt : string = "The new city has been built"
    def tapToContinue : string = if(egInterfaceIdiom == InterfaceIdiom.computer) "Click to contiunue" else "Tap to continue"

    def colorOrange : string = "orange"
    def colorGreen : string = "green"
    def colorPink : string = "pink"
    def colorPurple : string = "purple"
    def colorGrey : string = "grey"
    def colorBlue : string = "blue"
    def colorMint : string = "mint"
    def colorRed : string = "red"
    def colorBeige : string = "beige"
    def colorYellow : string = "yellow"

    def supportButton : string = "Email the developer"
    def supportEmailText : string =
        "Report a problem or tell me about your ideas.
         I will definetely reply to you and try to fix problems as soon as posible.
         Thank you very much, Anton Zhedev, Developer"
    def rateText : string =
        "If you enjoy playing Raildale, would you mind taking
         a moment to rate it? It won’t take more than a minute.

         If you are faced with a problem, please, report it to me.
         I will try to fix it as soon as possible.

         Thanks for your support!
         Best Regards, Anton Zherdev, Developer"
    def rateSignature : string = "Anton Zherdev, Developer"
    def rateNow : string = "Rate it now"
    def rateProblem : string = "Report a problem"
    def rateLater : string = "Remind me later"
    def rateClose : string = "No, thanks"

    def helpConnectTwoCities : string =
       "Connect two cities by rail.
       $if(egPlatform.touch)
        Simply paint the rails using your finger.
       $else
        Use a mouse or
        move two fingers on a touchpad.
       $endif"
    def helpRules : string =
        "Don't allow account balance to fall lower than zero.
         Hang in the allotted time with a positive balance and win a level."
    def helpNewCity : string =
        "Sometimes new cities appear.
         Connect them to your railway."
    def helpTrain(to : string) : string =
        "This train is going to the $to city.
         You can recognize it by the color of the train."
    def helpTrainWithSwitches(to : string) : string =
        "Turn railroad switches using a $if(egPlatform.touch) tap$else click$endif,
         so the train will arrive at the $to city."
    def helpExpressTrain : string =
        "This is a very fast express train.
         It doesn't have time to stop in front of a switch.
         In this case the train will be destroyed.
         But you can use lights to conduct the train."
    def helpToMakeZoom : string =
        "You can change the scale using a pinch gesture."
    def helpInZoom : string =
        "Use a finger to scroll.
         Press the hammer button at the top to build rails.
         Press again to come back to the scroll mode."
    def helpSporadicDamage : string =
        "Sometimes rails can be broken."
    def helpDamage : string =
        "Call the service train using one of the buttons to fix the damage.
         It is better to call the train from the closest city to the damage."
    def helpCrazy : string =
        "The engineer of the train is crazy.
         He doesn't pay attention to lights or closed switches.
         Send this train to any city."

    def helpRepairer : string =
        "Conduct the service train through the damage
         and send it to any city."

    def result : string = "Score"
    def best : string = "Your best"
    def top(score : LocalPlayerScore) : string =
        if(score.rank == 1) "The 1-st ever!"
        else if(score.rank == 2) "The 2-nd ever!"
        else if(score.rank == 3) "The 3-rd ever!"
        else {
            val p = score.rank.cast<float> / score.maxRank
            if(p <= 5) "Top 5%"
            else if(p <= 10) "Top 10%"
            else if(p <= 20) "Top 20%"
            else if(p <= 30) "Top 30%"
            else if(p <= 50) "Better than average"
            else "Worse than average"
        }
    def leaderboard : string = "Best results"
    def linesAdvice : string =
        "You can connect cities using more than one line.
         Thus two trains coming from the opposite direction
         would not collide with each other."
}

class RuStrings extends Strings{
    def level(number : uint) : string = "Уровень $number"
    def railBuilt(cost : int) : string = "-$(format(cost)): Плата за постройку железной дороги"
    def trainArrived(train : Train, cost : int) : string = "+$(format(cost)): Доход от прибытия поезда в $(train.color.localName) город"
    def trainDestroyed(cost : int) : string = "-$(format(cost)): Штраф за уничтожение поезда"
    def trainDelayedFine(train : Train, cost : int) : string = "-$(format(cost)): Штраф за задерживающийся $(train.color.localName) поезд"
    def damageFixedPayment(cost : int) : string = "-$(format(cost)): Плата за ремонт железной дороги"
    def resumeGame : string = "Продолжить игру"
    def restart(level : Level) : string = "Начать заново уровень $(level.number)"
    def replay(level : Level) : string = "Переиграть уровень $(level.number)"
    def goToNext(level : Level) : string = "Перейти к уровеню $(level.number + 1)"
    def chooseLevel : string = "Выбрать уровень"
    def callRepairer : string = "Вызвать\nремонтников"
    def undo : string = "Отменить"
    def victory : string = "Победа!"
    def defeat : string = "Вы проиграли!"
    def moneyOver : string = "Закончились деньги"
    def cityBuilt : string = "Построен новый город"
    def tapToContinue : string = if(egInterfaceIdiom == InterfaceIdiom.computer) "Кликните для продолжения" else "Нажмите для продолжения"

    def colorOrange : string = "оранжевый"
    def colorGreen : string = "зеленый"
    def colorPink : string = "розовый"
    def colorPurple : string = "cиреневый"
    def colorGrey : string = "серый"
    def colorBlue : string = "синий"
    def colorMint : string = "мятный"
    def colorRed : string = "красный"
    def colorBeige : string = "бежевый"
    def colorYellow : string = "желтый"

    def helpConnectTwoCities : string =
        "Соедините два города рельсами.
        $if(egPlatform.touch)
         Для этого просто проведите пальцем по экрану.
        $else
         Используйте мышку или
         проведите двумя пальцами по тачпаду.
        $endif"
    def helpNewCity : string =
        "Иногда появляются новые города.
         Подсоединяйте их к своей железной дороге."
    def helpTrain(to : string) : string =
        "Этот поезд направляется в $to город.
         Вы можете понять это по цвету поезда."
    def helpTrainWithSwitches(to : string) : string =
        "Переключите железнодорожные стрелки$if(egPlatform.touch) касанием$else кликом$endif,
         чтобы этот поезд попал в $to город."
    def helpExpressTrain : string =
        "Это очень быстрый экспресс.
         Он не успеет остановиться перед стрелкой.
         Если заблокировать его стрелкой, то он уничтожится.
         Но можно использовать светофоры."

    def helpToMakeZoom : string =
        "Вы можете изменять масштаб с помощью жеста.
         Для прокрутки используйте два пальца.
         Для строительства рельсов один."
    def helpInZoom : string =
        "Прокручивайте одним пальцем.
         Чтобы построить рельсы нажмите кнопку с молотком вверху.
         Нажмите ее еще раз чтобы вернуться в режим прокрутки."
    def helpRules : string =
        "Не позволяйте балансу опускаться ниже нуля.
         Продержитесь с положительным балансом отведенное время
         и выйграйте уровень."
    def helpSporadicDamage : string =
        "Иногда рельсы могут ломаться сами по себе."
    def helpDamage : string =
        "Вызовите специальный поезд с помощью кнопки, чтобы починить рельсы.
         Лучше вызвать из города, который находиться ближе к повреждению."
    def helpRepairer : string =
        "Проведите ремонтный поезд через повреждение
         и отправьте его в любой город."
    def helpCrazy : string =
        "Машинист этого поезда сошел с ума.
         Он не обращает внимания на светофоры или закрытые стрелки.
         Отправьте этот поезд в любой город."
    def linesAdvice : string =
        "Вы можете соединять города несколькими линиями.
         В таком случае встречные поезда смогут разъехаться."

    def supportButton : string = "Написать разработчику"
    def supportEmailText : string =
        "Сообщите о проблеме или напишите ваши идеи.
         Я обязательно вам отвечу и постараюсь исправить возникшие проблемы как можно скорее.
         Спасибо большое, Антон Жердев, Разработчик"
    def rateText : string =
        "Если вам понравилась игра Raildale, не будете ли вы возражать
         против того, чтобы уделить время и оценить ее?

         Если вы столкнулись с проблемой, сообщите мне об этом.
         Я постараюсь исправить ее как можно скорее.

         Спасибо вам за поддержку!
         С наилучшими пожеланиями, Антон Жердев, Разработчик"
    def rateNow : string = "Оценить сейчас"
    def rateProblem : string = "Сообщить о проблеме"
    def rateLater : string = "Напомнить позже"
    def rateClose : string = "Нет, спасибо"

    def result : string = "Счет"
    def best : string = "Ваш лучший"
    def top(score : LocalPlayerScore) : string =
        if(score.rank == 1) "1-й!"
        else if(score.rank == 2) "2-й!"
        else if(score.rank == 3) "3-й!"
        else {
            val p = score.rank.cast<float> / score.maxRank
            if(p <= 5) "Лучшие 5%"
            else if(p <= 10) "Лучшие 10%"
            else if(p <= 20) "Лучшие 20%"
            else if(p <= 30) "Лучшие 30%"
            else if(p <= 50) "Выше среднего"
            else "Ниже среднего"
        }
    def leaderboard : string = "Лучшие результаты"

}

object Str {
    private val locales : [string : Strings] = [("en", EnStrings()), ("ru", RuStrings())].chain.toMap
    val Loc : Strings = locales.opt(Locale.currentLanguageId).getOrElse(EnStrings())
}
