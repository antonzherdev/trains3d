package com.antonzherdev.trains

class PrecipitationView extends Controller {
    static def apply(precipitation : Precipitation) : PrecipitationView = {
        if(precipitation.tp == PrecipitationType.rain) RainView(precipitation.strength)
        else throw "Unknown precipitation type"
    }

    def draw
    def updateWith(delta : float)
}

class RainView(strength : float) extends PrecipitationView {
    val system = RainParticleSystem(strength)
    val view = RainSystemView(system)

    def updateWith(delta : float) {
        system.updateWith(delta)
    }

    def draw {
        view.draw
    }
}

class RainParticleSystem(strength : float) extends ParticleSystem<RainParticle> {
    val particles = 0.to(200*strength).chain.map(RainParticle()).toArray
}

class RainParticle extends Particle {
    private var position : vec2 = vec2.rnd*2
    private val alpha = Float.rnd(0.2, 0.5)

    def writeTo(array : VoidRefArray) : VoidRefArray =
        array.write(RainData, RainData(position, alpha))
            .write(RainData, RainData(position + vec2(0, 0.1), alpha))

    def updateWith(delta : float) {
        position -= vec2(0, delta)
        if(position.y < -1.0) {
            position = vec2(Float.rnd*2 - 1, 1)
//            log("$position")
        }
    }
}

struct RainData(position : vec2, alpha : float4)


class RainSystemView(system : RainParticleSystem) extends ParticleSystemView<RainParticle, RainData>(
    system, RainSystemView.vbDesc, system.particles.count,
    RainShader.instance, nil, BlendFunction.standard)
{
    static val vbDesc = VertexBufferDesc<RainData>(RainData.type, 0, -1, -1, 2*4, -1)

    def vertexCount : uint = 2
    def indexCount : uint = 2
    def index(vertexCount : uint, maxCount : uint) : IndexSource = EmptyIndexSource.lines
}

class RainShaderText extends ShaderTextBuilder {
    def vertex =
        "$vertexHeader
         $ain highp vec2 position;
         $ain lowp float alpha;
         $out lowp float fAlpha;

         void main(void) {
            gl_Position = vec4(position.x, position.y, 0, 1);
            fAlpha = alpha;
         }"
    val fragment =
        "$fragmentHeader
         $in lowp float fAlpha;

         void main(void) {
            $fragColor = vec4(0.7, 0.7, 0.7, fAlpha);
         }"

    def program = ShaderProgram("Rain", vertex, fragment)
}

class RainShader extends Shader<Object>(RainShaderText().program) {
    static val instance = RainShader()
    val positionSlot = attributeFor("position")
    val alphaSlot = attributeFor("alpha")

    def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.position)
        alphaSlot.setFromBufferWith(vbDesc.stride, valuesCount = 1, GL_FLOAT, shift = vbDesc.color)
    }
    def loadUniforms(param : Object) {
    }
}