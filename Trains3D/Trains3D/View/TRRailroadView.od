import EGGL
import EGMesh
import EG
import EGTexture
import EGMaterial
import EG
import EGTypes

import TRRailroad
import TRRailPoint
import TR3D

class TRRailroadView {
    private val railView = TRRailView()
    private val switchView = TRSwitchView()
    private val lightView = TRLightView()
    private val damageView = TRDamageView()

    def draw(railroad : TRRailroad) {
        railroad.rails.for(railView.draw(_))
        railroad.switches.for(switchView.draw(_))
        railroad.lights.for(lightView.draw(_))
        railroad.builder.rail.for(railView.draw(_))
        railroad.damagesPoints.for(damageView.draw(_))
    }
}

class TRRailView {
    val railModel = EGMeshModel([
        (TR3D.railGravel, EG.textureFor("Gravel.png")),
        (TR3D.railTies, EGColor(0.55, 0.45, 0.25, 1)),
        (TR3D.rails, EGStandardMaterial( EGColor(0.45, 0.47, 0.55, 1), EGColor(0.5, 0.5, 0.5, 1), 1))
    ])
    val railTurnModel = EGMeshModel([
        (TR3D.railTurnGravel, EG.textureFor("Gravel.png")),
        (TR3D.railTurnTies, EGColor(0.55, 0.45, 0.25, 1)),
        (TR3D.railsTurn, EGStandardMaterial( EGColor(0.45, 0.47, 0.55, 1), EGColor(0.5, 0.5, 0.5, 1), 1))
    ])
    def draw(rail : TRRail) {
        EG.matrix(
            _.modify(w = w -> w.translate(rail.tile.x, rail.tile.y, 0.001))
             .modify(m = m ->
                if(rail.form == TRRailForm.bottomTop || rail.form == TRRailForm.leftRight) {
                    if(rail.form == TRRailForm.leftRight) m.rotate(90, 0, 1, 0)
                    else m
                } else {
                    if(rail.form == TRRailForm.topRight) m.rotate(270, 0, 1, 0)
                    else if(rail.form == TRRailForm.bottomRight) m.rotate(180, 0, 1, 0)
                    else if(rail.form == TRRailForm.leftBottom) m.rotate(90, 0, 1, 0)
                    else m
                })
        ) {
            if(rail.form == TRRailForm.bottomTop || rail.form == TRRailForm.leftRight) {
                railModel.draw
            } else {
                railTurnModel.draw
            }
        }
    }
}

class TRSwitchView {
    val material = EGStandardMaterial( EGColor(0.07568, 0.61424, 0.07568, 1), EGColor(0.633, 0.727811, 0.633, 1), 1)
    val switchStraightModel = EGMeshModel([
        (TR3D.switchStraight, material)
    ])
    val switchTurnModel = EGMeshModel([
        (TR3D.switchTurn, material)
    ])

    def draw(theSwitch : TRSwitch) {
        val connector = theSwitch.connector
        val rail = theSwitch.activeRail
        val form = rail.form
        EG.matrix(
            _.modify(w = w -> w.translate(theSwitch.tile.x, theSwitch.tile.y, 0.03))
             .modify(m = m -> {
                val m2 = m.rotate(connector.angle, 0, 1, 0).translate(-0.5, 0, 0)
                if(form.start.x + form.end.x != 0) {
                    val otherConnector = if(form.start == connector) form.end else form.start
                    val x = connector.x
                    val y = connector.y
                    val ox = otherConnector.x
                    val oy = otherConnector.y
                    if(x == -1 && oy == -1 || y == 1 && ox == -1 || y == -1 && ox == 1 || x == 1 && oy == 1) {
                        m2.scale(1, 1, -1)
                    } else m2
                } else m2
             })
        ) {
            if(form.start.x + form.end.x == 0) {
                switchStraightModel.draw
            } else {
                switchTurnModel.draw
            }
        }
    }
}

class TRLightView {
    val greenMaterial = EGStandardMaterial( EGColor(0.07568, 0.61424, 0.07568, 1), EGColor(0.633, 0.727811, 0.633, 1), 1)
    val redMaterial = EGStandardMaterial(EGColor(0.61424, 0.04136, 0.04136, 1), EGColor(0.727811, 0.626959, 0.626959, 1), 1)
    def draw(light : TRLight) {
        EG.matrix(
            _.modify(w = w -> w.translate(light.tile.x, light.tile.y, 0))
             .modify(m = m -> m.rotate(light.connector.angle, 0, 1, 0).translate(-0.45, 0, -0.2))
        ) {
            TR3D.light.drawWith(if(light.isGreen) greenMaterial else redMaterial)
        }
    }
}

class TRDamageView {
    val model = EGMeshModel([(TR3D.damage, EGColor(1, 0, 0, 1))])
    def draw(point : TRRailPoint) {
        EG.matrix(
            _.modify(w = w -> w.translate(point.point.x, point.point.y, 0.0))
        ) {
            model.draw
        }
    }
}