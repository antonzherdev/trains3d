import EGGL
import EGMesh
import EG
import EGTexture
import EGMaterial
import EGContext
import EGTypes

import TRRailroad
import TRRailPoint
import TR3D

class TRRailroadView {
    private val railView = TRRailView()
    private val switchView = TRSwitchView()
    private val lightView = TRLightView()
    private val damageView = TRDamageView()

    def draw(railroad : TRRailroad) {
        railroad.rails.for(railView.draw(_))
        railroad.switches.for(switchView.draw(_))
        railroad.lights.for(lightView.draw(_))
        railroad.builder.rail.for(railView.draw(_))
        railroad.damagesPoints.for(damageView.draw(_))
    }
}

class TRRailView {
    val railModel = EGMeshModel([
        (TR3D.railGravel, EG.textureFor("Gravel.png")),
        (TR3D.railTies, EGColor(0.55, 0.45, 0.25, 1)),
        (TR3D.rails, EGStandardMaterial( EGColor(0.45, 0.47, 0.55, 1), EGColor(0.5, 0.5, 0.5, 1)))
    ])
    val railTurnModel = EGMeshModel([
        (TR3D.railTurnGravel, EG.textureFor("Gravel.png")),
        (TR3D.railTurnTies, EGColor(0.55, 0.45, 0.25, 1)),
        (TR3D.railsTurn, EGStandardMaterial( EGColor(0.45, 0.47, 0.55, 1), EGColor(0.5, 0.5, 0.5, 1)))
    ])
    def draw(rail : TRRail) {
        EG.worldMatrix.push
        EG.modelMatrix.push

        EG.worldMatrix.translate(rail.tile.x, rail.tile.y, 0.001)

        if(rail.form == TRRailForm.bottomTop || rail.form == TRRailForm.leftRight) {
            if(rail.form == TRRailForm.leftRight) EG.modelMatrix.rotate(90, 0, 1, 0)
            railModel.draw
        } else {
            if(rail.form == TRRailForm.topRight) EG.modelMatrix.rotate(270, 0, 1, 0)
            else if(rail.form == TRRailForm.bottomRight) EG.modelMatrix.rotate(180, 0, 1, 0)
            else if(rail.form == TRRailForm.leftBottom) EG.modelMatrix.rotate(90, 0, 1, 0)
            railTurnModel.draw
        }
        EG.modelMatrix.pop
        EG.worldMatrix.pop
    }
}

class TRSwitchView {
    val material = EGStandardMaterial( EGColor(0.07568, 0.61424, 0.07568, 1), EGColor(0.633, 0.727811, 0.633, 1))
    val switchStraightModel = EGMeshModel([
        (TR3D.switchStraight, material)
    ])
    val switchTurnModel = EGMeshModel([
        (TR3D.switchTurn, material)
    ])

    def draw(theSwitch : TRSwitch) {
        val connector = theSwitch.connector
        EG.worldMatrix.push
        EG.modelMatrix.push

        EG.worldMatrix.translate(theSwitch.tile.x, theSwitch.tile.y, 0.03)
        EG.modelMatrix.rotate(connector.angle, 0, 1, 0)

        val rail = theSwitch.activeRail
        val form = rail.form

        EGMaterial.emerald.set
        EG.modelMatrix.translate(-0.5, 0, 0)
        if(form.start.x + form.end.x == 0) {
            switchStraightModel.draw
        } else {
            val otherConnector = if(form.start == connector) form.end else form.start
            val x = connector.x
            val y = connector.y
            val ox = otherConnector.x
            val oy = otherConnector.y
            if(x == -1 && oy == -1 || y == 1 && ox == -1 || y == -1 && ox == 1 || x == 1 && oy == 1) {
                EG.modelMatrix.scale(1, 1, -1)
            }
            switchTurnModel.draw
        }

        EG.modelMatrix.pop
        EG.worldMatrix.pop
    }
}

class TRLightView {
    def draw(light : TRLight) {
        glPushMatrix
        egTranslate(light.tile.x, light.tile.y, 0)
        egRotate(light.connector.angle, 0, 0, 1)

        egTranslate(-0.45, 0.2, 0)
        if(light.isGreen) EGMaterial.emerald.set else EGMaterial.ruby.set
        glutSolidCube(0.1)

        glPopMatrix
    }
}

class TRDamageView {
    def draw(point : TRRailPoint) {
        glPushMatrix
        egTranslate(point.point.x, point.point.y, 0.01)
        egColor4(1.0, 0.0, 0.0, 0.5)
        egNormal3(0, 0, 1)
        egRect(-0.1, -0.1, 0.1, 0.1)
        glPopMatrix
    }
}