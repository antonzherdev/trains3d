package com.antonzherdev.trains

final class RainView(weather : Weather, strength : float) extends PrecipitationView {
    val system = RainParticleSystem(weather, strength)
    val view = RainSystemView(system)

    override def updateWith(delta : float) {
        system.updateWith(delta)
    }

    override def complete {
        view.prepare
    }

    override def draw {
        view.draw
    }
}

final class RainParticleSystem(weather : Weather, strength : float)
    extends FixedParticleSystem<RainParticle, RainData>(RainParticle.type, 2000*strength)
{
    override def vertexCount : uint = 2

    def init {
        forParticles {p ->
            p.position = vec2.rnd*2
            p.alpha = Float.rnd(0.1, 0.4)*Director.current.scale
        }
    }

    protected override def doUpdateWith(delta : float) {
        val w = weather.wind
        val vec = vec2((w.x + w.y)*0.1, -(w.y - w.x).abs*0.3 - 0.05)
        forParticles {p ->
            p.position += vec*delta*10
            if(p.position.y < -1.0) {
                p.position = vec2(Float.rnd*2 - 1, Float.rnd(1.5, 1.1))
            }
            if(p.position.x > 1.0) p.position = vec2(-1.0, p.position.y)
            if(p.position.x < -1.0) p.position = vec2(1.0, p.position.y)
        }
    }

    protected override def doWriteTo(array : Pointer<RainData>) {
        val w = weather.wind
        val vec = vec2((w.x + w.y)*0.1, -(w.y - w.x).abs*0.3 - 0.05)
        writeParticles(array) {aa, p ->
            var a = aa
            a.position = p.position
            a.alpha = p.alpha
            a++
            a.position = p.position + vec
            a.alpha = p.alpha
            a + 1
        }
    }
}

struct RainParticle(var position : vec2, var alpha : float4)

struct RainData(var position : vec2, var alpha : float4)


class RainSystemView(system : RainParticleSystem) extends ParticleSystemView<RainParticle, RainData, void>(
    system, RainSystemView.vbDesc,
    RainShader.instance, nil, BlendFunction.standard)
{
    static val vbDesc = VertexBufferDesc<RainData>(RainData.type, 0, -1, -1, 2*4, -1)

    override def indexCount : uint = 2
    override def createIndexSource : IndexSource = EmptyIndexSource.lines
}

class RainShaderText extends ShaderTextBuilder {
    def vertex =
        "$vertexHeader
         $ain highp vec2 position;
         $ain lowp float alpha;
         $out lowp float fAlpha;

         void main(void) {
            gl_Position = vec4(position.x, position.y, 0, 1);
            fAlpha = alpha;
         }"
    val fragment =
        "$fragmentHeader
         $in lowp float fAlpha;

         void main(void) {
            $fragColor = vec4(0.7, 0.7, 0.7, fAlpha);
         }"

    def program = ShaderProgram("Rain", vertex, fragment)
}

class RainShader extends Shader<void>(RainShaderText().program) {
    static val instance = RainShader()
    val positionSlot = attributeFor("position")
    val alphaSlot = attributeFor("alpha")

    override def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.position)
        alphaSlot.setFromBufferWith(vbDesc.stride, valuesCount = 1, GL_FLOAT, shift = vbDesc.color)
    }
    override def loadUniforms(param : void) {
    }
}