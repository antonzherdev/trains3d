package com.antonzherdev.trains

final class SnowView(weather : Weather, strength : float) extends PrecipitationView {
    val system = SnowParticleSystem(weather, strength)
    val view = SnowSystemView(system)

    override def updateWith(delta : float) {
        system.updateWith(delta)
    }

    override def complete {
        view.prepare
    }

    override def draw {
        view.draw
    }
}

final class SnowParticleSystem(weather : Weather, strength : float) extends ParticleSystem<SnowParticle> {
    override val particles = 0.to(2000*strength).chain.map(SnowParticle(weather)).toArray
}

class SnowParticle(weather : Weather) extends Particle {
    private var position : vec2 = vec2.rnd*2
    private val size = Float.rnd(0.004, 0.01)
    private var windVar = vec2(Float.rnd(0.8, 1.2), Float.rnd(0.8, 1.2))
    private var urge = vec2(Float.rnd(-0.03, 0.03), Float.rnd(-0.02, 0.02))
    static val textureQuadrant : Quadrant = Quad.identity.quadrant
    private val uv = textureQuadrant.rndQuad

    override def writeTo(array : VoidRefArray) : VoidRefArray = {
        array.write(SnowData, SnowData(position, uv.p0))
             .write(SnowData, SnowData(vec2(position.x + size, position.y), uv.p1))
             .write(SnowData, SnowData(vec2(position.x + size, position.y + size), uv.p2))
             .write(SnowData, SnowData(vec2(position.x, position.y + size), uv.p3))
    }

    def vec : vec2 = {
        val w = weather.wind
        vec2((w.x + w.y)*0.3, -(w.y - w.x).abs*0.3 - 0.05)*windVar + urge
    }

    override def updateWith(delta : float) {
        position += vec*delta
        if(position.y < -1.0) {
            position = vec2(Float.rnd*2 - 1, Float.rnd(1.5, 1.1))
//            log("$position")
        }
        if(position.x > 1.0) position = vec2(-1.0, position.y)
        if(position.x < -1.0) position = vec2(1.0, position.y)
    }
}

struct SnowData(position : vec2, uv : vec2)


class SnowSystemView(system : SnowParticleSystem) extends ParticleSystemView<SnowParticle, SnowData>(
    system, SnowSystemView.vbDesc, system.particles.count,
    SnowShader.instance, compressedTextureFor("Snowflake", TextureFilter.mipmapNearest), BlendFunction.premultiplied)
    with IBOParticleSystemViewQuad
{
    static val vbDesc = VertexBufferDesc<SnowData>(SnowData.type, 0, 2*4, -1, -1, -1)
}

class SnowShaderText extends ShaderTextBuilder {
    def vertex =
        "$vertexHeader
         $ain highp vec2 position;
         $ain mediump vec2 uv;
         $out mediump vec2 fuv;

         void main(void) {
            gl_Position = vec4(position.x, position.y, 0, 1);
            fuv = uv;
         }"
    val fragment =
        "$fragmentHeader
         $in mediump vec2 fuv;
         uniform lowp sampler2D txt;

         void main(void) {
            $fragColor = $texture2D\(txt, fuv);
         }"

    def program = ShaderProgram("Snow", vertex, fragment)
}

class SnowShader extends Shader<Texture>(SnowShaderText().program) {
    static val instance = SnowShader()
    val positionSlot = attributeFor("position")
    val uvSlot = attributeFor("uv")

    override def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.position)
        uvSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.uv)
    }
    override def loadUniforms(param : Texture) {
        context.bindTexture(param)
    }
}