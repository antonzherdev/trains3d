package com.antonzherdev.trains

final class SnowView(weather : Weather, strength : float) extends PrecipitationView {
    val system = SnowParticleSystem(weather, strength)
    val view = SnowSystemView(system)

    override def updateWith(delta : float) {
        system.updateWith(delta)
    }

    override def complete {
        view.prepare
    }

    override def draw {
        view.draw
    }
}

final class SnowParticleSystem(weather : Weather, strength : float)
    extends FixedParticleSystem2<SnowParticle, SnowData>(SnowParticle.type, 2000*strength)
    with BillboardParticleSystem2
{
    private val textureQuadrant : Quadrant = Quad.identity.quadrant
    def init {
        forParticles {p ->
            p.position = vec2.rnd*2
            p.size = Float4.rnd(0.004, 0.01)
            p.windVar = vec2(Float.rnd(0.8, 1.2), Float.rnd(0.8, 1.2))
            p.urge = vec2(Float.rnd(-0.03, 0.03), Float.rnd(-0.02, 0.02))
            p.uv = textureQuadrant.rndQuad
        }
    }

    protected override def doUpdateWith(delta : float) {
        forParticles {p ->
            val w = weather.wind
            val vec = vec2((w.x + w.y)*0.3, -(w.y - w.x).abs*0.3 - 0.05)*p.windVar + p.urge
            p.position += vec*delta
            if(p.position.y < -1.0) {
                p.position = vec2(Float.rnd*2 - 1, Float.rnd(1.5, 1.1))
            }
            if(p.position.x > 1.0) p.position = vec2(-1.0, p.position.y)
            if(p.position.x < -1.0) p.position = vec2(1.0, p.position.y)
        }
    }

    protected override def doWriteTo(array : Pointer<SnowData>) {
        writeParticles(array) {aa, p ->
            var a = aa
            a.position = p.position
            a.uv = p.uv.p0
            a++
            a.position = vec2(p.position.x + p.size, p.position.y)
            a.uv = p.uv.p1
            a++
            a.position = vec2(p.position.x + p.size, p.position.y + p.size)
            a.uv = p.uv.p2
            a++
            a.position = vec2(p.position.x, p.position.y + p.size)
            a.uv = p.uv.p3
            a + 1
        }
    }
}

struct SnowParticle(var position : vec2, var size : float4, var windVar : vec2, var urge : vec2, var uv : Quad)

struct SnowData(var position : vec2, var uv : vec2)

class SnowSystemView(system : SnowParticleSystem) extends ParticleSystemView2<SnowParticle, SnowData, Texture>(
    system, SnowSystemView.vbDesc,
    SnowShader.instance, compressedTextureFor("Snowflake", TextureFilter.mipmapNearest), BlendFunction.premultiplied)
{
    static val vbDesc = VertexBufferDesc<SnowData>(SnowData.type, 0, 2*4, -1, -1, -1)
}

class SnowShaderText extends ShaderTextBuilder {
    def vertex =
        "$vertexHeader
         $ain highp vec2 position;
         $ain mediump vec2 uv;
         $out mediump vec2 fuv;

         void main(void) {
            gl_Position = vec4(position.x, position.y, 0, 1);
            fuv = uv;
         }"
    val fragment =
        "$fragmentHeader
         $in mediump vec2 fuv;
         uniform lowp sampler2D txt;

         void main(void) {
            $fragColor = $texture2D\(txt, fuv);
         }"

    def program = ShaderProgram("Snow", vertex, fragment)
}

class SnowShader extends Shader<Texture>(SnowShaderText().program) {
    static val instance = SnowShader()
    val positionSlot = attributeFor("position")
    val uvSlot = attributeFor("uv")

    override def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.position)
        uvSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.uv)
    }
    override def loadUniforms(param : Texture) {
        context.bindTexture(param)
    }
}