package com.antonzherdev.trains

class LevelPauseMenuView(level : Level) extends LayerView with InputProcessor {
    val name = "LevelPauseMenu"

    private val menuView = PauseMenuView(level)
    private val helpView = HelpView(level)
    private val winView = WinMenu(level)
    private val looseView = LooseMenu(level)
    private val rateView = RateMenu()

    var camera : Camera

    def reshapeWith(viewport : Rect) {
        camera = Camera2D(vec2(viewport.width, viewport.height))
        menuView.reshapeWith(viewport)
        helpView.reshapeWith(viewport)
        winView.reshapeWith(viewport)
        looseView.reshapeWith(viewport)
        rateView.reshapeWith(viewport)
    }

    def view : PauseView =
        if(level.rate) rateView
        else if(!level.help.isEmpty) helpView
        else if(level.result.isEmpty) menuView
        else if(level.result.get.win) winView
        else looseView

    def draw {
        if(!Director.current.isPaused) return nil

        BlendFunction.standard { context.depthTest.disabled {
            D2D.drawSprite(material = vec4(0, 0, 0, 0.5), at = vec3(0, 0, 0), Rect(vec2(0, 0), context.viewport.size))
            view.draw
        }}

    }

    def updateWith(delta : float) {
        if(isActive) Director.current.pause
    }

    def isActive : bool = Director.current.isPaused || !level.help.isEmpty || !level.result.isEmpty

    def isProcessorActive = Director.current.isPaused
    def recognizers : Recognizers = Recognizer(Tap(), view.tap(_))
}

class PauseView {
    def reshapeWith(viewport : Rect)
    def draw
    def tap(event : Event) : bool
}

class MenuView extends PauseView {
    private var _font : Font
    def font = _font
    def button(text : string, onClick : () -> void) : Button = {
        weak val weakSelf = self
        Button(drawBack *|* Button.drawText(weakSelf.font, vec4(0, 0, 0, 1), text), onClick)
    }

    def drawBack : Rect -> void = (rect : Rect) ->
        D2D.drawSprite(vec4(1, 1, 1, 0.9), vec3(0, 0, 0), rect)

    def buttons : [Button]

    def tap(event : Event) : bool = buttons.exists(_.tap(event))

    def draw {
        val s = context.scale
        val width = columnWidth*s
        val delta = buttonHeight*s
        val height = delta*buttons.count

        size = vec2(width, height + headerHeight*s)
        position = Rect(0, 0, size).moveToCenterFor(context.viewport.size).p
        var p = position + vec2(0, height - delta)

        buttons.chain.for{button ->
            button.rect = Rect(p, vec2(width, delta - 0.2))
            p = p - vec2(0, delta)
        }

        buttons.for(_.draw)
        val hh = headerHeight * context.scale
        if(hh > 0) {
            drawHeader(Rect(
                position + vec2(0, size.y - hh),
                vec2(size.x, hh)))
        }
    }

    def headerHeight : float = 0.0
    def buttonHeight : int = 50

    private var position : vec2
    private var size : vec2
    def reshapeWith(viewport : Rect) {
        _font = fontWith(name = "lucida_grande", size = 24)

        reshape
    }
    def reshape{}

    def drawHeader(rect : Rect) {}
    def columnWidth : int = 400
}

class PauseMenuView(level : Level) extends MenuView  {
    private val resumeButton = button(Loc.resumeGame, Director.current.resume)
    private val restartButton = button(Loc.restart(level), GameDirector.instance.restartLevel)
    private val chooseLevelButton = button(Loc.chooseLevel, GameDirector.instance.chooseLevel)
    private val leaderboardButton = button(Loc.leaderboard, GameDirector.instance.showLeaderboard(level))
    private val supportButton = button(Loc.supportButton, GameDirector.instance.showSupport(changeLevel = false))
    val buttons = [resumeButton, restartButton, chooseLevelButton, leaderboardButton, supportButton]
}

class WinMenu(level : Level) extends MenuView {
    private val nextButton = button(Loc.goToNext(level), GameDirector.instance.nextLevel)
    private val leaderboardButton = button(Loc.leaderboard, GameDirector.instance.showLeaderboard(level))
    private val restartButton = button(Loc.replay(level), GameDirector.instance.restartLevel)
    private val chooseLevelButton = button(Loc.chooseLevel, GameDirector.instance.chooseLevel)
    def buttons =
        (if(level.number < 16) [nextButton] else []) +
        [leaderboardButton, restartButton, chooseLevelButton]


    def headerHeight = 100.0
    def drawHeader(rect : Rect) {
        D2D.drawSprite(if(_score.isDefined) LevelChooseMenu.rankColor(_score.get) else vec4(0.85, 0.9, 0.75, 1.0), at = vec3(0, 0, 0), rect)
        headerText.position = rect.p(0.5, 0.75)
        headerText.draw

        resultText.text = "$(Loc.result): $(Loc.format(level.score.score))"
        resultText.position = rect.p(0.03, 0.4)
        resultText.draw


        var bs : int = 0
        if(_score.isDefined) {
            val s = _score.get
            bs = s.value

            topText.position = rect.p(0.97, 0.2)
            topText.text = Loc.top(s)
            topText.draw
        } else {
            bs = GameDirector.instance.bestScore(level.number)
        }

        bestScoreText.position = rect.p(0.97, 0.4)
        bestScoreText.text = "$(Loc.best): $(Loc.format(bs))"
        bestScoreText.draw
    }

    var _score : LocalPlayerScore? = nil
    private val obs = GameDirector.playerScoreRetrieveNotification.observe{ _, score ->
        _score = score
        Director.current.redraw
    }

    private val headerText = Text(nil, Loc.victory, vec3(0, 0, 0), TextAlignment(0, 0), vec4(0, 0, 0, 1))
    private val resultText = Text(nil, "", vec3(0, 0, 0), TextAlignment(-1, 0), vec4(0, 0, 0, 1))
    private val bestScoreText = Text(nil, "", vec3(0, 0, 0), TextAlignment(1, 0), vec4(0, 0, 0, 1))
    private val topText = Text(nil, "", vec3(0, 0, 0), TextAlignment(1, 0), vec4(0, 0, 0, 1))
    def reshape {
        headerText.font = fontWith(name = "lucida_grande", size = 36)
        val f = fontWith(name = "lucida_grande", size = 18)
        resultText.font = f
        bestScoreText.font = f
        topText.font = f
    }
}

class RateMenu extends MenuView {
    private val rateButton = button(Loc.rateNow, GameDirector.instance.showRate)
    private val supportButton = button(Loc.rateProblem, GameDirector.instance.showSupport(changeLevel = true))
    private val laterButton = button(Loc.rateLater, GameDirector.instance.rateLater)
    private val closeButton = button(Loc.rateClose, GameDirector.instance.rateClose)
    def buttons =[rateButton, supportButton, closeButton, laterButton]

    def headerHeight = 140.0
    def columnWidth : int = 520
    def buttonHeight : int = 40
    private val headerText : Text = Text(nil, Loc.rateText, vec3(0, 0, 0), TextAlignment(-1, 0), vec4(0, 0, 0, 1))
    def drawHeader(rect : Rect) {
        D2D.drawSprite(vec4(0.85, 1.0, 0.75, 0.9), at = vec3(0, 0, 0), rect)
        headerText.position = rect.p + rect.size*vec2(0.05, 0.5)
        headerText.draw
    }

    def reshape {
        headerText.font = fontWith(name = "lucida_grande", size = 14)
    }
}

class LooseMenu(level : Level) extends MenuView {
    private val restartButton = button(Loc.replay(level)) {
        GameDirector.instance.restartLevel
        Director.current.resume
    }
    private val supportButton = button(Loc.supportButton, GameDirector.instance.showSupport(changeLevel = false))
    private val chooseLevelButton = button(Loc.chooseLevel, GameDirector.instance.chooseLevel)
    val buttons = [restartButton, chooseLevelButton, supportButton]
    def headerHeight = 75.0
    def drawHeader(rect : Rect) {
        D2D.drawSprite(vec4(1.0, 0.85, 0.75, 1.0), at = vec3(0, 0, 0), rect)
        headerText.position = rect.p + rect.size*vec2(0.05, 0.7)
        headerText.draw
        detailsText.position = rect.p + rect.size*vec2(0.5, 0.35)
        detailsText.draw
    }

    private val headerText : Text = Text(nil, Loc.defeat, vec3(0, 0, 0), TextAlignment(-1, 0), vec4(0, 0, 0, 1))
    private val detailsText : Text = Text(nil, Loc.moneyOver, vec3(0, 0, 0), TextAlignment(0, 0), vec4(0, 0, 0, 1))
    def reshape {
        headerText.font = fontWith(name = "lucida_grande", size = 36)
        detailsText.font = fontWith(name = "lucida_grande", size = 16)
    }
}


class HelpView(level : Level) extends PauseView {
    private val helpText : Text = Text(nil, "", vec3(0, 0, 0), TextAlignment(-1, 1), vec4(0, 0, 0, 1))
    private val tapText : Text = Text(nil, "($(Loc.tapToContinue))", vec3(0, 0, 0), TextAlignment(0, -1), vec4(0, 0, 0, 1))
    def reshapeWith(viewport : Rect) {
        helpText.font = fontWith(name = "lucida_grande", size = 16)
        tapText.font = fontWith(name = "lucida_grande", size = 12)
    }

    private val helpBackSprite = Sprite(vec4(1, 1, 1, 0.8), Rect(0, 0, 0, 0))
    var _allowClose = false
    def draw {
        val help = level.help.get
        helpText.text = help.text
        val size = helpText.measureC*vec2(1.1, 1.4) + vec2(0, tapText.measureC.y)
        val rect = size.rectInCenterWith(context.viewport.size)

        helpBackSprite.set(rect = rect)
        helpBackSprite.draw
        helpText.position = rect.center + rect.size * vec2(-0.45, 0.45)
        tapText.position = rect.center + rect.size * vec2(0, -0.4)
        helpText.draw
        tapText.draw

        weak val ws = self
        Action.delay(1) {
            ws._allowClose = true
        }
    }

    def tap(event : Event) : bool = {
        if(_allowClose) {
            level.clearHelp
            Director.current.resume
        }
        true
    }
}