package com.antonzherdev.trains

class LevelPauseMenuView(level : Level) extends LayerView with InputProcessor {
    val name = "LevelPauseMenu"

    private lazy val menuView = PauseMenuView(level)
    private lazy val helpView = HelpView(level)
    private lazy val winView = WinMenu(level)
    private lazy val looseView = LooseMenu(level)
    private lazy val rateView = RateMenu()
    private lazy val slowMotionShopView = SlowMotionShopMenu()

    private val _camera : React<Camera2D> = context.scaledViewSize.map(Camera2D(_))
    def camera : Camera = _camera.value

    def view : PauseView =
        if(level.slowMotionShop) slowMotionShopView
        else if(level.rate) rateView
        else if(!level.help.value.isEmpty) helpView
        else if(level.result.value.isEmpty) menuView
        else if(level.result.value.get.win) winView
        else looseView

    def draw {
        if(!Director.current.isPaused) return nil

        BlendFunction.standard { context.depthTest.disabled {
            D2D.drawSprite(material = vec4(0, 0, 0, 0.5), at = vec3(0, 0, 0), Rect(vec2(0, 0), context.viewport.size))
            view.draw
        }}

    }

    def updateWith(delta : float) {
        if(isActive) Director.current.pause
    }

    def isActive : bool = Director.current.isPaused || !level.help.value.isEmpty || !level.result.value.isEmpty

    def isProcessorActive = Director.current.isPaused
    def recognizers : Recognizers = Recognizer(Tap(), view.tap(_))
}

class PauseView {
    def reshapeWith(viewport : Rect)
    def draw
    def tap(event : Event) : bool
}

class MenuView extends PauseView {
    val font = mainFontWith(size = 24).beReadyFor(Loc.menuButtonsCharacterSet)

    def buttons : [(string, () -> void)]
    private val _buttons : [Button]
    val headerRect : React<Rect>
    def init {
        val btns = buttons
        val delta = buttonHeight
        val height = delta*btns.count
        size = vec2(columnWidth, height + headerHeight)
        var pos = context.scaledViewSize.map{vps ->
            vec3(Rect(0, 0, size).moveToCenterFor(vps).p + vec2(0, height - delta))
        }
        headerRect = pos.map{p -> Rect(p.x, p.y + delta, columnWidth, headerHeight)}
        _buttons = buttons.chain.map{ t ->
            val b = Button(
                visible = true,
                font, text = t.a, textColor = vec4(0, 0, 0, 1),
                backgroundMaterial = ColorSource(vec4(1, 1, 1, 0.9)),
                position = pos,
                rect = nil)
            b.tap.observe(t.b())
            pos = pos.map(_ - vec3(0, buttonHeight, 0))
            b
        }.toArray
    }

    def tap(event : Event) : bool = _buttons.exists(_.tap(event))

    def draw {
        _buttons.for(_.draw)
        if(headerHeight > 0) {
            headerSprite.get.draw
            drawHeader
        }
    }

    def headerHeight : float = 0.0
    def buttonHeight : int = 50

    private var position : vec2
    private var size : vec2
    def reshapeWith(viewport : Rect) {
        reshape
    }
    def reshape{}

    def drawHeader {}
    def columnWidth : int = 400

    def headerMaterial : React<ColorSource> = nil
    private val headerSprite : Sprite? = if(headerHeight > 0) Sprite(
        visible = true,
        material = headerMaterial,
        position = vec3(0, 0, 0),
        rect = headerRect.map(_*Director.current.scale)
    ) else nil

}

class PauseMenuView(level : Level) extends MenuView  {
    def buttons : [(string, () -> void)] = [
        (Loc.resumeGame, () -> Director.current.resume),
        (Loc.restart(level.number), () -> GameDirector.instance.restartLevel),
        (Loc.chooseLevel, () -> GameDirector.instance.chooseLevel)]
    + if(GameCenter.isSupported) [(Loc.leaderboard, () -> GameDirector.instance.showLeaderboard(level))] else []
    + [(Loc.supportButton, () -> GameDirector.instance.showSupport(changeLevel = false))]
    + (if(ShareDialog.isSupported) [(Loc.shareButton, () -> GameDirector.instance.share)] else [])
    + [(Loc.buyButton, () -> GameDirector.instance.openShop)]

    private val soundSprite = Sprite(
        material = scaledTextureFor("Pause", TextureFormat.RGBA4).region(if(GameDirector.instance.soundEnabled) 64 else 96, 0, 32, 32).colorSource,
        position = context.scaledViewSize.map(vec3(_.x - 32, 40, 0))
    )
    private val ssObs = soundSprite.tap.observe { _ ->
        GameDirector.instance.soundEnabled = !GameDirector.instance.soundEnabled
        Director.current.redraw
    }
    def draw {
        BlendFunction.premultiplied {
            soundSprite.draw
        }
    }

    def buttonHeight : int = if(egPlatform.isPhone) 45 else 50
    def tap(event : Event) : bool = super.tap(event) || soundSprite.tap(event)
}
