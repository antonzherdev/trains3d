package com.antonzherdev.trains

class LevelView(level : Level) extends LayerView with InputProcessor {
    val name = "Level"
    private val cityView : CityView
    private val railroadView : RailroadView
    private val trainView : TrainView
    private val treeView : TreeView
    private val callRepairerView : CallRepairerView
    private val precipitationView : PrecipitationView?

    private val obs1 = CameraIsoMove.cameraChangedNotification.observe{move, _ ->
        reshapeWith(context.viewport)
        level.scale = move.scale
        Director.reshapeNotification.post(Director.current, Director.current.viewSize)
    }

    val environment = Environment(ambientColor = vec4(0.7, 0.7, 0.7, 1), lights = [
        DirectLight(
            color = vec4(vec3(0.2, 0.2, 0.2) + vec3(0.4, 0.4, 0.4)*level.rules.weatherRules.sunny, 1.0),
            direction = vec3(-0.15, 0.35, -0.3).normalize,
            hasShadows = level.rules.weatherRules.sunny > 0.0 && GameDirector.instance.showShadows,
            shadowsProjectionMatrix = {
                var m : mat4
                if(level.map.size == vec2i(7, 5)) m = mat4.ortho(-2.5, 8.8, -2.9, 4.6, -3.0, 5.5)
                else if(level.map.size == vec2i(5, 5)) m = mat4.ortho(-2.4, 7.3, -2.4, 3.9, -2, 5.5)
                else if(level.map.size == vec2i(5, 3)) m = mat4.ortho(-2, 5.9, -2, 2.7, -2, 4.0)
                else throw "Define shadow matrix for this map size"
                m
            }
        )])

    def init {
        context.clear
        context.environment = environment
        trainView = TrainView(level)
        treeView = TreeView(level.forest)
        railroadView = RailroadView(level)
        cityView = CityView(level)
        callRepairerView = CallRepairerView(level)
        precipitationView = level.rules.weatherRules.precipitation.map(PrecipitationView(level.weather, _))
    }

    def prepare {
        treeView.prepare
        railroadView.prepare
    }

    def draw {
        railroadView.drawBackground
        cityView.draw
        trainView.draw
        if(!context.renderTarget.isShadow) railroadView.drawLightGlows
        treeView.draw

        if(!context.renderTarget.isShadow) {
            trainView.drawSmoke
            cityView.drawExpected
            railroadView.drawForeground
            callRepairerView.draw
            precipitationView.for(_.draw)
        }
    }

    private var move = CameraIsoMove(CameraIso(level.map.size, reserve = CameraReserve(0, 0, top = 0.1, bottom = 0.0),
        viewportRatio = 2), 1.0, 2.0, 1, 2)
    def camera : Camera = move.camera

    def updateWith(delta : float) {
        move.panEnabled = !level.railroad.builder.buildMode
        railroadView.updateWith(delta)
        level.trains.for(trainView.updateWith(delta, _))
        level.dyingTrains.for(trainView.updateWith(delta, _))
        precipitationView.for(_.updateWith(delta))
    }

    private val railroadBuilderProcessor = RailroadBuilderProcessor(level.railroad.builder)
    private val switchProcessor = SwitchProcessor(level)

    def recognizers : Recognizers =
        move.recognizers +
        callRepairerView.recognizers +
        railroadView.recognizers +
        switchProcessor.recognizers +
        railroadBuilderProcessor.recognizers

    def reshapeWith(viewport : Rect) {
        val r = viewport.size.x/viewport.size.y
        move.viewportRatio = r
        if(egPlatform.isPad) {
            if(r < 4.0/3 + 0.01) move.reserve = CameraReserve(0, 0, top = 0.5, bottom = 0.1)
            else move.reserve = CameraReserve(0, 0, top = 0.2, bottom = 0.1)
        } else if(egPlatform.isPhone) {
            if(egPlatform.isIOSLess("7") < 0) move.reserve = CameraReserve(0, 0, top = 0.3, bottom = 0.1)
            else move.reserve = CameraReserve(0, 0, top = 0.2, bottom = 0.1)
        }
        matrix.value = camera.matrixModel
        callRepairerView.reshape
        railroadView.reshape
    }
}

class PrecipitationView extends Updatable {
    static def apply(weather : Weather, precipitation : Precipitation) : PrecipitationView = {
        if(precipitation.tp == PrecipitationType.rain) RainView(weather, precipitation.strength)
        else if(precipitation.tp == PrecipitationType.snow) SnowView(weather, precipitation.strength)
        else throw "Unknown precipitation type"
    }

    def draw
    def updateWith(delta : float)
}