package com.antonzherdev.trains

import com.antonzherdev.eg._

class LevelView(level : Level) extends LayerView with InputProcessor {
    private val cityView = CityView()
    private val railroadView = RailroadView(level.railroad)
    private val trainView = TrainView(level)
    private val treeView = TreeView(level.forest)
    private val callRepairerView = CallRepairerView(level)

    val environment = Environment(ambientColor = vec4(0.7, 0.7, 0.7, 1), lights = [
        DirectLight(color = vec4(0.6, 0.6, 0.6, 1), direction = vec3(-0.15, 0.35, -0.3).normalize
            ,shadowsProjectionMatrix = mat4.ortho(-2, 7, -3, 4, -3, 10)
        )])

    def draw {
        val shadows = context.renderTarget.is<ShadowRenderTarget>
        if(!shadows) railroadView.drawBackground
        if(!shadows) level.cities.for(city -> cityView.draw(city))

        trainView.draw

        railroadView.drawForeground
        treeView.draw

        if(!shadows) {
            trainView.drawSmoke
            callRepairerView.draw
        }
    }

    val camera : Camera = CameraIso(level.map.size, zReserve = 0.3, vec2(0, 0))
    def cameraWith(viewport : Rect) : Camera = camera

    def updateWith(delta : float) {
        level.trains.for(trainView.updateWith(delta, _))
        level.dyingTrains.for(trainView.updateWith(delta, _))
    }

    private val railroadBuilderProcessor = RailroadBuilderProcessor(level.railroad.builder)
    private val switchProcessor = SwitchProcessor(level)

    def process(event : Event) : bool =
        callRepairerView.process(event)
        || switchProcessor.process(event)
        || railroadBuilderProcessor.process(event)
}