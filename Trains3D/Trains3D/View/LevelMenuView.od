package com.antonzherdev.trains

import com.antonzherdev.eg.Text._
import com.antonzherdev.eg.Progress._

class LevelMenuView(level : Level) extends LayerView with InputProcessor {
    val name = "LevelMenu"

    private var pauseSprite = Sprite()
    private var hammerSprite = Sprite()
    private val backSprite = Sprite(vec4(1, 1, 1, 0.7))

    val notificationProgress = gap(0.7, 1) >> vec4(0, 0, 0, 1 - _)

    private var width = 0
    var camera : Camera
    def reshapeWith(viewport : Rect) {
        camera = Camera2D(vec2(viewport.width/context.scale, 32))
        val font = fontWith(name = "lucida_grande", 24)
        val notificationFont = fontWith(name = "lucida_grande", if(egInterfaceIdiom == InterfaceIdiom.phone) 14 else 16)
        notificationText.font = font
        width = viewport.size.x/context.scale

        scoreText.font = font
        notificationText.font = notificationFont
        notificationTextPos = vec3(width/2, 10, 0)
        levelText.for{ _ ->
            _.font = font
            _.position = vec3(width/2, 10, 0)
        }

        backSprite.rect = Rect(0, 0, width, 32)

        pauseSprite.position = vec2(width - 32, 0)
        val t = scaledTextureFor("Pause", "png", GL_NEAREST, GL_NEAREST)
        pauseSprite.material = ColorSource(t.region(0, 0, 0.5, 0.5))
        pauseSprite.adjustSize

        hammerSprite.position = vec2(0, 0)
        hammerSprite.material = ColorSource(vec4(0.1, 0.1, 0.1, 1), t.region(0.5, 0, 0.5, 0.5))
        hammerSprite.adjustSize
    }
    private var notificationTextPos = vec3(0, 0, 0)
    private val scoreText = Text(nil, "", vec3(10, 8, 0), TextAlignment.baseline(-1), vec4(0, 0, 0, 1))
    private val notificationText = Text(nil, "", vec3(0, 0, 0), TextAlignment.baseline(0), vec4(0, 0, 0, 1))
    var levelText : Text? = Text(nil, "", vec3(0, 0, 0), TextAlignment.baseline(0), vec4(0, 0, 0, 1))

    def draw {
        context.depthTest.disabled { BlendFunction.standard {
            backSprite.draw

            if(level.scale > 1.0) {
                hammerSprite.material = hammerSprite.material.set(color =
                    if(level.railroad.builder.buildMode) vec4(0.45, 0.9, 0.6, 1)
                    else vec4(0.223,  0.223, 0.223, 1)
                )
                hammerSprite.draw
                scoreText.position = vec3(32, 8, 0)
                notificationText.position = notificationTextPos + vec3(32, 0, 0)
            } else {
                scoreText.position = vec3(10, 8, 0)
                notificationText.position = notificationTextPos
            }
            scoreText.text = format(level.score.score)
            scoreText.draw

            pauseSprite.draw
            levelAnimation.for { t ->
                levelText.for { _ ->
                    _.text = Loc.startLevel(level.number)
                    _.color = notificationProgress(t/3.0)
                    _.draw
                }
            }
            notificationAnimation.for{t ->
                notificationText.color = notificationProgress(t)
                notificationText.draw
            }
        }}
    }

    def format(score : int) : string = {
        Loc.format(score)
    }

    private var notificationAnimation = Counter()
    private var levelAnimation = Finisher(Counter(5), (levelText = nil))

    def updateWith(delta : float) {
        if(levelAnimation.isRunning) levelAnimation.updateWith(delta)
        else if(notificationAnimation.isRunning) notificationAnimation.updateWith(
            if(level.notifications.isEmpty) delta
            else 5*delta)
        else if(!level.notifications.isEmpty) {
            notificationText.text = level.notifications.take.get
            notificationAnimation = Counter(2)
        }
    }

    def recognizers : Recognizers = Recognizer(Tap()) {event ->
        val p = event.location
        if(pauseSprite.contains(p)) {
            if(Director.current.isPaused) Director.current.resume else Director.current.pause
        } else if(level.scale > 1.0 && hammerSprite.contains(p)) {
            level.railroad.builder.buildMode = !level.railroad.builder.buildMode
        }
        false
    }
}

