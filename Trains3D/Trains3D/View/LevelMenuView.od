package com.antonzherdev.trains

import com.antonzherdev.eg.Text._
import com.antonzherdev.eg.Progress._

class LevelMenuView(level : Level) extends LayerView with InputProcessor with TapProcessor {
    static val backgroundColor = vec4(0.85, 0.9, 0.75, 1.0)
    val name = "LevelMenu"

    val pauseSprite = Sprite()

    val notificationProgress = gap(0.7, 1) >> vec4(0, 0, 0, 1 - _)
    val pauseReg =  Rect(0, 0, 46.0/64, 46.0/64)

    private var width = 0
    var camera : Camera
    def reshapeWith(viewport : Rect) {
        camera = Camera2D(vec2(viewport.width/context.scale, 46))
        val font = fontWith(name = "lucida_grande", 24)
        val notificationFont = fontWith(name = "lucida_grande", 16)
        notificationText.font = font
        width = viewport.size.x/context.scale

        scoreText.font = font
        notificationText.font = notificationFont
        notificationText.position = vec3(width/2, 15, 0)
        levelText.for{ _ ->
            _.font = font
            _.position = vec3(width/2, 14, 0)
        }

        pauseSprite.position = vec2(width - 46, 0)
        pauseSprite.material = ColorSource(TextureRegion(scaledTextureFor("Pause", "png", GL_NEAREST, GL_NEAREST), pauseReg))
        pauseSprite.adjustSize
    }
    private val scoreText = Text(nil, "", vec3(10, 14, 0), TextAlignment.baseline(-1), vec4(0, 0, 0, 1))
    private val notificationText = Text(nil, "", vec3(0, 0, 0), TextAlignment.baseline(0), vec4(0, 0, 0, 1))
    var levelText : Text? = Text(nil, "", vec3(0, 0, 0), TextAlignment.baseline(0), vec4(0, 0, 0, 1))

    def draw {
        context.depthTest.disabled { BlendFunction.standard {
            D2D.drawSprite(material = vec4(1, 1, 1, 0.7), at = vec3(0, 0, 0), Rect(0, 0, width, 46))

            scoreText.text = format(level.score.score)
            scoreText.draw

            pauseSprite.draw
            levelAnimation.for { t ->
                levelText.for { _ ->
                    _.text = Loc.startLevel(level.number)
                    _.color = notificationProgress(t/3.0)
                    _.draw
                }
            }
            notificationAnimation.for{t ->
                notificationText.color = notificationProgress(t)
                notificationText.draw
            }
        }}
    }

    def format(score : int) : string = {
        var i = 0
        val a = "'".head
        val str = "$score".chain.reverse.flatMap{s ->
            i++
            if(i == 3) List(s, List(a))
            else Option(s)
        }.reverse.charsToString

        "\$$str"
    }

    private var notificationAnimation = Counter()
    private var levelAnimation = Finisher(Counter(5), (levelText = nil))

    def updateWith(delta : float) {
        if(levelAnimation.isRunning) levelAnimation.updateWith(delta)
        else if(notificationAnimation.isRunning) notificationAnimation.updateWith(delta)
        else if(!level.notifications.isEmpty) {
            notificationText.text = level.notifications.take.get
            notificationAnimation = Counter(2)
        }
    }

    def process(event : Event) : bool = {
        event.tap(self)
    }

    def tap(event : Event) : bool = {
        val p = event.location
        if(pauseSprite.contains(p)) {
            if(Director.current.isPaused) Director.current.resume else Director.current.pause
        }
        false
    }
}

