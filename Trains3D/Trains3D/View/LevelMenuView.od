package com.antonzherdev.trains

import com.antonzherdev.eg.Text._
import com.antonzherdev.eg.Progress._

class LevelMenuView(level : Level) extends LayerView with InputProcessor {
    val name = "LevelMenu"

    private var pauseSprite = Sprite()
    private var slowSprite = Sprite()
    private var hammerSprite = Sprite()
    private val slowMotionCountText = Text(nil, "", vec3(0, 0, 0), TextAlignment(1, 0), color)

    val notificationProgress = gap(0.7, 1) >> vec4(0.95 - _)

    var camera : Camera
    def reshapeWith(viewport : Rect) {
        val s = viewport.size/context.scale
        camera = Camera2D(s)
        val font = mainFontWith(24)
        font.beReadyFor("\$0123456789'")
        font.beReadyFor(Loc.level(1))
        val notificationFont = mainFontWith(if(egPlatform.isPhone) (if(egPlatform.screenSizeRatio > 4.0/3.0) 14 else 12) else 18)
        notificationFont.beReadyFor(Loc.notificationsCharSet)
        notificationText.font = font

        val sh = TextShadow(color = vec4(0.05, 0.05, 0.05, 0.5), shift = vec2(1, -1))
        scoreText.font = font
        scoreText.shadow = sh
        notificationText.font = notificationFont
        notificationText.shadow = sh
        notificationText.position = vec3(s.x/2, s.y - 22, 0)
        scoreText.shadow = sh
        levelText.for{ _ ->
            _.font = font
            _.shadow = sh
            _.position = vec3(s.x/2, s.y - 24, 0)
        }

        val ph = egPlatform.isPhone
        pauseSprite.position = vec2(s.x - if(ph) 32 else 36, 4)
        val t = scaledTextureFor("Pause", "png")
        pauseSprite.material = ColorSource(if(ph) t.region(0, 0, 32, 32) else t.region(96, 32, 32, 32))
        pauseSprite.adjustSize

        slowSprite.position = vec2(s.x - if(ph) 36 else 40, s.y - 34)
        slowSprite.material = ColorSource(t.region(64, 32, 32, 32))
        slowSprite.adjustSize

        slowMotionCountText.font = mainFontWith(24)
        slowMotionCountText.font.beReadyFor("0123456789")
        slowMotionCountText.position = slowSprite.position + vec2(1, 18)
        slowMotionCountText.shadow = sh

        hammerSprite.position = vec2(0, s.y - 32)
        hammerSprite.material = ColorSource(vec4(0.1, 0.1, 0.1, 1), t.region(32, 0, 32, 32))
        hammerSprite.adjustSize
    }
    def color : vec4 = vec4(0.95)
    val scoreText = Text(nil, "", vec3(10, 40, 0), TextAlignment.baseline(-1), color)
    private val notificationText = Text(nil, "", vec3(0, 0, 0), TextAlignment.baseline(if(egPlatform.isPhone) -1 else 0), color)
    var levelText : Text? = Text(nil, "", vec3(0, 0, 0), TextAlignment.baseline(0), color)

    def draw {
        context.depthTest.disabled { BlendFunction.premultiplied {
            val s = context.viewport.size/context.scale
            if(level.scale > 1.0) {
                hammerSprite.material = hammerSprite.material.set(color =
                    if(level.railroad.builder.buildMode) vec4(0.45, 0.9, 0.6, 0.95)
                    else color
                )
                hammerSprite.draw
                scoreText.position = vec3(32, s.y - 24, 0)
            } else {
                scoreText.position = vec3(10, s.y - 24, 0)
            }
            scoreText.text = format(level.score.score)
            scoreText.draw

            pauseSprite.draw
            levelAnimation.for { t ->
                levelText.for { _ ->
                    _.text = Loc.startLevel(level.number)
                    _.color = notificationProgress(t/3.0)
                    _.draw
                }
            }
            notificationAnimation.for{t ->
                if(egPlatform.isPhone) {
                    notificationText.position = vec3(scoreX(scoreText.text) + scoreText.position.x + 5, s.y - 22, 0)
                }
                notificationText.color = notificationProgress(t)
                notificationText.draw
            }

            if(level.slowMotionCounter.isRunning) {
                BlendFunction.standard {
                    D2D.drawCircle(backColor = vec4(0.6, 0.6, 0.6, 0.95), strokeColor = vec4(0, 0, 0, 0.5),
                        at = slowSprite.position + slowSprite.size/2, radius = 22, relative = vec2(0, 0),
                        segmentColor = vec4(0.95),
                        start = math.M_PI_2, end = math.M_PI_2 - 2*level.slowMotionCounter.time*math.M_PI
                )
                }
            } else {
                val slowMotionsCount = GameDirector.instance.slowMotionsCount
                if(slowMotionsCount > 0) {
                    slowMotionCountText.text = "$(GameDirector.instance.slowMotionsCount)"
                    slowMotionCountText.draw
                }
                slowSprite.draw
            }
        }}
    }

    private val scoreX = Cache<string, float4>(scoreText.measureC.x)

    def format(score : int) : string = {
        Loc.format(score)
    }

    private var notificationAnimation = Counter()
    private var levelAnimation = Finisher(Counter(5), (levelText = nil))

    def updateWith(delta : float) {
        if(levelAnimation.isRunning) levelAnimation.updateWith(delta)
        else if(notificationAnimation.isRunning) notificationAnimation.updateWith(
            if(level.notifications.isEmpty) delta
            else 5*delta)
        else if(!level.notifications.isEmpty) {
            notificationText.text = level.notifications.take.get
            notificationAnimation = Counter(2)
        }
    }

    def recognizers : Recognizers = Recognizer(Tap()) {event ->
        val p = event.location
        if(pauseSprite.contains(p)) {
            if(Director.current.isPaused) Director.current.resume else Director.current.pause
        } else if(slowSprite.contains(p) && level.slowMotionCounter.isStopped) {
            GameDirector.instance.runSlowMotion(level)
        }else if(level.scale > 1.0 && hammerSprite.contains(p)) {
            level.railroad.builder.buildMode = !level.railroad.builder.buildMode
        }
        false
    }
}

