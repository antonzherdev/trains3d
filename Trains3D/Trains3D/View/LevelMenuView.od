package com.antonzherdev.trains

import com.antonzherdev.eg.Text._
import com.antonzherdev.eg.Progress._

class LevelMenuView(level : Level) extends LayerView with InputProcessor with MouseProcessor {
    val name = "LevelMenu"

    def cameraWith(viewport : Rect) : Camera = res(viewport.height).cameraWith(viewport)

    lazy val res1x = LevelMenuViewRes1x()
    lazy val res2x = LevelMenuViewRes2x()
    def res : LevelMenuViewRes = if(context.viewport.size.y > 47) res2x else res1x
    def res(height : float4) : LevelMenuViewRes = if(height > 47) res2x else res1x
    def font : Font = res.font

    val notificationProgress = gap(0.7, 1) >> vec4(0, 0, 0, 1 - _)
    def draw {
        context.depthTest.disabled { BlendFunction.premultiplied {
            val w = context.viewport.size.x/res.pixelsInPoint
            res.font.draw(text = format(level.score.score), color = vec4(0, 0, 0, 1), at = vec3(10, 14, 0), TextAlignment.baseline(-1))
    //        val seconds : int = level.schedule.time
    //        res.font.draw(text = seconds, color = vec4(0, 0, 0, 1), at = vec2(w - 56, 10), TextAlignment.baseline(1))

            val pauseSprite = res.pauseSprite
            pauseSprite.position = vec2(w - 46, 0)
            pauseSprite.draw


            notificationAnimation.for{t ->
                res.notificationFont.draw(text = notificationText, notificationProgress(t), at = vec3(w/2, 15, 0), TextAlignment.baseline(0))
            }
        }}
    }

    def format(score : int) : string = {
        var i = 0
        val a = "'".head
        val str = "$score".chain.reverse.flatMap{s ->
            i++
            if(i == 3) List(s, List(a))
            else Option(s)
        }.reverse.charsToString

        "\$$str"
    }

    private var notificationText = ""
    private var notificationAnimation = Counter()

    def updateWith(delta : float) {
        if(notificationAnimation.isRun) notificationAnimation.updateWith(delta)
        else if(!level.notifications.isEmpty) {
            notificationText = level.notifications.take.get
            notificationAnimation = Counter(1)
        }
    }

    def process(event : Event) : bool = {
        event.leftMouse(self)
    }

    def mouseUp(event : Event) : bool = {
        val p = event.location
        if(res(event.camera.get.viewport.height).pauseSprite.contains(p)) {
            if(director.isPaused) director.resume else director.pause
        }
        false
    }
}

class LevelMenuViewRes {
    def font : Font
    def notificationFont : Font
    def pauseSprite : Sprite
    def pixelsInPoint : float4

    val cameraCache = Cache<Rect, Camera>(viewport -> Camera2D(vec2(viewport.width/pixelsInPoint, 46)))
    def cameraWith(viewport : Rect) : Camera = cameraCache(viewport)
}

class LevelMenuViewRes1x extends LevelMenuViewRes {
    val font = fontWith(name = "lucida_grande_24")
    val notificationFont = fontWith(name = "lucida_grande_16")
    val pixelsInPoint : float4 = 1
    val pauseSprite : Sprite = Sprite(nearestTextureFor("Pause.png"), Rect(0, 0, 46, 46), 1)
}

class LevelMenuViewRes2x extends LevelMenuViewRes {
    val font = fontWith(name = "lucida_grande_48")
    val notificationFont = fontWith(name = "lucida_grande_32")
    val pixelsInPoint : float4 = 2
    val pauseSprite : Sprite = Sprite(nearestTextureFor("Pause_2x.png"), Rect(0, 0, 92, 92), 2)
}