package core.chain

class SortBuilder<A>(chain : Chain<A>) {
    private val functions = MutableArray<(A, A) -> int>()

    def asc<B extends ODComparable<B>>(by : A -> B) : SortBuilder<A> = {
        functions.add((x : A, y : A) -> by(x).compare(by(y)))
        self
    }
    def desc<B extends ODComparable<B>>(by : A -> B) : SortBuilder<A> = {
        functions.add((x : A, y : A) -> by(y).compare(by(x)))
        self
    }
    def and(f : (A, A) -> int) : SortBuilder<A> = {
        functions.add(f)
        self
    }
    def endSort : Chain<A> = {
        chain.sort((x, y) -> {
            var ret = 0
            val i = functions.iterator
            while(ret == 0 && i.hasNext) {
                val f = i.next
                ret = f(x, y)
            }
            ret
        })
    }
}