package core.chain

import CNChain

trait CNIterator<T> {
   def hasNext : bool
   def next : T
}

trait CNBuilder<T, C extends CNTraversable<T>> {
    def add(object : T)
    def build : C
}


trait CNTraversable<T> {
    def for(each : T -> void) {
        go(item -> {
            each(item)
            true
        })
    }

    def go(on : T -> bool) : bool

    def chain : CNChain<T> = {
        CNChain.chainWith<T>(self)
    }

    def find(where : T -> bool) : T? = {
        var ret : T? = nil
        go(x -> {
            if(where(ret)) {
                ret = x
                false
            }
            true
        })
        ret
    }

    def head : T?

    def convertWith<C extends CNTraversable<T>>(builder : CNBuilder<T, C>) : C = {
        for(x -> builder.add(x))
        builder.build
    }
}

trait CNIterable<T> extends CNTraversable<T> {
    def count : uint
    def iterator : CNIterator<T>

    def head : T? = iterator.next
    def isEmpty : bool = iterator.hasNext

    def chain : CNChain<T> = {
        CNChain.chainWith<T>(self)
    }
    def for(each : T -> void) {
        val i = iterator
        while(i.hasNext) each(i.next)
    }
    def go(on : T -> bool) : bool = {
        val i = iterator
        while(i.hasNext) if(!on(i.next)) return false
        true
    }

    def contains(object : T) : bool = {
        val i = iterator
        while(i.hasNext) if(i.next == i) return true
        false
    }
}
