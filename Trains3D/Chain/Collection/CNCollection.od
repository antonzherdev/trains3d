package core.chain

import CNChain

trait CNIterator<T> {
   def next : T?
}

trait CNTraversable<T> {
    def for(each : T -> void) {
        go(item -> {
            each(item)
            true
        })
    }

    def go(on : T -> bool) : bool

    def chain : CNChain<T> = {
        CNChain.chainWith<T>(self)
    }

    def head : T?
}

class CNIterable<T> extends CNTraversable<T> {
    def count : uint
    def iterator : CNIterator<T>

    def head : T? = iterator.next
    def isEmpty : bool = iterator.next.isEmpty

    def chain : CNChain<T> = {
        CNChain.chainWith<T>(self)
    }
    def for(each : T -> void) {
        val i = iterator
        while(true) {
            val object = i.next
            if(object.isEmpty) break
            each(object)
        }
    }
    def go(on : T -> bool) : bool = {
        val i = iterator
        while(true) {
            val object = i.next
            if(object.isEmpty) return true
            if(!on(object)) return false
        }
        false
    }
}
