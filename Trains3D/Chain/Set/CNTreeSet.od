package core.chain

class CNMutableTreeSet<T>(map : CNMutableTreeMap<T, ODObject>) extends CNMutableSet<T> {
    static def newWith<T>(comparator : (T, T) -> int) : CNMutableTreeSet<T> = {
        CNMutableTreeSet<T>(CNMutableTreeMap<T, ODObject>(comparator))
    }

    static def apply<T> = CNMutableTreeSet<T>(CNMutableTreeMap<T, ODObject>())
    private static val obj = NSObject()

    def between(a : T, b : T) : [T]

    def add(item : T) {
        map.set(value = obj, forKey = item)
    }

    def remove(item : T) : bool = map.removeFor(key = item).isDefined


    def higherThan(item : T) : T? = map.higherKeyThan(item)
    def lowerThan(item : T) : T? = map.lowerKeyThan(item)

    def count : uint = map.count
    def iterator = map.keys.iterator
    def iteratorHigherThan(item : T) = map.keys.iteratorHigherThan(item)

    def head : T? = map.firstKey
    def last : T? = map.lastKey
    def contains(item : T) : bool = map.contains(key = item)

    def clear {
        map.clear
    }

    def addAll(objects : CNTraversable<T>) {
        objects.for(add(item = _))
    }

    def reorder : CNMutableTreeSet<T> = {
        val ret = CNMutableTreeSet<T>(CNMutableTreeMap<T, ODObject>(map.comparator))
        ret.addAll(self)
        ret
    }
}