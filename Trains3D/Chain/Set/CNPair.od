import CNCollection
import CNSet

class CNPair<T>(a : T, b : T) extends CNSet<T> {
    static def newWith<T>(a : T, b : T) : CNPair<T> =
        if(a < b) CNPair<T>(a, b)
        else CNPair<T>(b, a)
    def contains(object : T) : bool = a == object || b == object
    def count : uint = 2
    def iterator : CNIterator<T> = CNPairIterator<T>(self)
    def head : T? = a
}

class CNPairIterator<T>(pair : CNPair<T>) extends CNIterator<T> {
    private var state : int = 0
    def hasNext : bool = state < 2
    def next : T = {
        state++
        if(state == 1) pair.a
        else pair.b
    }
}