package core.chain

import CNTreeMap
import CNCollection
import CNChain

class CNTreeSet<T>(map : CNTreeMap<T, ODObject>) extends CNSet<T> {
    static def newWith<T>(comparator : (T, T) -> int) : CNTreeSet<T> = {
        CNTreeSet<T>(CNTreeMap<T, ODObject>(comparator))
    }

    static def new<T> = CNTreeSet<T>(CNTreeMap.new<T, ODObject>)

    def add(object : T) {
        map.set(object = nil, forKey = object)
    }

    def remove(object : T) : bool = map.removeObjectFor(key = object).isDefined


    def higherThan(object : T) : T? = map.higherKeyThan(object)
    def lowerThan(object : T) : T? = map.lowerKeyThan(object)

    def count : uint = map.count
    def iterator = map.keys.iterator

    def head : T? = map.firstKey
    def last : T? = map.lastKey
    def contains(object : T) : bool = map.contains(key = object)
}