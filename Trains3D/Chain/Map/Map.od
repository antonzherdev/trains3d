package core.chain

trait Map<K, V> extends Iterable<(K, V)> {
    def apply(key : K) : V?
    def keys : Iterable<K>
    def values : Iterable<V>
    def contains(key : K) : bool = apply(key).isDefined
}

trait MutableMap<K, V> extends Map<K, V> with MutableIterable<(K, V)> {
    def set(value : V, forKey : K)
    def removeFor(key : K) : V?
    def objectFor(key: K, orUpdateWith: () -> V) : V = {
        val o = apply(key)
        if(o.isDefined) o.get
        else {
            val init : V = orUpdateWith
            set(init, forKey = key)
            init
        }
    }
    def modify(by : V? -> V?, forKey : K) : V? = {
        val newObject = by(apply(forKey))
        if(newObject.isEmpty) removeFor(forKey)
        else set(newObject.get, forKey)
        newObject
    }

    def add(item : (K, V)) {
        set(item.a, item.b)
    }
    def remove(item : (K, V)) {
        removeFor(item.a)
    }
}

class MapDefault<K, V>(defaultFunc : K -> V, map : MutableMap<K, V>) extends MutableIterable<(K, V)> {
    def count : uint = map.count
    def iterator : Iterator<(K, V)> = map.iterator
    def apply(key : K) : V = map.objectFor(key, orUpdateWith = defaultFunc(key))
    def keys : Iterable<K> = map.keys
    def values : Iterable<V> = map.values
    def contains(key : K) : bool = map.contains(key)
    def set(value : V, forKey : K) {
        map.set(value, forKey)
    }
    def modify(by : V -> V, forKey : K) : V {
        val value = by(apply(forKey))
        map.set(value, forKey)
        value
    }
    def add(item : (K, V)) {
        map.add(item)
    }
    def remove(item : (K, V)) {
        map.remove(item)
    }
}
