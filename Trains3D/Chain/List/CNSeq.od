package core.chain

import core.ODMath._

trait CNSeq<T> extends CNIterable<T> {
    def apply(index : uint) : T? = {
        val i = iterator
        var n = index
        while(i.hasNext) {
            if(n == 0) return i.next
            i.next
            n--
        }
        nil
    }

    def randomItem : T? =
        if(isEmpty) nil
        else apply(randomMax(count - 1))

    def toSet : CNSet<T> = convertWith(CNHashSetBuilder<T>())
    def arrayByAdding(item : T) : CNSeq<T> = {
        val builder = CNArrayBuilder<T>()
        builder.addAll(self)
        builder.add(item)
        builder.build
    }

    def arrayByRemoving(item : T) : CNSeq<T> = {
        chain.filter(_ != item).toArray
    }

    def isEqualTo(seq : CNSeq<T>) : bool = {
        if(self.count != seq.count) return false
        val ia = self.iterator
        val ib = seq.iterator
        while(ia.hasNext && ib.hasNext) {
            if(ia.next != ib.next) return false
        }
        true
    }
}

trait CNMutableSeq<T> extends CNSeq<T> with CNMutableIterable<T>

stub class NSArray<T> extends CNSeq<T> {}
stub class NSMutableArray<T> extends CNMutableSeq<T> {}

type CNArray<T> = NSArray<T>
type CNMutableArray<T> = NSMutableArray<T>

class CNArrayBuilder<T> extends CNBuilder<T, CNArray<T>> {
    val array = NSMutableArray<T>()

    def add(item : T) {
        array.add(item)
        self
    }

    def build : NSArray<T> = array
}