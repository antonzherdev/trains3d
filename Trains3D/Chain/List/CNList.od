package core.chain

import CNCollection
import CNSeq
import CNOption
import CNChain
import "NSArray+CNChain.h"

class CNList<T> extends CNSeq<T> {
    static def apply<T> : CNList<T> = CNEmptyList.instance
    static def apply<T>(object : T) : CNList<T> = CNFilledList<T>(object, CNEmptyList.instance)
    static def apply<T>(object : T, tail : CNList<T>) : CNList<T>  = CNFilledList<T>(object, tail)

    def iterator : CNIterator<T> = {
        val i = CNListIterator.new<T>
        i.list = self
        i
    }
    def tail : CNList<T>
}

class CNFilledList<T>(item : T, tail : CNList<T>) extends CNList<T> {
    def head : T? = item

    def isEmpty = false

}

class CNEmptyList<T> extends CNList<T> {
    def head : T? = nil
    def tail : CNList<T> = self
    def isEmpty = true

    static val instance = CNEmptyList.new<int>
}

class CNListIterator<T> extends CNIterator<T> {
    var list : CNList<T>
    def hasNext = list.isEmpty

    def next : T = {
        val ret = list.head.get
        list = list.tail
        ret
    }
}