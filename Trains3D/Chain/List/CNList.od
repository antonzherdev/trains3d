package core.chain

import CNCollection
import CNChain
import CNSet
import "cnTypes.h"
import "NSMutableArray+CNChain.h"

trait CNList<T> extends CNIterable<T> {
    def at(index : uint) : T?

    def randomItem : T? =
        if(isEmpty) nil
        else at(randomWith(count - 1))

    def toSet : CNSet<T> = convertWith(NSSetBuilder.new<T>)
}

stub class NSArray<T> extends CNList<T> {}
stub class NSMutableArray<T> extends NSArray<T> {
    def add(object : T)
}

class NSArrayBuilder<T> extends CNBuilder<T, NSArray<T>> {
    val array = NSMutableArray.new<T>

    def add(object : T) {
        array.add(object)
    }

    def build : NSArray<T> = array
}