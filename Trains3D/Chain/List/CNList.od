package core.chain

import CNCollection
import CNChain
import CNSet
import "cnTypes.h"
import "NSMutableArray+CNChain.h"

trait CNList<T> extends CNIterable<T> {
    def apply(index : uint) : T?

    def randomItem : T? =
        if(isEmpty) nil
        else apply(randomWith(count - 1))

    def toSet : CNSet<T> = convertWith(CNHashSetBuilder.new<T>)
    def arrayByAdding(object : T) : CNList<T> = {
        val builder = CNArrayBuilder.new<int>
        builder.addAll(self)
        builder.add(object)
        builder.build
    }

    def arrayByRemoving(object : T) : CNList<T> = {
        chain.filter(_ != object).toArray
    }
}

trait CNMutableList<T> extends CNList<T> {
    def add(object : T)
    def remove(object : T)
}

stub class NSArray<T> extends CNList<T> {
}
stub class NSMutableArray<T> extends CNMutableList<T> {}

type CNArray<T> = NSArray<T>
type CNMutableArray<T> = NSMutableArray<T>

class CNArrayBuilder<T> extends CNBuilder<T, CNArray<T>> {
    val array = NSMutableArray.new<T>

    def add(object : T) {
        array.add(object)
        self
    }

    def build : NSArray<T> = array
}