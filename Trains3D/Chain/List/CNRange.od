package core.chain

import CNCollection
import CNList
import "CNOption.h"
import "cnTypes.h"
import CNChain

class CNRange(start : int, end : int, step : int) extends CNList<int> {
    val count : uint = (end - start)/step
    def apply(index : uint) : int? =
        if(index >= count) nil
        else start + step*index
    def iterator : CNIterator<int> = CNRangeIterator(start, end, step)

    def set(step : int) : CNRange = CNRange(start, end, step)
    def isEmpty : bool =
        if(step > 0) start > end
        else if(step < 0) start < end
        else false
}

class CNRangeIterator(start : int, end : int, step : int) extends CNIterator<int> {
    private var i = start
    def hasNext = (step > 0 && i <= end) || (step < 0 && i >= end)
    def next : int = {
        val ret = i
        i += step
        ret
    }
}