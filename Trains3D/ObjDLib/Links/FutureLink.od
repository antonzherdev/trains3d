package core.chain

class FutureLink<T> extends ChainLink<Future<T>, T> {
    private val _promise = Promise<void>()
    private var _stopped : bool = false
    private val _lock : Lock = Lock()
    private var _counter : AtomicInt = AtomicInt()
    private var _ended : bool = false

    def future : Future<void> = _promise

    def build(yield : Yield<T>) : Yield<Future<T>> = {
        Yield.decorate<Future<T>>(
            base = yield,
            yield = fut -> {
                if(!_stopped) {
                    _counter.incrementAndGet
//                    log("a")
                    fut.onComplete {tr ->
//                        log("tr")
                        if(!_stopped) {
                            if(tr.isFailure) {
                                _stopped = true
//                                log("FL fail")
                                _promise.failure(tr)
                            } else if(!_stopped) {
                                _lock.lock
                                val y = yield.yield(tr.get)
                                _lock.unlock

                                if(y != 0) {
                                    _stopped = true
//                                    log("FL suc1")
                                    if(_promise.success(nil)) {
                                        yield.endYieldWith(1)
                                    }
                                } else {
                                    val r = _counter.decrementAndGet
                                    Memory.memoryBarrier
                                    if(_ended) {
                                        if(r == 0) {
//                                            log("FL suc2")
                                            if(_promise.success(nil)) {
                                                yield.endYieldWith(0)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(_stopped) 1 else 0
            },
            end = res -> {
                var ret = res
                _ended = true
                Memory.memoryBarrier
                if(_counter.intValue == 0) {
//                    log("FL suc3")
                    if(_promise.success(nil)) {
                        if(yield.endYieldWith(res) != 0) ret = 1
                    }
                }
                ret
            }
        )
    }
}