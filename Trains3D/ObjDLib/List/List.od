package core.chain

class ImList<T> extends ImSeq<T> {
    static def apply<T> : ImList<T> = EmptyList.instance.cast<ImList<T>>
    static def apply<T>(item : T) : ImList<T> = FilledList<T>(item, EmptyList.instance)
    static def apply<T>(item : T, tail : ImList<T>) : ImList<T>  = FilledList<T>(item, tail)

    def iterator : Iterator<T> = {
        val i = ListIterator<T>()
        i.list = self
        i
    }
    def tail : ImList<T>
    def filter(f : T -> bool) : ImList<T>
    def reverse : ImList<T>
}

class FilledList<T>(head : T, tail : ImList<T>) extends ImList<T> {
    def headOpt : T? = head
    val count : uint = tail.count + 1
    def isEmpty = false
    def filter(f : T -> bool) : ImList<T> =
        if(f(head)) FilledList<T>(head, tail.filter(f))
        else tail.filter(f)

    def reverse : ImList<T> = {
        var ret = FilledList<T>(head, EmptyList.instance)
        var list = tail
        while(!list.isEmpty) {
            ret = FilledList<T>(list.cast<FilledList<T>>.head, ret)
            list = list.tail
        }
        ret
    }

    def for(each : T -> void) {
        var list : FilledList<T> = self
        while(true) {
            each(list.head)
            val tail = list.tail
            if(tail.isEmpty) return nil
            list = tail.cast<FilledList<T>>
        }
    }
}

class EmptyList<T> extends ImList<T> {
    def count : uint = 0
    def head : T = throw "List is empty"
    def headOpt : T? = nil
    def tail : ImList<T> = self
    def isEmpty = true

    static val instance = EmptyList<any>()
    def filter(f : T -> bool) : ImList<T> = self
    def reverse : ImList<T> = self
    def for(each : T -> void) {
    }
}

class ListIterator<T> extends Iterator<T> {
    var list : ImList<T>
    def hasNext = !list.isEmpty

    def next : T = {
        val ret = list.head
        list = list.tail
        ret
    }
}

class ImListBuilder<T> extends Builder<T, ImList<T>> {
    private var list = ImList<T>()
    def append(item : T) {
        list = ImList(item, list)
    }
    def build : ImList<T> = list.reverse
}