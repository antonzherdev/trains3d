package core.chain

abstract class TreeMap<K, V>(comparator : (K, K) -> int) extends ImMap<K, V> {
    override def apply(key : K) : V = entryFor(key).get.value
    override def opt(key : K) : V? = entryFor(key)?.value
    def root : TreeMapEntry<K, V>?
    override def isEmpty : bool = root == nil


    def entryFor(key : K) : TreeMapEntry<K, V>? = {
        var p = root
        while (p != nil) {
            val cmp = comparator(key, p.get.key)
            if (cmp < 0) p = p.get.left
            else if (cmp > 0) p = p.get.right
            else break
        }
        p
    }

    override def keys : TreeMapKeySet<K>
    override val values : TreeMapValues<V> = TreeMapValues<V>(self)

    override def iterator : Iterator<(K, V)> = TreeMapIterator<K, V>(self, firstEntry)
    def iteratorHigherThan(key : K) = TreeMapIterator<K, V>(self, higherEntryThan(key))

    static val BLACK = 0
    static val RED = 1

    def firstEntry : TreeMapEntry<K, V>? = {
        var p = root
        if (p != nil) while (p.get.left != nil) p = p.get.left
        p
    }

    def firstKey : K? = firstEntry?.key
    def lastKey : K? = lastEntry?.key

    def lowerKeyThan(key : K) : K? = lowerEntryThan(key)?.key
    def higherKeyThan(key : K) : K? = higherEntryThan(key)?.key

    private def lowerEntryThan(key : K) : TreeMapEntry<K, V>? = {
        var p = root
        while (p != nil) {
            val cmp = comparator(key, p.get.key)
            if (cmp > 0) {
                if (p.get.right != nil) p = p.get.right
                else return p
            } else {
                if (p.get.left != nil) {
                    p = p.get.left
                } else {
                    var parent = p.get.parent
                    var ch = p
                    while (parent != nil && ch == parent.get.left) {
                        ch = parent
                        parent = parent.get.parent
                    }
                    return parent
                }
            }
        }
        nil
    }

    private def higherEntryThan(key : K) : TreeMapEntry<K, V>? = {
        var p = root
        while (p != nil) {
            val cmp = comparator(key, p.get.key)
            if (cmp < 0) {
                if (p.get.left != nil) p = p.get.left
                else return p
            } else {
                if (p.get.right != nil) {
                    p = p.get.right
                } else {
                    var parent = p.get.parent
                    var ch = p
                    while (parent != nil && ch == parent.get.right) {
                        ch = parent
                        parent = parent.get.parent
                    }
                    return parent
                }
            }
        }
        nil
    }

    private def lastEntry : TreeMapEntry<K, V>? = {
        var p = root
        if (p != nil) while (p.get.right != nil) p = p.get.right
        p
    }

}

class ImTreeMap<K, V>(comparator : (K, K) -> int, override root : TreeMapEntry<K, V>?, override count : uint)
    extends TreeMap<K, V>(comparator)
{
    override def isEmpty : bool = root == nil

    override val keys : TreeMapKeySet<K> = ImTreeMapKeySet<K>(self)
    override def mCopy : MTreeMap<K, V> = {
        val m = MTreeMap<K, V>(comparator)
        m.assign(self)
        m
    }
}

class TreeMapBuilder<K, V>(comparator : (K, K) -> int) extends Builder<(K, V), TreeMap<K, V>> {
    static def apply<K extends Comparable<K>, V> : TreeMapBuilder<K, V> = TreeMapBuilder<K, V>((a : K, b : K) -> a.compare(b))
    private val map = MTreeMap<K, V>(comparator)
    override def append(item : (K, V)) {
        map.append(item)
    }
    override def build : TreeMap<K, V> = map
}


class MTreeMap<K, V>(comparator : (K, K) -> int) extends TreeMap<K, V>(comparator) with MMap<K, V> {
    static def apply<K extends Comparable<K>, V> = MTreeMap<K, V>((a : K, b : K) -> a.compare(b))

    override def imCopy : ImTreeMap<K, V>  = ImTreeMap(comparator, _root?.copy(parent = nil), _size)
    override def im : ImTreeMap<K, V> = ImTreeMap(comparator, _root, _size)
    override def assign(imMap : ImMap<K, V>) {
        if(imMap.is<ImTreeMap<K, V>>) {
            val m = imMap.cast<ImTreeMap<K, V>>
            _root = m.root?.copy(parent = nil)
            _size = m.count
        } else {
            clear
            imMap.for(append(_))
        }
    }

    private var _root : TreeMapEntry<K, V>? = nil
    override def root : TreeMapEntry<K, V>? = _root
    private var _size : uint = 0
    override def count = _size
    override def clear {
        _size = 0
        _root = nil
    }
    override def mutableIterator : MIterator<(K, V)> = MTreeMapIterator<K, V>(self, firstEntry)
    override val keys : MTreeMapKeySet<K> = MTreeMapKeySet<K>(self)

    override def set(key : K, value : V)  {
        val _comparator = comparator
        var t = _root
        if (t == nil) {
            _root = TreeMapEntry<K,V>(key, value, parent = nil)
            _size = 1
        } else {
            var cmp : int = 0
            var parent : TreeMapEntry<K, V>? = nil

            do {
                parent = t
                cmp = _comparator(key, t.get.key)
                if (cmp < 0) t = t.get.left
                else if (cmp > 0) t = t.get.right
                else {
                    t.get.value = value
                    return nil
                }
            } while (t != nil)

            val e =  TreeMapEntry<K,V>(key, value, parent)
            if (cmp < 0) parent.get.left = e
            else parent.get.right = e
            fixAfterInsertion(e)
            _size++
        }
    }

    override def removeFor(key : K) : V? = entryFor(key).for(delete(_))

    private def delete(entry : TreeMapEntry<K, V>) : V = {
        var p = entry
        _size--

        // If strictly internal, copy successor's element to p and then make p
        // point to successor.
        if (p.left != nil && p.right != nil) {
            val s = (p.next.get)
            p.key = s.key
            p.value = s.value
            p = s
        } // p has 2 children

        // Start fixup at replacement node, if it exists.
        val replacement = if(p.left != nil) p.left else p.right
        if (replacement != nil) {
            // Link replacement to parent
            replacement.get.parent = p.parent
            if (p.parent == nil) _root = replacement
            else if (p == p.parent.get.left) p.parent.get.left = replacement
            else p.parent.get.right = replacement

            // Null out links so they are OK to use by fixAfterDeletion.
            p.left = nil
            p.right = nil
            p.parent = nil

            // Fix replacement
            if (p.color == BLACK) fixAfterDeletion(replacement.get)
        } else if (p.parent == nil) { // return if we are the only node.
            _root = nil
        } else { //  No children. Use self as phantom replacement and unlink.
            if (p.color == BLACK) fixAfterDeletion(p)
            if (p.parent != nil) {
                if (p == p.parent.get.left) p.parent.get.left = nil
                else if (p == p.parent.get.right) p.parent.get.right = nil
                p.parent = nil
            }
        }
        entry.value
    }

    private def fixAfterInsertion(entry : TreeMapEntry<K, V>) {
        entry.color = RED
        var x : TreeMapEntry<K, V>? = entry
        while (x != nil && x != _root && x.get.parent.get.color == RED) {
            if (x.get.parent == x.get.parent.get.parent.get.left) {
                val y = x.get.parent.get.parent.get.right
                if (y.get.color == RED) {
                    x.get.parent.get.color = BLACK
                    y.get.color = BLACK
                    x.get.parent.get.parent.get.color = RED
                    x = x.get.parent.get.parent
                } else {
                    if (x == x.get.parent.get.right) {
                        x = x.get.parent
                        rotateLeft(x)
                    }
                    x.get.parent.get.color = BLACK
                    x.get.parent.get.parent.get.color = RED
                    rotateRight(x.get.parent.get.parent)
                }
            } else {
                val y = x.get.parent.get.parent.get.left
                if (y.get.color == RED) {
                    x.get.parent.get.color = BLACK
                    y.get.color = BLACK
                    x.get.parent.get.parent.get.color = RED
                    x = x.get.parent.get.parent
                } else {
                    if (x == x.get.parent.get.left) {
                        x = x.get.parent
                        rotateRight(x)
                    }
                    x.get.parent.get.color = BLACK
                    x.get.parent.get.parent.get.color = RED
                    rotateLeft(x.get.parent.get.parent)
                }
            }
        }
        _root.get.color = BLACK
    }

    private def fixAfterDeletion(entry : TreeMapEntry<K, V>) {
        var x : TreeMapEntry<K, V>? = entry
        while (x != _root && x.get.color == BLACK) {
            if (x == x.get.parent.get.left) {
                var sib : TreeMapEntry<K, V> = (x.get.parent.get.right.get)
                if (sib.color == RED) {
                    sib.color = BLACK
                    x.get.parent.get.color = RED
                    rotateLeft(x.get.parent)
                    sib = x.get.parent.get.right.get
                }
                if (sib.left.get.color == BLACK && sib.right.get.color == BLACK) {
                    sib.color = RED
                    x = x.get.parent
                } else {
                    if (sib.right.get.color == BLACK) {
                        sib.left.get.color = BLACK
                        sib.color = RED
                        rotateRight(sib)
                        sib = x.get.parent.get.right.get
                    }
                    sib.color = x.get.parent.get.color
                    x.get.parent.get.color = BLACK
                    sib.right.get.color = BLACK
                    rotateLeft(x.get.parent)
                    x = _root
                }
            } else { // symmetric
                var sib : TreeMapEntry<K, V> = (x.get.parent.get.left.get)

                if (sib.color == RED) {
                    sib.color = BLACK
                    x.get.parent.get.color = RED
                    rotateRight(x.get.parent)
                    sib = x.get.parent.get.left.get
                }

                if (sib.right.get.color == BLACK && sib.left.get.color == BLACK) {
                    sib.color = RED
                    x = x.get.parent
                } else {
                    if (sib.left.get.color == BLACK) {
                        sib.right.get.color = BLACK
                        sib.color = RED
                        rotateLeft(sib)
                        sib = x.get.parent.get.left.get
                    }
                    sib.color = x.get.parent.get.color
                    x.get.parent.get.color = BLACK
                    sib.left.get.color = BLACK
                    rotateRight(x.get.parent)
                    x = _root
                }
            }
        }
        x?.color = BLACK
    }


    private def rotateLeft(p : TreeMapEntry<K, V>?) {
        if (p != nil) {
            val r = (p.get.right.get)
            p.get.right = r.left
            if (r.left != nil) r.left.get.parent = p
            r.parent = p.get.parent
            if (p.get.parent == nil) _root = r
            else if (p.get.parent.get.left == p) p.get.parent.get.left = r
            else p.get.parent.get.right = r
            r.left = p
            p.get.parent = r
        }
    }

    private def rotateRight(p : TreeMapEntry<K, V>?) {
        if (p != nil) {
            val l = (p.get.left.get)
            p.get.left = l.right
            if (l.right != nil) l.right.get.parent = p
            l.parent = p.get.parent
            if (p.get.parent == nil) _root = l
            else if (p.get.parent.get.right == p) p.get.parent.get.right = l
            else p.get.parent.get.left = l
            l.right = p
            p.get.parent = l
        }
    }

    def pollFirst : (K, V)? = firstEntry.map{entry ->
        delete(entry)
        (entry.key, entry.value)
    }
}

class TreeMapEntry<K, V> {
    var key : K
    var value : V
    var left : TreeMapEntry<K, V>? = nil
    var right : TreeMapEntry<K, V>? = nil
    var color : int
    weak var parent : TreeMapEntry<K, V>?

    static def apply<K, V>(key : K, value : V, parent : TreeMapEntry<K, V>?) : TreeMapEntry<K, V> = {
        val r = TreeMapEntry<K, V>()
        r.key = key
        r.value = value
        r.parent = parent
        r
    }

    def next : TreeMapEntry<K, V>? = {
        if (right != nil) {
            var p = (right.get)
            while (p.left != nil) p = p.left.get
            p
        } else {
            var p = parent
            var ch = self
            while (p != nil && ch == p.get.right) {
                ch = p.get
                p = p.get.parent
            }
            p
        }
    }

    def copy(parent : TreeMapEntry<K, V>?) : TreeMapEntry<K, V> = {
        val c = TreeMapEntry<K, V>()
        c.key = key
        c.value = value
        c.left = left?.copy(parent = c)
        c.right = right?.copy(parent = c)
        c.color = color
        c.parent = parent
        c
    }
}

trait TreeMapKeySet<K> extends ImIterable<K> {
    def iteratorHigherThan(key : K) : Iterator<K>
}

class ImTreeMapKeySet<K>(weak map : TreeMap<K, _>) extends TreeMapKeySet<K> {
    override def count : uint = map.count

    override def iterator : Iterator<K> = TreeMapKeyIterator<K>(map, map.firstEntry)
    override def iteratorHigherThan(key : K) : Iterator<K> = TreeMapKeyIterator<K>(map, map.higherEntryThan(key))
}

class TreeMapKeyIterator<K>(map : TreeMap<K, _>) extends Iterator<K> {
   static def apply<K>(map : TreeMap<K, _>, entry : TreeMapEntry<K, _>?) : TreeMapKeyIterator<K> = {
       val ret = TreeMapKeyIterator<K>(map)
       ret.entry = entry
       ret
   }
   var entry : TreeMapEntry<K, _>?
   override def hasNext : bool = entry != nil
   override def next : K = {
        val ret = entry.get.key
        entry = entry.get.next
        ret
   }
}

class MTreeMapKeySet<K>(weak map : MTreeMap<K, _>) extends TreeMapKeySet<K> {
    override def count : uint = map.count

    override def iterator : Iterator<K> = TreeMapKeyIterator<K>(map, map.firstEntry)
    def mutableIterator : MIterator<K> = MTreeMapKeyIterator<K>(map, map.firstEntry)
    override def iteratorHigherThan(key : K) : Iterator<K> = MTreeMapKeyIterator<K>(map, map.higherEntryThan(key))
}

class MTreeMapKeyIterator<K>(map : MTreeMap<K, _>) extends MIterator<K> {
    static def apply<K>(map : MTreeMap<K, _>, entry : TreeMapEntry<K, _>?) : MTreeMapKeyIterator<K> = {
        val ret = MTreeMapKeyIterator<K>(map)
        ret.entry = entry
        ret
    }
    private var prev : TreeMapEntry<K, _>?
    var entry : TreeMapEntry<K, _>?
    override def hasNext : bool = entry != nil
    override def next : K = {
        val ret = entry.get.key
        prev = entry
        entry = entry.get.next
        ret
    }

    override def remove {
        prev.for(map.delete(_))
    }

    override def set(value : K) {
        prev.for{p ->
            if(p.key != value) {
                map.delete(p)
                map.set(key = value, value = p.value)
            }
        }
    }
}


class TreeMapValues<V>(weak map : TreeMap<_, V>) extends ImIterable<V> {
    override def count : uint = map.count

    override def iterator : Iterator<V> = TreeMapValuesIterator<V>(map, map.firstEntry)
}

class TreeMapValuesIterator<V>(map : TreeMap<_, V>) extends Iterator<V> {
    static def apply<V>(map : TreeMap<_, V>, entry : TreeMapEntry<_, V>?) : TreeMapValuesIterator<V> = {
        val ret = TreeMapValuesIterator<V>(map)
        ret.entry = entry
        ret
    }
    var entry : TreeMapEntry<_, V>?
    override def hasNext : bool = entry != nil
    override def next : V = {
        val ret = entry.get.value
        entry = entry.get.next
        ret
    }
}

class TreeMapIterator<K, V>(map : TreeMap<K, V>) extends Iterator<(K, V)> {
    static def apply<K, V>(map : TreeMap<K, V>, entry : TreeMapEntry<K, V>?) : TreeMapIterator<K, V> = {
        val ret = TreeMapIterator<K, V>(map)
        ret.entry = entry
        ret
    }
    override def hasNext : bool = entry != nil
    var entry : TreeMapEntry<K, V>?

    override def next : (K, V) = {
        val ret = (entry.get.key, entry.get.value)
        entry = entry.get.next
        ret
    }
}

class MTreeMapIterator<K, V>(map : MTreeMap<K, V>) extends MIterator<(K, V)> {
    static def apply<K, V>(map : MTreeMap<K, V>, entry : TreeMapEntry<K, V>?) : MTreeMapIterator<K, V> = {
        val ret = MTreeMapIterator<K, V>(map)
        ret.entry = entry
        ret
    }
    override def hasNext : bool = entry != nil
    private var prev : TreeMapEntry<K, V>?
    var entry : TreeMapEntry<K, V>?

    override def next : (K, V) = {
        val ret = (entry.get.key, entry.get.value)
        prev = entry
        entry = entry.get.next
        ret
    }

    override def remove {
        prev.for(map.delete(_))
    }

    override def set(value : (K, V)) {
        prev.for{p ->
            if(p.key == value.a) p.value = value
            else {
                map.delete(p)
                map.set(key = value.a, value = value.b)
            }
        }
    }
}