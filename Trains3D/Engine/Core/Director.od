package com.antonzherdev.eg

class Director {
    private var _scene : Scene? = nil
    private var _isStarted = false
    private var _isPaused = false
    val time : Time = Time()
    def scene = _scene
    def set(scene : Scene) {
        lock
        if(_scene.isDefined) _scene.get.stop
        _scene = scene
        scene.start
        unlock
    }

    def lock
    def unlock

    def drawWith(size : vec2) {
        if(_scene.isEmpty) return nil
        if(size.x <= 0 || size.y <= 0) return nil

        context.director = self
        val color = _scene.get.backgroundColor
        glClearColor(color.x, color.y, color.z, color.w)
        glClear(GL_COLOR_BUFFER_BIT + GL_DEPTH_BUFFER_BIT)
        matrix.clear
        glEnable(GL_DEPTH_TEST)
        beforeDraw
        _scene.get.drawWith(size)
        glDisable(GL_DEPTH_TEST)
        context.matrixStack.clear
        context.set(viewport = Rect(vec2(0, 0), size))
        _stat.for(_.draw)
    }

    def beforeDraw

    def process(event : Event) {
        _scene.for(_.process(event))
    }

    def isStarted = _isStarted
    def start {
        _isStarted = true
        time.start
    }
    def stop {
        _isStarted = false
    }

    def isPaused = _isPaused
    def pause {
        _isPaused = true
        _scene.for(_.pause)
    }

    def resume {
        if(_isPaused) {
            _isPaused = false
            time.start
            _scene.for(_.resume)
        }
    }

    def tick {
        time.tick
        _scene.for(_.updateWith(time.delta))
        _stat.for(_.tickWith(time.delta))
    }

    private var _stat : Stat? = nil
    def stat = _stat
    def isDisplayingStats = _stat.isDefined
    def displayStats {_stat = Stat()}
    def cancelDisplayingStats {_stat = nil}
}