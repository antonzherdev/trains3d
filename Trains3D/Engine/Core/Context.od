package com.antonzherdev.eg

object Global {
    val context : Context = Context()
    val matrix : MatrixStack = context.matrixStack
    def textureFor(file : string) : Texture = context.textureFor(file, 1.0, GL_LINEAR, GL_LINEAR)
    def textureFor(file : string, magFilter : uint4, minFilter : uint4) : Texture = context.textureFor(file, 1.0, magFilter, minFilter)
    def scaledTextureFor(name : string, format : string) : Texture = scaledTextureFor(name, format, GL_NEAREST, GL_NEAREST)
    def scaledTextureFor(name : string, format : string, magFilter : uint4, minFilter : uint4) : Texture =
        context.textureFor("$name\_$(context.scale.cast<uint4>)x.$format", context.scale, magFilter, minFilter)
    def fontWith(name : string) : Font = context.fontWith(name)
    def fontWith(name : string, size : uint) : Font = context.fontWith(name, size)
    def mainFontWith(size : uint) : Font = context.mainFontWith(size)
}

class Context {
    var ttf : bool = true
    var scale : float = 1.0
    var needToRestoreDefaultBuffer = true
    var defaultFramebuffer : int4 = 0
    private val textureCache = MutableHashMap<(string, uint4, uint4), FileTexture>()
    private val fontCache = MutableHashMap<string, Font>()

    def textureFor(file : string, scale : float, magFilter : uint4, minFilter : uint4) : Texture =
        textureCache.objectFor(key = (file, magFilter.cast<uint4>, minFilter.cast<uint4>), orUpdateWith = FileTexture(file, scale, magFilter, minFilter))

    def fontWith(name : string) : Font = fontCache.objectFor(key = name, orUpdateWith = BMFont(name))
    def mainFontWith(size : uint) : Font = fontWith("Helvetica", size)
    def fontWith(name : string, size : uint) : Font = {
        val nm = "$name\ $((size*scale).cast<uint>)"
        if(ttf) fontCache.objectFor(key = nm, orUpdateWith = TTFFont(name, size*scale))
        else fontWith(nm)
    }

    var environment = Environment.default
    val matrixStack = MatrixStack()
    var renderTarget : RenderTarget = SceneRenderTarget()
    var considerShadows = true
    var redrawShadows = true
    var redrawFrame = true

    def clear {
        matrixStack.clear
        considerShadows = true
        redrawShadows = true
        redrawFrame = true
        _viewport = RectI(0, 0, 0, 0)
        _lastTexture2D = 0
        _lastTextures.clear
        _lastShaderProgram = 0
        _lastIndexBuffer = 0
        _lastVertexBufferId = 0
        _lastVertexBufferCount = 0
    }

    def clearCache {
        textureCache.clear
        fontCache.clear
    }

    private var _viewportStack = List<RectI>()
    private var _viewport : RectI
    def viewport = _viewport
    def set(viewport : RectI) {
        if(_viewport != viewport) {
            _viewport = viewport
            egViewport(viewport)
        }
    }
    def pushViewport {
        _viewportStack = List(viewport, _viewportStack)
    }
    def popViewport {
        set(viewport = _viewportStack.head)
        _viewportStack = _viewportStack.tail
    }
    def restoreDefaultFramebuffer {
        if(needToRestoreDefaultBuffer) {
            glBindFramebuffer(GL_FRAMEBUFFER, defaultFramebuffer)
        }
    }

    private var _lastTexture2D : uint4 = 0
    def bindTexture(texture : Texture) {
        val id = texture.id
        if(_lastTexture2D != id) {
            _lastTexture2D = id
            glBindTexture(GL_TEXTURE_2D, id)
        }
    }

    private val _lastTextures = MutableHashMap<uint4, uint4>()
    def bindTexture(slot : uint4, target : uint4, texture : Texture) {
        val id : uint4 = texture.id
        if(slot == GL_TEXTURE0 && target == GL_TEXTURE_2D) {
            if(_lastTexture2D != id) {
                _lastTexture2D = id
                glBindTexture(target, id)
            }
        } else {
            val key = slot*13 + target
            if(!_lastTextures.isValueEqual(key, id)) {
                if(slot != GL_TEXTURE0) {
                    glActiveTexture(slot)
                    glBindTexture(target, id)
                    glActiveTexture(GL_TEXTURE0)
                } else glBindTexture(target, id)
                _lastTextures.set(key, id)
            }
        }
    }

    private var _lastShaderProgram : uint4 = 0
    def bindShaderProgram(program : ShaderProgram) {
        val id = program.handle
        if(id != _lastShaderProgram) {
            _lastShaderProgram = id
            glUseProgram(id)
        }
    }

    private var _lastVertexBufferId : uint4 = 0
    private var _lastVertexBufferCount : uint4 = 0
    def bindVertexBuffer(buffer : VertexBuffer<_>) {
        val handle = buffer.handle
        if(handle != _lastVertexBufferId) {
            checkBindDefaultVertexArray
            _lastVertexBufferId = handle
            _lastVertexBufferCount = buffer.count
            glBindBuffer(GL_ARRAY_BUFFER, handle)
        }
    }
    def vertexBufferCount : uint4 = _lastVertexBufferCount

    private var _lastIndexBuffer : uint4 = 0
    def bindIndexBuffer(handle : uint4) {
        if(handle != _lastIndexBuffer) {
            checkBindDefaultVertexArray
            _lastIndexBuffer = handle
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle)
        }
    }

    private var _lastVertexArray : uint4 = 0
    def bindVertexArray(handle : uint4, vertexCount : uint4, mutable : bool) {
        if(handle != _lastVertexArray || mutable) {
            _lastVertexArray = handle
            _lastVertexBufferId = 0
            _lastIndexBuffer = 0
            egBindVertexArray(handle)
        }
        _needBindDefaultVertexArray = false
        _lastVertexBufferCount = vertexCount
    }

    var defaultVertexArray : uint4 = 0
    private var _needBindDefaultVertexArray = false
    def bindDefaultVertexArray {
        _needBindDefaultVertexArray = true
    }
    def checkBindDefaultVertexArray {
        if(_needBindDefaultVertexArray) {
            _lastIndexBuffer = 0
            _lastVertexBufferCount = 0
            _lastVertexBufferId = 0
            egBindVertexArray(defaultVertexArray)
            _needBindDefaultVertexArray = false
        }
    }

    val cullFace : EnablingState = EnablingState(GL_CULL_FACE)
    val blend : EnablingState = EnablingState(GL_BLEND)
    val depthTest : EnablingState = EnablingState(GL_DEPTH_TEST)
    def draw {
        cullFace.draw
        blend.draw
        depthTest.draw
    }

    private var _lastClearColor = vec4(0, 0, 0, 0)
    def clearColor(color : vec4) {
        if(_lastClearColor != color) {
            _lastClearColor = color
            glClearColor(color.x, color.y, color.z, color.w)
        }
    }
}

class EnablingState(tp: uint4) {
    private var _last : bool = false
    private var _coming : bool = false

    def enable {
        _coming = true
    }

    def disable {
        _coming = false
    }

    def draw {
        if(_last != _coming) {
            if(_coming) glEnable(tp)
            else glDisable(tp)
            _last = _coming
        }
    }

    def clear {
        _last = false
        _coming = false
    }

    def disabled(f : () -> void) {
        if(_coming) {
            _coming = false
            f()
            _coming = true
        } else {
            f()
        }
    }

    def enabled(f : () -> void) {
        if(!_coming) {
            _coming = true
            f()
            _coming = false
        } else {
            f()
        }
    }
}

class RenderTarget {
    def isShadow : bool = false
}
class SceneRenderTarget extends RenderTarget
class ShadowRenderTarget(shadowLight : Light) extends RenderTarget {
    static val default = ShadowRenderTarget(Light.default)
    def isShadow = true
}

class Environment(ambientColor : vec4, lights : [Light]) {
    val directLights : [DirectLight] = lights.chain.filter(_.is<DirectLight>).toArray
    val directLightsWithShadows : [DirectLight] = lights.chain.filter(_.is<DirectLight> && _.hasShadows).toArray
    val directLightsWithoutShadows : [DirectLight] = lights.chain.filter(_.is<DirectLight> && !_.hasShadows).toArray

    static val default = Environment(vec4(1, 1, 1, 1), [])
    static def apply(lights : [Light]) = Environment(vec4(1, 1, 1, 1), lights)
    static def apply(light : Light) = Environment(vec4(1, 1, 1, 1), [light])
}

class Light(color : vec4, hasShadows : bool) {
    lazy val shadowMap : ShadowMap = ShadowMap(vec2(2048, 2048))
    static val default = Light(vec4(1, 1, 1, 1), true)

    def shadowMatrix(model : MatrixModel) : MatrixModel = throw "Shadows are not supported for $(self.type)"
}
class DirectLight(color : vec4, direction : vec3, hasShadows : bool, shadowsProjectionMatrix : mat4) extends Light(color, hasShadows) {
    static def apply(color : vec4, direction : vec3) = DirectLight(color, direction, false, mat4.identity)
    static def apply(color : vec4, direction : vec3, shadowsProjectionMatrix : mat4) = DirectLight(color, direction, true, shadowsProjectionMatrix)
    def shadowMatrix(model : MatrixModel) : MatrixModel =
        model.modify(c = mat4.lookAt((model.w * vec4(direction, 0)).xyz.normalize.negate, vec3(0, 0, 0), vec3(0, 1, 0)))
             .modify(p = shadowsProjectionMatrix)
}

class MatrixStack {
    private var stack = List<MatrixModel>()
    var value = MatrixModel.identity

    def clear {
        value = MatrixModel.identity
        stack = List<MatrixModel>()
    }

    def push {
        stack = List(value, stack)
    }

    def pop {
        value = stack.head
        stack = stack.tail
    }

    def apply(modify : MatrixModel -> MatrixModel, f : () -> void) {
        push
        value = modify(value)
        f()
        pop
    }

    def identity(f : () -> void) {
        push
        value = MatrixModel.identity
        f()
        pop
    }

    def m = value.m
    def w = value.w
    def c = value.c
    def p = value.p
    def mw = value.mw
    def mwc = value.mwc
    def mwcp = value.mwcp
    def wc = value.wc
    def wcp = value.wcp
    def cp = value.cp
}

class MatrixModel(m : mat4, w : mat4, c : mat4, p : mat4,
    _mw : Lazy<mat4>, _mwc : Lazy<mat4>, _mwcp : Lazy<mat4>,
    _cp : Lazy<mat4>, _wcp : Lazy<mat4>, _wc : Lazy<mat4>)
{
    static def apply(m : mat4, w : mat4, c : mat4, p : mat4) : MatrixModel = {
        val _mw = Lazy(w.mul(m))
        val _mwc = Lazy(c.mul(_mw.get))
        val _cp = Lazy(p.mul(c))
        val _mwcp = Lazy(_cp.get.mul(_mw.get))
        val _wc = Lazy(c.mul(w))
        val _wcp = Lazy(p.mul(_wc.get))
        MatrixModel(m, w, c, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }
    static val identity = MatrixModel(mat4.identity, mat4.identity, mat4.identity, mat4.identity)
    def mw = _mw.get
    def mwc = _mwc.get
    def mwcp = _mwcp.get
    def cp = _cp.get
    def wcp = _wcp.get
    def wc = _wc.get

    def modify(m : mat4 -> mat4) : MatrixModel = {
        val mm = m(self.m)
        val _mw = Lazy(w.mul(mm))
        val _mwc = Lazy(c.mul(_mw.get))
        val _mwcp = Lazy(_cp.get.mul(_mw.get))
        MatrixModel(mm, w, c, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }


    def modify(w : mat4 -> mat4) : MatrixModel = {
        val ww = w(self.w)
        val _mw = Lazy(ww.mul(m))
        val _mwc = Lazy(c.mul(_mw.get))
        val _mwcp = Lazy(_cp.get.mul(_mw.get))
        val _wc = Lazy(c.mul(ww))
        val _wcp = Lazy(p.mul(_wc.get))
        MatrixModel(m, ww, c, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }

    def modify(c : mat4 -> mat4) : MatrixModel = {
        val cc = c(self.c)
        val _mwc = Lazy(cc.mul(_mw.get))
        val _cp = Lazy(p.mul(cc))
        val _mwcp = Lazy(_cp.get.mul(_mw.get))
        val _wc = Lazy(cc.mul(w))
        val _wcp = Lazy(p.mul(_wc.get))
        MatrixModel(m, w, cc, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }

    def modify(p : mat4 -> mat4) : MatrixModel = {
        val pp = p(self.p)
        val _cp = Lazy(pp.mul(c))
        val _mwcp = Lazy(_cp.get.mul(_mw.get))
        val _wcp = Lazy(pp.mul(_wc.get))
        MatrixModel(m, w, c, pp, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }
}
