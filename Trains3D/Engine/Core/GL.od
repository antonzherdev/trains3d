package com.antonzherdev.gl

import com.antonzherdev.geometry._
import com.antonzherdev.eg._

stub struct GLint
stub struct GLintptr
stub struct GLuint
stub struct GLubyte
stub struct GLsizei
stub struct GLboolean
stub struct GLsizeiptr
stub struct GLbitfield

stub object gl {
    def glClear(: uint4)
    def glClearColor(r : float4, g : float4, b : float4, a : float4)
    def glClearDepth( : float4)
    def glDepthMask( : GLboolean)

    def glFlush
    def glFinish
    def glEnable(: uint4)
    def glDisable(: uint4)
    val GL_DEPTH_TEST : uint4
    val GL_MULTISAMPLE : uint4
    val GL_CULL_FACE : uint4
    val GL_BLEND : uint4
    val GL_ALPHA_TEST : uint4
    def glHint(: uint4, : uint4)
    val GL_LINE_SMOOTH_HINT : uint4
    val GL_POLYGON_SMOOTH_HINT : uint4
    val GL_NICEST : uint4
    def glAlphaFunc(: uint4, : float4)
    val GL_GREATER : uint4

    def glCullFace(: uint)
    val GL_FRONT : uint
    val GL_BACK : uint
    val GL_FRONT_AND_BACK : uint
    def glFrontFace(: uint)
    val GL_CW : uint
    val GL_CWW : uint

    def glGetError : uint4

    def glLineWidth(width : float4)
    def egViewport(rect : RectI)
    def glViewport (x : GLint, y : GLint, width : GLsizei, height : GLsizei)
    def glUniformMatrix4fv(location : GLuint, count : GLsizei, transpose : GLboolean, value : [float4])
    def glUniform1f(location : GLuint, f : float4)
    def glUniform1i(location : GLuint, f : int4)
    def egUniformVec4(location : GLuint, color : vec4)
    def egUniformVec3(location : GLuint, color : vec3)
    def egUniformVec2(location : GLuint, color : vec3)

    def glCreateProgram : GLuint
    def glAttachShader(program : GLuint, shader : GLuint)
    def glAttachShader(program : GLuint, shader : GLuint)
    def glLinkProgram(program : GLuint)
    def glDeleteProgram(program : GLuint)
    def glUseProgram(program : GLuint)
    def egGetAttribLocation(program : GLuint, name : string) : GLint
    def egGetUniformLocation(program : GLuint, name : string) : GLint
    def egGetProgramError(program : GLuint) : string?

    def glDeleteShader(shader : GLuint)
    def glCreateShader(shaderType : uint4) : GLuint
    def egShaderSource(shader : GLuint, source : string)
    def glCompileShader(shader : GLuint)
    def egGetShaderError(shader : GLuint) : string?

    val GL_VERTEX_SHADER : uint4
    val GL_FRAGMENT_SHADER : uint4

    def egGenBuffer : GLuint
    def egDeleteBuffer(handle : GLuint)
    def egGenVertexArray : GLuint
    def egDeleteVertexArray(handle : GLuint)
    def egBindVertexArray(handle : GLuint)
    def glBindBuffer(target : uint4, handle : GLuint) : GLuint
    def glBufferData(target : uint4, size : GLsizeiptr, data : [void], usage : uint4)
    def glBufferSubData(target : uint4, offset : GLintptr ,size : GLsizeiptr, data : [void])
    def egVertexAttribPointer(slot : GLuint, size : uint, tp : uint4, normalized : GLboolean, stride : uint, shift : uint)
    def glDrawElements(mode : uint4, count : GLsizei, tp : uint4, indices : [void])
    def glDrawElementsEXT(mode : uint4, count : GLsizei, tp : uint4, indices : [void])
    def glDrawRangeElements(mode : uint4, start : GLuint, end : GLuint, count : GLsizei, tp : uint4, indices : [void])
    def glDrawArrays(mode : uint4, first : GLint, count : GLsizei)
    def glEnableVertexAttribArray(handle : GLint)
    def glDisableVertexAttribArray(handle : GLint)
    val GL_ARRAY_BUFFER : uint4
    val GL_ELEMENT_ARRAY_BUFFER : uint4
    val GL_STATIC_DRAW : uint4
    val GL_DYNAMIC_DRAW : uint4
    val GL_TRIANGLES : uint4
    val GL_TRIANGLE_STRIP : uint4
    val GL_LINES : uint

    val GL_FLOAT : uint4
    val GL_DOUBLE : uint4
    val GL_BYTE : uint4
    val GL_UNSIGNED_BYTE : uint4
    val GL_UNSIGNED_SHORT : uint4
    val GL_INT : uint4
    val GL_UNSIGNED_INT : uint4

    val GL_TRUE : GLboolean
    val GL_FALSE : GLboolean

    def glBlendFunc(sfactor : uint4, dfactor : uint4)
    def glBlendFuncSeparate(srcRGB : uint4, dstRGB : uint4, stcAlpha : uint4, dstAlpha : uint4)
    val GL_ZERO : uint
    val GL_ONE : uint
    val GL_SRC_ALPHA : uint
    val GL_ONE_MINUS_SRC_ALPHA : uint


    def egGenFrameBuffer : GLuint
    def egGenFrameBufferEXT : GLuint
    def egDeleteFrameBuffer(handle : GLuint)
    def egDeleteFrameBufferEXT(handle : GLuint)
    def glBindFramebuffer( : uint4,handle : GLuint)
    def glBindFramebufferEXT( : uint4,handle : GLuint)
    val GL_FRAMEBUFFER : uint4
    val GL_READ_FRAMEBUFFER : uint4
    val GL_DRAW_FRAMEBUFFER : uint4
    val GL_COLOR_BUFFER_BIT : uint4
    val GL_DEPTH_BUFFER_BIT : uint4
    def glBindTexture( : uint4,handle : GLuint)
    val GL_TEXTURE_2D : uint4
    val GL_TEXTURE_2D_MULTISAMPLE : uint4
    val GL_RGBA : uint4
    val GL_DEPTH_COMPONENT16 : uint4
    val GL_DEPTH_COMPONENT24 : uint4
    val GL_DEPTH_COMPONENT32 : uint4
    val GL_RGBA8 : uint4
    val GL_NONE : uint4
    def egGenTexture : GLuint
    def egDeleteTexture(handle : GLuint)

    def egGenRenderBuffer : GLuint
    def egDeleteRenderBuffer(handle : GLuint) : GLuint
    def glBindRenderbuffer( : uint4,handle : GLuint)
    def glRenderbufferStorage( : uint4, component : uint4, width : GLsizei, height : GLsizei)
    val GL_RENDERBUFFER : uint4
    val GL_DEPTH_COMPONENT : uint4
    val GL_DEPTH_COMPONENT24 : uint4
    def glFramebufferRenderbuffer(target : uint4, attachment : uint4, buftarget : uint4, buffer : GLuint)
    val GL_DEPTH_ATTACHMENT : uint4

    def glTexImage2D(target : uint4, level : GLint, internalformat  : GLint, width : GLsizei, height : GLsizei, border : GLint, format : uint4, tp : uint4, pixels : VoidRef)
    def glTexImage2DMultisample(target : uint4, samples : GLsizei, internalformat  : GLint, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean)
    def glTexParameteri(target : uint4, pname : uint4, param : GLint)
    def egInitShadowTexture
    val GL_TEXTURE_WRAP_S : uint4
    val GL_TEXTURE_WRAP_T : uint4
    val GL_TEXTURE_COMPARE_FUNC : uint4
    val GL_TEXTURE_COMPARE_MODE : uint4
    val GL_LINEAR : uint4
    val GL_LINEAR_MIPMAP_LINEAR : uint4
    val GL_CLAMP_TO_EDGE : uint4
    val GL_LEQUAL : uint4
    val GL_COMPARE_R_TO_TEXTURE : uint4
    val GL_NEAREST : uint4
    val GL_TEXTURE_MIN_FILTER : uint4
    val GL_TEXTURE_MAG_FILTER : uint4
    def egFramebufferTexture(target : uint4, attachment : uint4, texture : GLuint, level : GLint)
    def glDrawBuffer(:uint4)
    def glCheckFramebufferStatus(target : uint4) : int
    val GL_COLOR_ATTACHMENT0 : uint4
    val GL_FRAMEBUFFER_COMPLETE : uint4
    def glGenerateMipmap(target : uint4)
    def glActiveTexture(: uint4)
    val GL_TEXTURE0 : uint4
    val GL_TEXTURE1 : uint4
    val GL_TEXTURE2 : uint4
    val GL_TEXTURE3 : uint4
    val GL_TEXTURE4 : uint4

    def egLoadTextureFromFile(target : GLuint, file : string, magFilter : uint4, minFilter : uint4) : vec2
    def egSaveTextureToFile(source : GLuint, file : string)
    def egPlatform : Platform
    def egGLSLVersion : uint
}