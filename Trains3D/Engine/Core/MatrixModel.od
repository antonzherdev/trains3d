package com.antonzherdev.eg

class MatrixStack {
    private var stack = List<ImMatrixModel>()
    private val _value = MMatrixModel()
    def value : MMatrixModel = _value
    def set(value : MatrixModel) {
        _value.set(value)
    }

    def clear {
        _value.clear
        stack = List<ImMatrixModel>()
    }

    def push {
        stack = List(_value.immutable, stack)
    }

    def pop {
        _value.set(stack.head)
        stack = stack.tail
    }

    def apply(modify : MMatrixModel -> void, f : () -> void) {
        push
        modify(_value)
        f()
        pop
    }

    def identity(f : () -> void) {
        push
        _value.clear
        f()
        pop
    }

    def m = _value.m
    def w = _value.w
    def c = _value.c
    def p = _value.p
    def mw = _value.mw
    def mwc = _value.mwc
    def mwcp = _value.mwcp
    def wc = _value.wc
    def wcp = _value.wcp
    def cp = _value.cp
}

class MatrixModel {
    def m : mat4
    def w : mat4
    def c : mat4
    def p : mat4

    def mw : mat4 = w * m
    def mwc : mat4 = c * (w * m)
    def mwcp : mat4 = p * (c * (w * m))
    def cp : mat4 = p * c
    def wcp : mat4 = p * (c * w)
    def wc : mat4 = c * w

    static val identity : MatrixModel = ImMatrixModel(mat4.identity, mat4.identity, mat4.identity, mat4.identity)

    def mutable : MMatrixModel
}

class ImMatrixModel(m : mat4, w : mat4, c : mat4, p : mat4) extends MatrixModel {
    def mutable : MMatrixModel = MMatrixModel(m, w, c, p)

    def mw : mat4 = w * m
    def mwc : mat4 = c * (w * m)
    def mwcp : mat4 = p * (c * (w * m))
    def cp : mat4 = p * c
    def wcp : mat4 = p * (c * w)
    def wc : mat4 = c * w
}

class MMatrixModel extends MatrixModel {
    var _m : mat4 = mat4.identity
    var _w : mat4 = mat4.identity
    var _c : mat4 = mat4.identity
    var _p : mat4 = mat4.identity
    def m : mat4 = _m
    def w : mat4 = _w
    def c : mat4 = _c
    def p : mat4 = _p

    private var _mw : mat4 = nil
    private var _mwc : mat4 = nil
    private var _mwcp : mat4 = nil
    def mw : mat4 = {
        if(_mw == nil) _mw = _w * _m
        _mw
    }
    def mwc : mat4 = {
        if(_mwc == nil) _mwc = _c * mw
        _mwc
    }
    def mwcp : mat4 = {
        if(_mwcp == nil) _mwcp = _p * mwc
        _mwcp
    }
    def cp : mat4 = _p * _c
    def wcp : mat4 = _p * (_c * _w)
    def wc : mat4 = _c * _w

    def copy : MMatrixModel = MMatrixModel(m, w, c, p)
    static def apply(matrixModel : MatrixModel) : MMatrixModel = matrixModel.mutable
    static def apply(imMatrixModel : ImMatrixModel) : MMatrixModel = imMatrixModel.mutable

    static def apply(m : mat4, w : mat4, c : mat4, p : mat4) : MMatrixModel = {
        val mm = MMatrixModel()
        mm._m = m
        mm._w = w
        mm._c = c
        mm._p = p
        mm
    }

    def mutable : MMatrixModel = self
    def immutable : ImMatrixModel = ImMatrixModel(m, w, c, p)

    def modify(m : mat4 -> mat4) : MMatrixModel = {
        _m = m(_m)
        _mw = nil
        _mwc = nil
        _mwcp = nil
        self
    }


    def modify(w : mat4 -> mat4) : MMatrixModel = {
        _w = w(_w)
        _mw = nil
        _mwc = nil
        _mwcp = nil
        self
    }

    def modify(c : mat4 -> mat4) : MMatrixModel = {
        _c = c(_c)
        _mwc = nil
        _mwcp = nil
        self
    }

    def modify(p : mat4 -> mat4) : MMatrixModel = {
        _p = p(_p)
        _mwcp = nil
        self
    }

    def clear {
        _m = mat4.identity
        _w = mat4.identity
        _c = mat4.identity
        _p = mat4.identity
        _mw = nil
        _mwc = nil
        _mwcp = nil
    }

    def set(matrixModel : MatrixModel) {
        _m = matrixModel.m
        _w = matrixModel.w
        _c = matrixModel.c
        _p = matrixModel.p
        _mw = nil
        _mwc = nil
        _mwcp = nil
    }
}

