package com.antonzherdev.eg

import ODType

import EGGL
import EGTypes
import EGMesh
import EGShader
import EGMaterial
import CNVoidRefArray


class EGParticleSystem <P extends EGParticle> extends EGController {
    private var _particles = CNList<P>()
    def particles : [P] = _particles

    def generateParticle : P
    def generateParticlesWith(delta : float) {}

    def emitParticle {
        _particles = CNList(generateParticle, _particles)
    }

    def updateWith(delta : float) {
        generateParticlesWith(delta)

        _particles = _particles.filter(_.isLive)
        _particles.for(_.updateWith(delta))
    }

    def hasParticles = !_particles.isEmpty
}

class EGParticle(lifeLength : float4) extends EGController {
    private var _lifeTime : float4
    def lifeTime : float4 = _lifeTime

    def writeTo(array : CNVoidRefArray) : CNVoidRefArray

    def isLive : bool  = _lifeTime <= lifeLength

    def updateWith(delta : float) {
        _lifeTime += delta
        update(t = _lifeTime, dt = delta)
    }

    def update(t : float4, dt : float4)
}


class EGParticleSystemView<P extends EGParticle>(dtp : ODPType<_>, blendFunc : EGBlendFunction) {
    val vertexBuffer = EGVertexBuffer<float4>(dtp.size)
    val indexBuffer = EGIndexBuffer<uint4>()

    def vertexCount : uint
    def writeIndexesTo(indexPointer : CNVoidRefArray, i : uint4) : CNVoidRefArray
    def shader : EGShader
    def material : EGMaterial

    def draw(system : EGParticleSystem<P>) {
        val particles = system.particles
        val n = particles.count
        if(n == 0) return nil

        glDisable(GL_DEPTH_TEST)
        glDisable(GL_CULL_FACE)
        blendFunc {
            val vc = vertexCount
            val vertexArr = CNVoidRefArray(dtp, n*vc)
            val indexArr = CNVoidRefArray(ODUInt4.type, n*3*(vc - 2))
            var indexPointer = indexArr
            var vertexPointer = vertexArr
            var index : uint4 = 0
            particles.for{particle ->
                vertexPointer = particle.writeTo(vertexPointer)
                indexPointer = writeIndexesTo(indexPointer, index)
                index += vc
            }
            vertexBuffer.set(dtp, array = vertexArr)
            indexBuffer.set(ODUInt4.type, array = indexArr)
            vertexArr.free
            indexArr.free

            shader.draw(material, EGMesh(vertexBuffer = vertexBuffer, indexBuffer))
        }
        glEnable(GL_CULL_FACE)
        glEnable(GL_DEPTH_TEST)
    }
}