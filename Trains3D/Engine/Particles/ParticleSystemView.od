package com.antonzherdev.eg

abstract class ParticleSystemView<P, D, M>(
    system : ParticleSystem<P>, vbDesc : VertexBufferDesc<D>,
    shader : Shader<M>, material : M, blendFunc : BlendFunction)
{
    val maxCount = system.maxCount
    val vertexCount = system.vertexCount

    def indexCount : uint4
    private val _indexCount = indexCount
    val index : IndexSource = createIndexSource
    protected def createIndexSource : IndexSource


    val vaoRing = VertexArrayRing<M>(ringSize = 3, creator = weak shader.vao(VBO.mut<D>(vbDesc), index))
    private var _vao : VertexArray<M>?
    private var _vbo : MutableVertexBuffer<D>?
    private var _lastWriteFuture : Future<uint4>?
    def prepare {
        _vao = vaoRing.next
        _vao?.syncWait
        _vbo = _vao?.mutableVertexBuffer
        _vbo.for{ vbo ->
            val r = vbo.beginWrite(count = vertexCount * maxCount)
            if(r != nil) _lastWriteFuture = system.writeTo(r)
            else _lastWriteFuture = nil
        }
    }

    def draw {
        if(_lastWriteFuture != nil) {
            _vbo?.endWrite
            val r = _lastWriteFuture.waitResult(1)
            if(r != nil && r.isSuccess) {
                val n = r.get
                if(n > 0) {
                    context.depthTest.disabled{ context.cullFace.disabled{ blendFunc {
                        _vao?.draw(material, 0, _indexCount * n)
                    }}}
                }
                _vao?.syncSet
            } else {
                log("Incorrect result in particle system: $r")
            }
        }
    }
}

abstract class ParticleSystemViewIndexArray<P, D, M>(
    system : ParticleSystem<P>, vbDesc : VertexBufferDesc<D>,
    shader : Shader<M>, material : M, blendFunc : BlendFunction)
    extends ParticleSystemView(system, vbDesc, shader, material, blendFunc)
{
    override def indexCount : uint4 = system.cast<ParticleSystemIndexArray>.indexCount
    protected override def createIndexSource : IndexSource = {
        val ia = system.cast<ParticleSystemIndexArray>.createIndexArray
        val ib = IBO(ia, indexCount * maxCount)
        ia.free
        ib
    }
}
