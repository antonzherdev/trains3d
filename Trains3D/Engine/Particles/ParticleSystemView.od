package com.antonzherdev.eg

abstract class ParticleSystemView<P extends Particle, D, M>(
    system : ParticleSystem<P>, vbDesc : VertexBufferDesc<D>, maxCount : uint,
    shader : Shader<M>, material : M, blendFunc : BlendFunction)
{
    def vertexCount : uint
    def index(vertexCount : uint, maxCount : uint) : IndexSource
    def indexCount : uint


    val index : IndexSource = index(vertexCount, maxCount)
    val vaoRing = VertexArrayRing<M>(ringSize = 3, creator = weak shader.vao(VBO.mut<D>(vbDesc), index))
    private var _vao : VertexArray<M>?
    private var _vbo : MutableVertexBuffer<D>?
    def prepare {
        _vao = vaoRing.next
        _vao?.syncWait
        _vbo = _vao?.mutableVertexBuffer
        _vbo ?> (system.writeTo(maxCount, _.beginWrite(count = vertexCount * maxCount)))
    }

    def draw {
        system.lastWriteCount.waitAndOnSuccess(await = 1) {n ->
            _vbo?.endWrite
            if(n > 0) {
                context.depthTest.disabled{ context.cullFace.disabled{ blendFunc {
                    _vao?.draw(material, 0, indexCount * n)
                }}}
            }
            _vao?.syncSet
        }
    }
}

trait IBOParticleSystemView {
    def writeIndexesTo(indexPointer : VoidRefArray, i : uint4) : VoidRefArray
    def vertexCount : uint
    def indexCount : uint = 3*(vertexCount - 2)

    def index(vertexCount : uint, maxCount : uint) : MutableIndexSourceGap = {
        val vc = vertexCount
        val ia = VoidRefArray(UInt4.type, indexCount*maxCount)
        var indexPointer = ia
        maxCount.range.for{i ->
            indexPointer = writeIndexesTo(indexPointer, i*vc)
        }
        val ib = IBO(ia)
        ia.free
        ib
    }
}

trait IBOParticleSystemViewQuad extends IBOParticleSystemView {
    override def vertexCount : uint = 4
    override def indexCount : uint = 6

    override def writeIndexesTo(indexPointer : VoidRefArray, i : uint4) : VoidRefArray = {
        indexPointer
            .write(uInt4 = i).write(uInt4 = i + 1).write(uInt4 = i + 2)
            .write(uInt4 = i + 2).write(uInt4 = i).write(uInt4 = i + 3)
    }
}
