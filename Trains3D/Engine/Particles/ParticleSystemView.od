package com.antonzherdev.eg

class ParticleSystemView<P extends Particle, D, M>(
    system : ParticleSystem<P>, vbDesc : VertexBufferDesc<D>, maxCount : uint,
    shader : Shader<M>, material : M, blendFunc : BlendFunction)
{
    def vertexCount : uint
    def index(vertexCount : uint, maxCount : uint) : IndexSource
    def indexCount : uint


    val index : IndexSource = index(vertexCount, maxCount)
    val vaoRing = VertexArrayRing(ringSize = 3, creator = shader.vao(VBO.mut<D>(vbDesc), index))

    def draw {
        val particles = system.particles
        if(particles.isEmpty) return nil

        vaoRing.sync { vao ->
            var i = 0
            vao.vertexWrite(count = vertexCount * maxCount.min(particles.count)) { vertexPointer ->
                var p = vertexPointer
                particles.go{particle ->
                    if(i < maxCount) {
                        p = particle.writeTo(p)
                        i++
                        true
                    } else false
                }
            }


            context.depthTest.disabled{ context.cullFace.disabled{ blendFunc {
                vao.draw(material, 0, indexCount * i)
            }}}
        }
    }
}

trait IBOParticleSystemView {
    def writeIndexesTo(indexPointer : VoidRefArray, i : uint4) : VoidRefArray
    def vertexCount : uint
    def indexCount : uint = 3*(vertexCount - 2)

    def index(vertexCount : uint, maxCount : uint) : MutableIndexSourceGap = {
        val vc = vertexCount
        val ia = VoidRefArray(UInt4.type, indexCount*maxCount)
        var indexPointer = ia
        maxCount.range.for{i ->
            indexPointer = writeIndexesTo(indexPointer, i*vc)
        }
        val ib = IBO(ia)
        ia.free
        ib
    }
}

trait IBOParticleSystemViewQuad extends IBOParticleSystemView {
    def vertexCount : uint = 4
    def indexCount : uint = 6

    def writeIndexesTo(indexPointer : VoidRefArray, i : uint4) : VoidRefArray = {
        indexPointer
            .write(uInt4 = i).write(uInt4 = i + 1).write(uInt4 = i + 2)
            .write(uInt4 = i + 2).write(uInt4 = i).write(uInt4 = i + 3)
    }
}
