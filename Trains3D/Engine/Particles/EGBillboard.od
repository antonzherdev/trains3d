import EG
import EGGL
import EGVec
import EGMaterial
import EGShader

class EGBillboard {
    static def drawWith(material : EGSimpleMaterial, size : EGVec2) {

    }
}

class EGBillboardShader(program : EGShaderProgram, texture : bool) extends EGShader<EGSimpleMaterial>(program) {
    static def vertexTextWith(texture : bool, parameters : string, code : string) =
        "attribute vec3 position;
         attribute vec2 model;
         attribute vec2 vertexUV; $when(texture)

         uniform mat4 wc;
         uniform mat4 p;

         varying vec2 UV; $when(texture)
         $parameters

         void main(void) {
            float size = 0.03;
            vec4 pos = wc*vec4(position, 1);
            pos.x += model.x;
            pos.y += model.y;
            gl_Position = p*pos;
            UV = vertexUV;
            $code
         }"
    static def fragmentTextWith(texture : bool, parameters : string, code : string) =
        "
        $if(texture)
         varying vec2 UV;
         uniform sampler2D texture;
        $else
         uniform vec4 color;
        $endif

         $parameters
         void main(void) {
            gl_FragColor = texture2D(texture, UV); $when(texture)
            gl_FragColor = color; $when(!texture)
            $code
         }"


    val positionSlot = attributeFor("position")
    val modelSlot = attributeFor("model")
    val uvSlot : EGShaderAttribute? = if(texture) attributeFor("vertexUV") else nil
    val colorUniform : EGShaderUniform? = if(texture) nil else uniformFor("color")

    val wcUniform = uniformFor("wc")
    val pUniform = uniformFor("p")

    def load(vertexBuffer : EGVertexBuffer<_>, material : EGSimpleMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, shift = 0)
        modelSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, shift = 3*4)
        wcUniform.set(matrix = EG.matrix.value.wc)
        pUniform.set(matrix = EG.matrix.value.p)
        if(texture) {
            uvSlot.for(_.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, shift = 5*4))
            material.color.cast<EGColorSourceTexture>.texture.bind
        } else {
            colorUniform.get.set(color = material.color.cast<EGColorSourceColor>.color)
        }
    }

    def unload(material : EGSimpleMaterial) {
        if(texture) EGTexture.unbind
    }
}