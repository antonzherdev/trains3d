import EG
import EGGL
import EGVec
import EGShader

class EGBillboard {
    static def drawWith(size : EGVec2) {

    }
}

class EGBillboardShader(program : EGShaderProgram, texture : bool) {
    static def vertexTextWith(texture : bool, parameters : string, code : string) =
        "attribute vec3 position;
         attribute vec2 model;
         attribute vec2 vertexUV; $when(texture)

         uniform mat4 wc;
         uniform mat4 p;

         varying vec2 UV; $when(texture)
         $parameters

         void main(void) {
            float size = 0.03;
            vec4 pos = wc*vec4(position, 1);
            pos.x += model.x;
            pos.y += model.y;
            gl_Position = p*pos;
            UV = vertexUV;
            $code
         }"
    static def fragmentTextWith(texture : bool, parameters : string, code : string) =
        "
        $if(texture)
         varying vec2 UV;
         uniform sampler2D texture;
        $else
         uniform vec4 color;
        $endif

         $parameters
         void main(void) {
            gl_FragColor = texture2D(texture, UV); $when(texture)
            gl_FragColor = color; $when(!texture)
            $code
         }"


    val positionSlot = program.attributeFor("position")
    val modelSlot = program.attributeFor("model")
    val uvSlot : EGShaderAttribute? = if(texture) program.attributeFor("vertexUV") else nil

    val wcUniform = program.uniformFor("wc")
    val pUniform = program.uniformFor("p")

    def load {
        positionSlot.setFromBufferWith(stride = 8*4, valuesCount = 3, GL_FLOAT, shift = 0)
        modelSlot.setFromBufferWith(stride = 8*4, valuesCount = 2, GL_FLOAT, shift = 3*4)
        uvSlot.for(_.setFromBufferWith(stride = 8*4, valuesCount = 2, GL_FLOAT, shift = 5*4))
        wcUniform.set(matrix = EG.matrix.value.wc)
        pUniform.set(matrix = EG.matrix.value.p)
    }

    def apply(draw : () -> void) {
        program {
           load
            draw()
        }
    }
}