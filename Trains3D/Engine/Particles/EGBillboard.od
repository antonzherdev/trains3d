package com.antonzherdev.eg

import EG
import com.antonzherdev.eg.EGGL._
import EGVec
import EGShader
import EGTypes
import EGParticleSystem
import CNVoidRefArray
import EGMaterial
import EGTexture
import EGMesh

class EGBillboardShaderSystem extends EGShaderSystem<EGSimpleMaterial> {
    static val instance = EGBillboardShaderSystem()

    def shaderFor(material : EGSimpleMaterial) : EGBillboardShader = case(material.color)
        EGColorSourceColor(_) -> EGBillboardShader.instanceForColor
        _ -> EGBillboardShader.instanceForTexture
}

class EGBillboardShader(program : EGShaderProgram, texture : bool) extends EGShader<EGSimpleMaterial>(program) {
    static lazy val instanceForColor = EGBillboardShader(EGShaderProgram(
        vertexTextWith(false, "", ""),
        fragmentTextWith(false, "", "")), false)
    static lazy val instanceForTexture = EGBillboardShader(EGShaderProgram(
        vertexTextWith(true, "", ""),
        fragmentTextWith(true, "", "")), true)

    static def vertexTextWith(texture : bool, parameters : string, code : string) =
        "attribute vec3 position;
         attribute vec2 model;
         attribute vec2 vertexUV; $when(texture)
         attribute vec4 vertexColor;

         uniform mat4 wc;
         uniform mat4 p;

         varying vec2 UV; $when(texture)
         varying vec4 fragColor;
         $parameters

         void main(void) {
            float size = 0.03;
            vec4 pos = wc*vec4(position, 1);
            pos.x += model.x;
            pos.y += model.y;
            gl_Position = p*pos;
            UV = vertexUV;
            fragColor = vertexColor;
            $code
         }"
    static def fragmentTextWith(texture : bool, parameters : string, code : string) =
        "
        $if(texture)
         varying vec2 UV;
         uniform sampler2D texture;
        $else
         uniform vec4 color;
        $endif
         varying vec4 fragColor;

         $parameters
         void main(void) {
            gl_FragColor = fragColor * texture2D(texture, UV); $when(texture)
            gl_FragColor = fragColor * color; $when(!texture)
            $code
         }"


    val positionSlot = attributeFor("position")
    val modelSlot = attributeFor("model")
    val uvSlot : EGShaderAttribute? = if(texture) attributeFor("vertexUV") else nil
    val colorSlot = attributeFor("vertexColor")
    val colorUniform : EGShaderUniform? = if(texture) nil else uniformFor("color")

    val wcUniform = uniformFor("wc")
    val pUniform = uniformFor("p")

    def load(vertexBuffer : EGVertexBuffer<_>, material : EGSimpleMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, shift = 0)
        modelSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, shift = 3*4)
        colorSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 4, GL_FLOAT, shift = 5*4)
        wcUniform.set(matrix = EG.matrix.value.wc)
        pUniform.set(matrix = EG.matrix.value.p)
        if(texture) {
            uvSlot.for(_.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, shift = 9*4))
            material.color.cast<EGColorSourceTexture>.texture.bind
        } else {
            colorUniform.get.set(color = material.color.cast<EGColorSourceColor>.color)
        }
    }

    def unload(material : EGSimpleMaterial) {
        if(texture) EGTexture.unbind
    }
}

struct EGBillboardBufferData(position : EGVec3, model : EGVec2, color : EGVec4, uv : EGVec2)


class EGBillboardParticleSystem extends EGParticleSystem<EGBillboardParticle>


class EGBillboardParticle(lifeLength : float4) extends EGParticle(lifeLength) {
    var position : EGVec3
    var uv : EGQuad
    var model : EGQuad
    var color : EGVec4

    def writeTo(array : CNVoidRefArray) : CNVoidRefArray = {
        array
            .write(EGBillboardBufferData, EGBillboardBufferData(position, model.p1, color, uv.p1))
            .write(EGBillboardBufferData, EGBillboardBufferData(position, model.p2, color, uv.p2))
            .write(EGBillboardBufferData, EGBillboardBufferData(position, model.p3, color, uv.p3))
            .write(EGBillboardBufferData, EGBillboardBufferData(position, model.p4, color, uv.p4))
    }
}

class EGBillboardParticleSystemView(material : EGSimpleMaterial, blendFunc : EGBlendFunction)
    extends  EGParticleSystemView<EGBillboardParticle>(EGBillboardBufferData.type, blendFunc)
{
    static def apply(material : EGSimpleMaterial)  = EGBillboardParticleSystemView(material, EGBlendFunction.standard)
    val shader : EGShader =  EGBillboardShaderSystem.instance.shaderFor(material)
    val vertexCount : uint = 4

    def writeIndexesTo(indexPointer : CNVoidRefArray, i : uint4) : CNVoidRefArray = {
        indexPointer
            .write(uInt4 = i).write(uInt4 = i + 1).write(uInt4 = i + 2)
            .write(uInt4 = i + 2).write(uInt4 = i).write(uInt4 = i + 3)
    }
}