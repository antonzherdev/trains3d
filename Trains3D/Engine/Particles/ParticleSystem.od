package com.antonzherdev.eg

import core.math._


trait ParticleSystem <P extends Particle> extends Updatable {
    def particles : [P]

    def updateWith(delta : float) {
        particles.for(_.updateWith(delta))
    }
}

trait Particle extends Updatable  {
    def writeTo(array : VoidRefArray) : VoidRefArray
}


class EmissiveParticleSystem <P extends EmittedParticle> extends ParticleSystem<P> {
    private val _particles = MutableArray<P>()
    def particles : [P] = _particles

    def generateParticle : P
    def generateParticlesWith(delta : float) {}

    def emitParticle {
        _particles.append(generateParticle)
    }

    def updateWith(delta : float) {
        generateParticlesWith(delta)

        _particles.mutableFilter { p ->
            p.updateWith(delta)
            p.isLive
        }
    }

    def hasParticles = !_particles.isEmpty
}

class EmittedParticle(lifeLength : float4) extends Particle {
    private var _lifeTime : float4
    def lifeTime : float4 = _lifeTime

    def isLive : bool  = _lifeTime <= lifeLength

    def updateWith(delta : float) {
        _lifeTime += delta
        update(t = _lifeTime, dt = delta)
    }

    def update(t : float4, dt : float4)
    def writeTo(array : VoidRefArray) : VoidRefArray
}
