package com.antonzherdev.eg

import core.math._


class ParticleSystem <P extends Particle> extends Controller {
    private var _particles = List<P>()
    def particles : [P] = _particles

    def generateParticle : P
    def generateParticlesWith(delta : float) {}

    def emitParticle {
        _particles = List(generateParticle, _particles)
    }

    def updateWith(delta : float) {
        _particles = _particles.filter(_.isLive)
        generateParticlesWith(delta)

        var ps = List<P>()
        _particles.for{p ->
            p.updateWith(delta)
            if(p.isLive) ps = List<P>(p, ps)
        }
        _particles = ps
    }

    def hasParticles = !_particles.isEmpty
}

class Particle(lifeLength : float4) extends Controller {
    private var _lifeTime : float4
    def lifeTime : float4 = _lifeTime

    def writeTo(array : VoidRefArray) : VoidRefArray

    def isLive : bool  = _lifeTime <= lifeLength

    def updateWith(delta : float) {
        _lifeTime += delta
        update(t = _lifeTime, dt = delta)
    }

    def update(t : float4, dt : float4)
}


class ParticleSystemView<P extends Particle, D>(
    system : ParticleSystem<P>, vbDesc : VertexBufferDesc<D>, maxCount : uint,
    shader : Shader<_>, material : Material, blendFunc : BlendFunction)
{
    val vertexArr = VoidRefArray(vbDesc.dataType, maxCount*vertexCount)
    val vertexBuffer = VBO.mut<D>(vbDesc)
    val index : MutableIndexSourceGap = {
        val vc = vertexCount
        val ia = VoidRefArray(UInt4.type, maxCount*3*(vc - 2))
        var indexPointer = ia
        maxCount.range.for{i ->
            indexPointer = writeIndexesTo(indexPointer, i*vc)
        }
        val ib = IBO(ia)
        ia.free
        MutableIndexSourceGap(ib)
    }
    val vao = Mesh<D>(vertex = vertexBuffer, index).vao(shader)

    def vertexCount : uint
    def writeIndexesTo(indexPointer : VoidRefArray, i : uint4) : VoidRefArray

    def draw {
        val particles = system.particles
        if(particles.isEmpty) return nil

        context.depthTest.disabled{ context.cullFace.disabled{ blendFunc {
            var i = 0
            var vertexPointer = vertexArr
            particles.for{particle ->
                if(i < maxCount) vertexPointer = particle.writeTo(vertexPointer)
                i++
            }
            val n = particles.count.min(maxCount)
            val vc = vertexCount
            vertexBuffer.set(array = vertexArr)
            index.count = n*3*(vc - 2)
            vao.draw(material)
        }}}
    }

    def dealloc {
        vertexArr.free
    }
}