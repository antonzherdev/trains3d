package com.antonzherdev.eg

object BillboardShaderSystem extends ShaderSystem<ColorSource> {
    def shaderFor(material : ColorSource) : BillboardShader =
        if(material.texture.isEmpty) BillboardShader.instanceForColor else BillboardShader.instanceForTexture
}

class BillboardShader(program : ShaderProgram, texture : bool) extends Shader<ColorSource>(program) {
    static lazy val instanceForColor = BillboardShader(ShaderProgram(
        vertexTextWith(false, "", ""),
        fragmentTextWith(false, "", "")), false)
    static lazy val instanceForTexture = BillboardShader(ShaderProgram(
        vertexTextWith(true, "", ""),
        fragmentTextWith(true, "", "")), true)

    static def vertexTextWith(texture : bool, parameters : string, code : string) =
        "attribute vec3 position;
         attribute vec2 model;
         attribute vec2 vertexUV; $when(texture)
         attribute vec4 vertexColor;

         uniform mat4 wc;
         uniform mat4 p;

         varying vec2 UV; $when(texture)
         varying vec4 fragColor;
         $parameters

         void main(void) {
            float size = 0.03;
            vec4 pos = wc*vec4(position, 1);
            pos.x += model.x;
            pos.y += model.y;
            gl_Position = p*pos;
            UV = vertexUV;
            fragColor = vertexColor;
            $code
         }"
    static def fragmentTextWith(texture : bool, parameters : string, code : string) =
        "
        $if(texture)
         varying vec2 UV;
         uniform sampler2D texture;
        $endif
         uniform vec4 color;
         varying vec4 fragColor;

         $parameters
         void main(void) {
            gl_FragColor = fragColor * color * texture2D(texture, UV); $when(texture)
            gl_FragColor = fragColor * color; $when(!texture)
            $code
         }"


    val positionSlot = attributeFor("position")
    val modelSlot = attributeFor("model")
    val uvSlot : ShaderAttribute? = if(texture) attributeFor("vertexUV") else nil
    val colorSlot = attributeFor("vertexColor")
    val colorUniform : ShaderUniform = uniformFor("color")

    val wcUniform = uniformFor("wc")
    val pUniform = uniformFor("p")

    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, shift = vbDesc.position)
        modelSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.model)
        colorSlot.setFromBufferWith(vbDesc.stride, valuesCount = 4, GL_FLOAT, shift = vbDesc.color)
        wcUniform.set(matrix = matrix.value.wc)
        pUniform.set(matrix = matrix.value.p)
        if(texture) {
            uvSlot.for(_.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.uv))
            param.texture.get.bind
        }
        colorUniform.set(vec4 = param.color)
    }

    def unload(material : ColorSource) {
        if(texture) Texture.unbind
    }
}

struct BillboardBufferData(position : vec3, model : vec2, color : vec4, uv : vec2)


class BillboardParticleSystem extends ParticleSystem<BillboardParticle>


class BillboardParticle(lifeLength : float4) extends Particle(lifeLength) {
    var position : vec3
    var uv : Quad
    var model : Quad
    var color : vec4

    def writeTo(array : VoidRefArray) : VoidRefArray = {
        array
            .write(BillboardBufferData, BillboardBufferData(position, model.p[0], color, uv.p[0]))
            .write(BillboardBufferData, BillboardBufferData(position, model.p[1], color, uv.p[1]))
            .write(BillboardBufferData, BillboardBufferData(position, model.p[2], color, uv.p[2]))
            .write(BillboardBufferData, BillboardBufferData(position, model.p[3], color, uv.p[3]))
    }
}

class BillboardParticleSystemView(maxCount : uint, material : ColorSource, blendFunc : BlendFunction)
    extends  ParticleSystemView<BillboardParticle, BillboardBufferData>(Billboard.vbDesc, maxCount, blendFunc)
{

    static def apply(maxCount : uint, material : ColorSource) =
        BillboardParticleSystemView(maxCount, material, BlendFunction.standard)
    val shader : Shader =  BillboardShaderSystem.shaderFor(material)
    def vertexCount : uint = 4

    def writeIndexesTo(indexPointer : VoidRefArray, i : uint4) : VoidRefArray = {
        indexPointer
            .write(uInt4 = i).write(uInt4 = i + 1).write(uInt4 = i + 2)
            .write(uInt4 = i + 2).write(uInt4 = i).write(uInt4 = i + 3)
    }
}

object Billboard {
    static val vbDesc = VertexBufferDesc<BillboardBufferData>(BillboardBufferData.type,
        position = 0, uv = 9*4, normal = -1, color = 5*4, model = 3*4)
    private val vertexes = VoidRefArray(BillboardBufferData.type, 4)
    private val vb = VertexBuffer(vbDesc)
    def draw(material : ColorSource, at : vec3, rect : Rect) {
        draw(material, at, rect.quad, Rect(1, 1, -1, -1).quad)
    }

    def draw(material : ColorSource, at : vec3, quad : Quad, uv : Quad) {
        var v = vertexes
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[0], material.color, uv.p[0]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[1], material.color, uv.p[1]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[2], material.color, uv.p[2]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[3], material.color, uv.p[3]))
        vb.set(vertexes)

        glDisable(GL_CULL_FACE)
        BillboardShaderSystem.shaderFor(material).draw(material, vb, GL_TRIANGLE_STRIP)
        glEnable(GL_CULL_FACE)
    }
}