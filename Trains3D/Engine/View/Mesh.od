package com.antonzherdev.eg

struct MeshData(uv : vec2, normal : vec3, position : vec3)

trait VertexSource {
    def bindWith(shader : Shader<_>)
    def unbindWith(shader : Shader<_>) {}
    def count : uint
}

trait IndexSource {
    def draw
    def drawWith(start : uint, count : uint)
}

class Mesh<T>(vertexBuffer : VertexBuffer<T>, indexBuffer : IndexBuffer<uint4>) {
    static def vec2(vertexData : PArray<vec2>, indexData : PArray<uint4>) : Mesh<vec2> = Mesh<vec2>(
            vertexBuffer = VertexBuffer.vec2.set(vertexData),
            indexBuffer = IndexBuffer().set(indexData))

    static def apply(vertexData : PArray<MeshData>, indexData : PArray<uint4>) : Mesh<MeshData> = Mesh<MeshData>(
            vertexBuffer = VertexBuffer.mesh.set(vertexData),
            indexBuffer = IndexBuffer().set(indexData))

    static def apply<T>(desc : VertexBufferDesc<T>, vertexData : PArray<T>, indexData : PArray<uint4>) : Mesh<T> = Mesh<T>(
            vertexBuffer = VertexBuffer<T>(desc).set(vertexData),
            indexBuffer = IndexBuffer().set(indexData))

//    static def quad<T>(vertexBuffer : VertexBuffer<T>) : Mesh =
//        Mesh<T>(vertexBuffer, IndexBuffer().set([0, 1, 2, 2, 3, 0]))
}

class Buffer<T>(dataType : PType<T>, bufferType : uint4, handle : GLuint) {
    private var _length : uint = 0
    private var _count : uint = 0
    def length : uint = _length
    def count : uint = _count
    static def apply<T>(dataType : PType<T>, bufferType : uint4) : Buffer = Buffer<T>(dataType, bufferType, egGenBuffer)

    def dealoc {
        egDeleteBuffer(handle)
    }

    def set(data : PArray<T>) : self = set(data = data, GL_STATIC_DRAW)
    def set(array : VoidRefArray) : self = set(array = array, GL_STATIC_DRAW)

    def set(data : PArray<T>, usage : uint4) : self = {
        bind
        glBufferData(bufferType, data.length, data.bytes, usage)
        _length = data.length
        _count = data.count
        self
    }

    def set(array : VoidRefArray<T>, usage : uint4) : self = {
        bind
        glBufferData(bufferType, array.length, array.bytes, usage)
        _length = array.length
        _count = array.length/dataType.size
        self
    }

    def update(start : uint, count : uint, array : VoidRefArray<T>) : self = {
        bind
        glBufferSubData(bufferType, start*dataType.size, count*dataType.size, array.bytes)
        self
    }

    def bind {
        glBindBuffer(bufferType, handle)
    }

    def stride : uint4 = dataType.size
}

class VertexBufferDesc<T>(dataType : PType<T>, position : int4, uv : int4, normal : int4, color : int4, model : int4)
{
    def stride : uint4 = dataType.size

    static def Vec2 = VertexBufferDesc<vec2>(vec2.type, -1, 0, -1, -1, 0)
    static def Vec3 = VertexBufferDesc<vec3>(vec3.type, 0, 0, 0, -1, 0)
    static def Vec4 = VertexBufferDesc<vec4>(vec4.type, 0, 0, 0, 0, 0)
    static def mesh = VertexBufferDesc<MeshData>(MeshData.type, position = 5*4, uv = 0, normal = 2*4, color = -1, model = -1)
}


class VertexBuffer<T>(desc : VertexBufferDesc<T>, handle : GLuint) extends Buffer<T>(desc.dataType, GL_ARRAY_BUFFER, handle) with VertexSource {
    static def apply<T>(desc : VertexBufferDesc<T>) : VertexBuffer<T> = VertexBuffer<T>(desc, egGenBuffer)
    static def vec2 = VertexBuffer<vec2>(VertexBufferDesc.Vec2, egGenBuffer)
    static def vec3 = VertexBuffer<vec3>(VertexBufferDesc.Vec3, egGenBuffer)
    static def vec4 = VertexBuffer<vec4>(VertexBufferDesc.Vec4, egGenBuffer)
    static def mesh = VertexBuffer<MeshData>(VertexBufferDesc.mesh, egGenBuffer)

    def bind {
        context.bindVertexBuffer(self)
    }

    def bindWith(shader : Shader<_>) {
        context.bindVertexBuffer(self)
        shader.loadAttributes(desc)
    }
}

class IndexBuffer(handle : GLuint, mode : uint4) extends Buffer<uint4>(UInt4.type, GL_ELEMENT_ARRAY_BUFFER, handle) with IndexSource {
    static def apply : IndexBuffer = IndexBuffer(egGenBuffer, GL_TRIANGLES)

    def draw {
        bind
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, 0)
    }

    def drawWith(start : uint, count : uint) {
        bind
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, 4*start)
    }

    def bind {
        context.bindIndexBuffer(handle)
    }
}

class EmptyIndexSource(mode : uint4) extends IndexSource {
    static val triangleStrip = EmptyIndexSource(GL_TRIANGLE_STRIP)
    static val triangles = EmptyIndexSource(GL_TRIANGLES)
    static val lines = EmptyIndexSource(GL_LINES)

    def draw {
        glDrawArrays(mode, 0, context.vertexSource.count)
    }

    def drawWith(start : uint, count : uint) {
        glDrawArrays(mode, start, count)
    }
}

class ArrayIndexSource(array : PArray<uint4>, mode : uint4) extends IndexSource {
    def draw {
        context.bindIndexBuffer(0)
        glDrawElements(mode, array.count, GL_UNSIGNED_INT, array.bytes)
    }

    def drawWith(start : uint, count : uint) {
        context.bindIndexBuffer(0)
        glDrawElements(mode, count, GL_UNSIGNED_INT, array.bytes + 4*start)
    }
}

class VoidRefArrayIndexSource(array : VoidRefArray, mode : uint4) extends IndexSource {
    def draw {
        context.bindIndexBuffer(0)
        glDrawElements(mode, array.length/4, GL_UNSIGNED_INT, array.bytes)
    }

    def drawWith(start : uint, count : uint) {
        context.bindIndexBuffer(0)
        glDrawElements(mode, count, GL_UNSIGNED_INT, array.bytes + 4*start)
    }
}

class IndexSourceGap(source : IndexSource, start : uint4, count : uint4) extends IndexSource {
    def draw {
        source.drawWith(start, count)
    }

    def drawWith(start : uint, count : uint) {
        source.drawWith(self.start + start, count)
    }
}


class VertexArray(handle : GLuint, buffers : [VertexBuffer<_>]) extends VertexSource {
    static def apply(shader : Shader<_>, buffer : VertexBuffer<_>) = {
        val h = egGenVertexArray
        context.bindVertexArray(h)
        buffer.bind
        shader.loadAttributes(buffer.desc)
        context.bindDefaultVertexArray
        VertexArray(h, [buffer])
    }

    def bind {
        context.bindVertexArray(handle)
    }

    def bindWith(shader : Shader<_>) {
        context.bindVertexArray(handle)
    }

    def unbindWith(shader : Shader<_>) {
        context.bindDefaultVertexArray
    }

    def dealloc {
        egDeleteVertexArray(handle)
    }

    def count = buffers.head.count
}
