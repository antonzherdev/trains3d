package com.antonzherdev.eg

class ShadowMap(size : vec2i) extends Surface(size) {
    val frameBuffer = egGenFrameBuffer
    static val biasMatrix = mat4.identity.translate(0.5, 0.5, 0.5).scale(0.5, 0.5, 0.5)
    var biasDepthCp = mat4.identity

    val texture : Texture = {
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)

        val t = EmptyTexture(size)
        glBindTexture(GL_TEXTURE_2D, t.id)
        egInitShadowTexture(size)
        egCheckError
        egFramebufferTexture(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, t.id, 0)
//        glDrawBuffer(GL_NONE)
        val status = glCheckFramebufferStatus(GL_FRAMEBUFFER)
        if(status != GL_FRAMEBUFFER_COMPLETE) throw "Error in shadow map frame buffer: $status"

        glBindTexture(GL_TEXTURE_2D, 0)
        context.restoreDefaultFramebuffer
        t
    }

    def dealloc {
        egDeleteFrameBuffer(frameBuffer)
    }

    def bind {
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)
//        context.bindTexture(texture)
        context.pushViewport
        context.set(viewport = RectI(0, 0, size.x, size.y))
    }

    def unbind {
//        egDiscardFrameBuffer(GL_FRAMEBUFFER, [GL_DEPTH_ATTACHMENT])
        context.restoreDefaultFramebuffer
        context.popViewport
        egCheckError
    }

    private lazy val shader = ShadowSurfaceShader()
    private lazy val vao = BaseViewportSurface.fullScreenMesh.vao(ShadowSurfaceShader())
    def draw {
        context.cullFace.disabled {
            vao.draw(ColorSource(texture))
        }
    }
}

class ShadowSurfaceShaderBuilder extends ViewportShaderBuilder {
    def fragment =
       "$fragmentHeader
        $in vec2 UV;

        uniform sampler2D texture;

        void main(void) {
            vec4 col = $texture2D\(texture, UV);
            $fragColor = vec4(col.x, col.x, col.x, 1);
        }"
}

class ShadowSurfaceShader extends Shader<ColorSource>(ShadowSurfaceShaderBuilder().program) {
    val positionSlot = program.attributeFor("position")
    def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.model)
    }
    def loadUniforms(param : ColorSource) {
        context.bindTexture(param.texture.get)
    }
}


class ShadowShaderSystem extends ShaderSystem<ColorSource> {
    static val instance = ShadowShaderSystem()
    def shaderFor(param : ColorSource, renderTarget : RenderTarget) : ShadowShader =
        if(isColorShaderFor(param)) ShadowShader.instanceForColor else ShadowShader.instanceForTexture
    static def isColorShaderFor(param : ColorSource) = param.texture.isEmpty || param.alphaTestLevel < 0
}


class ShadowShaderText(texture : bool) extends ShaderTextBuilder {
    def vertex =
       "$vertexHeader
       $if(texture)
        $ain mediump vec2 vertexUV;
        $out mediump vec2 UV;
       $endif
        $ain highp vec3 position;
        uniform mat4 mwcp;

        void main(void) {
            gl_Position = mwcp * vec4(position, 1);
            UV = vertexUV;$when(texture)
        }"

    def fragment =
       "#version $version
       $if(texture)
        $in mediump vec2 UV;
        uniform lowp sampler2D texture;
        uniform lowp float alphaTestLevel;
       $endif
       $if(version > 100)
        out float depth;
       $endif

        void main(void) {
           $if(texture)
            if($texture2D\(texture, UV).a < alphaTestLevel) {
                discard;
            }
           $endif
           $if(version > 100)
            depth = gl_FragCoord.z;
           $endif
        }"

    def program = ShaderProgram("Shadow", vertex, fragment)
}

class ShadowShader(texture : bool, program : ShaderProgram) extends Shader<ColorSource>(program) {
    static val instanceForColor = ShadowShader(false, ShadowShaderText(false).program)
    static val instanceForTexture = ShadowShader(true, ShadowShaderText(true).program)

    val uvSlot : ShaderAttribute? = if(texture) attributeFor("vertexUV") else nil
    val positionSlot : ShaderAttribute = attributeFor("position")
    val mvpUniform = uniformMat4("mwcp")
    val alphaTestLevelUniform : ShaderUniformF4? = if(texture) uniformF4("alphaTestLevel") else nil

    def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        if(texture) {
            uvSlot.get.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, vbDesc.uv)
        }
    }
    def loadUniforms(param : ColorSource) {
        mvpUniform(matrix = matrix.value.mwcp)
        if(texture) {
            alphaTestLevelUniform.get.apply(f4 = param.alphaTestLevel)
            context.bindTexture(param.texture.get)
        }
    }
}

class ShadowDrawParam(percents : Seq<float4>)

class ShadowDrawShaderSystem extends ShaderSystem<ShadowDrawParam> {
    static val instance = ShadowDrawShaderSystem()
    def shaderFor(param : ShadowDrawParam, renderTarget : RenderTarget) : Shader<ShadowDrawParam> = {
        val lights = context.environment.lights
        val directLightsCount = lights.chain.filter(_.is<DirectLight> && _.hasShadows).count
        val key = ShadowDrawShaderKey(directLightsCount)

        shaders.objectFor(key, orUpdateWith = key.shader)
    }

    private static val shaders = MutableHashMap<ShadowDrawShaderKey, ShadowDrawShader>()
}
class ShadowDrawShaderKey(directLightCount : uint) extends ShaderTextBuilder {
    def shader : StandardShader = {
        val vertexShader =
            "$vertexHeader
             $ain highp vec3 position;
             uniform mat4 mwcp;
             $lightsVertexUniform
             $lightsOut

             void main(void) {
                gl_Position = mwcp * vec4(position, 1);
                $lightsCalculateVaryings
             }"
        val fragmentShader =
            "$fragmentHeader
             $shadowExt
             $lightsIn
             $lightsFragmentUniform

             void main(void) {
                lowp float visibility;
                lowp float a = 0.0;
                $lightsDiffuse
                $fragColor = vec4(0, 0, 0, a);
            }"
        ShadowDrawShader(self, ShaderProgram("ShadowDraw", vertexShader, fragmentShader))
    }

    def lightsVertexUniform : string = directLightCount.range.chain.map{i ->
        "uniform mat4 dirLightDepthMwcp$i;"}.toStringWith("\n")
    def lightsIn : string = directLightCount.range.chain.map{i ->
        "$in mediump vec3 dirLightShadowCoord$i;"}.toStringWith("\n")
    def lightsOut : string = directLightCount.range.chain.map{i ->
        "$out mediump vec3 dirLightShadowCoord$i;"}.toStringWith("\n")
    def lightsCalculateVaryings : string = directLightCount.range.chain.map{i ->
        "dirLightShadowCoord$i = (dirLightDepthMwcp$i * vec4(position, 1)).xyz;"
    }.toStringWith("\n")


    def lightsFragmentUniform : string = directLightCount.range.chain.map{i ->
        "uniform lowp float dirLightPercent$i;
         uniform mediump sampler2DShadow dirLightShadow$i;"}.toStringWith("\n")
    def lightsDiffuse : string =  directLightCount.range.chain.map{i ->
        "
        visibility = $shadow2D\(dirLightShadow$i, dirLightShadowCoord$i);
        a += (1.0 - visibility)*dirLightPercent$i;
        "
    }.toStringWith("\n")

}

class ShadowDrawShader(key : ShadowDrawShaderKey, program : ShaderProgram) extends Shader<ShadowDrawParam>(program) {
    val positionSlot : ShaderAttribute = attributeFor("position")

    val mwcpUniform = uniformMat4("mwcp")

    val directLightPercents : [ShaderUniformF4] = key.directLightCount.range.chain.map{i -> uniformF4("dirLightPercent$i")}.toArray
    val directLightDepthMwcp : [ShaderUniformMat4] = key.directLightCount.range.chain.map{i -> uniformMat4("dirLightDepthMwcp$i")}.toArray
    val directLightShadows : [ShaderUniformI4] = key.directLightCount.range.chain.map{i -> uniformI4("dirLightShadow$i")}.toArray


    def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
    }
    def loadUniforms(param : ShadowDrawParam) {
        mwcpUniform(matrix = matrix.value.mwcp)
        val env = context.environment
        var i : uint = 0
        env.lights.chain.filter(_.is<DirectLight> && _.hasShadows).for { light ->
            val p : float4  = param.percents(i)
            directLightPercents[i].apply(f4 = p)
            directLightDepthMwcp[i].apply(matrix = light.shadowMap.biasDepthCp * matrix.mw)
            directLightShadows[i].apply(i4 = i + 1)
            context.bindTexture(GL_TEXTURE0 + i + 1, GL_TEXTURE_2D, light.shadowMap.texture)
            i++
        }
    }
}