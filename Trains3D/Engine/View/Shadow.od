package com.antonzherdev.eg

class ShadowMap(size : vec2i) extends Surface(size) {
    val frameBuffer = egGenFrameBuffer
    static val biasMatrix = mat4.identity.translate(0.5, 0.5, 0.5).scale(0.5, 0.5, 0.5)
    var biasDepthCp = mat4.identity

    val texture : Texture = {
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)

        val t = Texture()
        glBindTexture(GL_TEXTURE_2D, t.id)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT16, size.x, size.y, 0, GL_DEPTH_COMPONENT, GL_FLOAT, 0)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
        egInitShadowTexture
        egFramebufferTexture(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, t.id, 0)
//        glDrawBuffer(GL_NONE)
        val status = glCheckFramebufferStatus(GL_FRAMEBUFFER)
        if(status != GL_FRAMEBUFFER_COMPLETE) throw "Error in shadow map frame buffer: $status"

        glBindTexture(GL_TEXTURE_2D, 0)
        context.restoreDefaultFramebuffer
        t
    }

    def dealloc {
        egDeleteFrameBuffer(frameBuffer)
    }

    def bind {
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)
        texture.bind
        context.pushViewport
        context.set(viewport = RectI(0, 0, size.x, size.y))
    }

    def unbind {
        glFlush
        context.restoreDefaultFramebuffer
        context.popViewport
    }

    private lazy val shader = ShadowSurfaceShader()
    def draw {
        glDisable(GL_CULL_FACE)
        shader.draw(ColorSource(texture), BaseViewportSurface.fullScreenMesh)
        glEnable(GL_CULL_FACE)
    }
}

class ShadowSurfaceShaderBuilder extends ViewportShaderBuilder {
    def fragment =
       "$fragmentHeader
        $in vec2 UV;

        uniform sampler2D texture;

        void main(void) {
            vec4 col = $texture2D\(texture, UV);
            $fragColor = vec4(col.x, col.x, col.x, 1);
        }"
}

class ShadowSurfaceShader extends Shader<ColorSource>(ShadowSurfaceShaderBuilder().program) {
    val positionSlot = program.attributeFor("position")
    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        param.texture.get.bind
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.model)
    }

    def unload(param : ViewportSurfaceShaderParam) {
        Texture.unbind
        positionSlot.unbind
    }
}


object ShadowShaderSystem extends ShaderSystem<ColorSource> {
    def shaderFor(param : ColorSource) : ShadowShader =
        if(isColorShaderFor(param)) ShadowShader.instanceForColor else ShadowShader.instanceForTexture
    def isColorShaderFor(param : ColorSource) = param.texture.isEmpty || param.alphaTestLevel < 0
}


class ShadowShader(texture : bool, program : ShaderProgram) extends Shader<ColorSource>(program) {
    static val instanceForColor = ShadowShader(false, ShaderProgram(vertexProgram(false), fragmentProgram(false)))
    static val instanceForTexture = ShadowShader(true, ShaderProgram(vertexProgram(true), fragmentProgram(true)))

    private static def vertexProgram(texture : bool) =
        "#version 150
         in vec2 vertexUV;$when(texture)
         in vec3 position;
         uniform mat4 mwcp;

         out vec2 UV;$when(texture)

         void main(void) {
             gl_Position = mwcp * vec4(position, 1);
             UV = vertexUV;$when(texture)
         }"
    private static def fragmentProgram(texture : bool) =
        "#version 150
        $if(texture)
         in vec2 UV;
         uniform sampler2D texture;
         uniform float alphaTestLevel;
        $endif
         out float depth;

         void main(void) {
        $if(texture)
             if(texture(texture, UV).a < alphaTestLevel) {
                 discard;
             }
        $endif
             depth = gl_FragCoord.z;
         }"
    val uvSlot : ShaderAttribute? = if(texture) attributeFor("vertexUV") else nil
    val positionSlot : ShaderAttribute = attributeFor("position")
    val mvpUniform = uniformFor("mwcp")
    val alphaTestLevelUniform : ShaderUniform? = if(texture) uniformFor("alphaTestLevel") else nil

    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mvpUniform.set(matrix = matrix.value.mwcp)
        if(texture) {
            uvSlot.get.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, vbDesc.uv)
            alphaTestLevelUniform.get.set(f4 = param.alphaTestLevel)
            param.texture.get.bind
        }
    }

    def unload(param : ColorSource) {
        Texture.unbind
        positionSlot.unbind
        uvSlot.for(_.unbind)
    }
}

class ShadowDrawParam(percents : Seq<float4>)

object ShadowDrawShaderSystem extends ShaderSystem<ShadowDrawParam> {
    def shaderFor(param : ShadowDrawParam) : Shader<ShadowDrawParam> = {
        val lights = context.environment.lights
        val directLightsCount = lights.chain.filter(_.is<DirectLight> && _.hasShadows).count
        val key = ShadowDrawShaderKey(directLightsCount)

        shaders.objectFor(key, orUpdateWith = key.shader)
    }

    private static val shaders = MutableHashMap<ShadowDrawShaderKey, ShadowDrawShader>()
}
class ShadowDrawShaderKey(directLightCount : uint)  {
    def shader : StandardShader = {
        val vertexShader =
            "#version 150
             in vec3 position;
             uniform mat4 mwcp;
             $lightsVertexUniform
             $lightsOut

             void main(void) {
                gl_Position = mwcp * vec4(position, 1);
                $lightsCalculateVaryings
             }"
        val fragmentShader =
            "#version 150
             $lightsIn
             $lightsFragmentUniform
             out vec4 outColor;

             void main(void) {
                float visibility;
                float a = 0;
                $lightsDiffuse
                outColor = vec4(0, 0, 0, a);
            }"
        ShadowDrawShader(self, ShaderProgram(vertexShader, fragmentShader))
    }

    def lightsVertexUniform : string = directLightCount.range.chain.map{i ->
        "uniform mat4 dirLightDepthMwcp$i;"}.toStringWith("\n")
    def lightsIn : string = directLightCount.range.chain.map{i ->
        "in vec3 dirLightShadowCoord$i;"}.toStringWith("\n")
    def lightsOut : string = directLightCount.range.chain.map{i ->
        "out vec3 dirLightShadowCoord$i;"}.toStringWith("\n")
    def lightsCalculateVaryings : string = directLightCount.range.chain.map{i ->
        "dirLightShadowCoord$i = (dirLightDepthMwcp$i * vec4(position, 1)).xyz;"
    }.toStringWith("\n")


    def lightsFragmentUniform : string = directLightCount.range.chain.map{i ->
        "uniform float dirLightPercent$i;
         uniform sampler2DShadow dirLightShadow$i;"}.toStringWith("\n")
    def lightsDiffuse : string =  directLightCount.range.chain.map{i ->
        "
        visibility = texture(dirLightShadow$i, vec3(dirLightShadowCoord$i.xy, dirLightShadowCoord$i.z - 0.005));
        a += (1 - visibility)*dirLightPercent$i;
        "
    }.toStringWith("\n")

}

class ShadowDrawShader(key : ShadowDrawShaderKey, program : ShaderProgram) extends Shader<ShadowDrawParam>(program) {
    val positionSlot : ShaderAttribute = attributeFor("position")

    val mwcpUniform : ShaderUniform = uniformFor("mwcp")

    val directLightPercents : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightPercent$i")}.toArray
    val directLightDepthMwcp : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightDepthMwcp$i")}.toArray
    val directLightShadows : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightShadow$i")}.toArray

    def load(vbDesc :VertexBufferDesc<_>, param : ShadowDrawParam) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mwcpUniform.set(matrix = matrix.value.mwcp)
        val env = context.environment
        var i : uint = 0
        env.lights.chain.filter(_.is<DirectLight> && _.hasShadows).for { light ->
            val p : float4 = param.percents(i)
            directLightPercents[i].set(f4 = p)
            directLightDepthMwcp[i].set(matrix = light.shadowMap.biasDepthCp * matrix.mw)
            directLightShadows[i].set(i4 = i + 1)
            glActiveTexture(GL_TEXTURE0 + i + 1)
            light.shadowMap.texture.bind
            glActiveTexture(GL_TEXTURE0)
            i++
        }
    }

    def unload(param : ShadowDrawParam) {
        positionSlot.unbind
    }
}