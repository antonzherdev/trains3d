package com.antonzherdev.eg

class Texture {
    val id : GLuint = egGenTexture

    def bind {
        bind(GL_TEXTURE_2D)
    }

    def size : vec2

    def bind(target : uint4) {
//        glEnable(target)
        glBindTexture(target, id)
    }

    def dealloc {
        egDeleteTexture(id)
    }

    static def unbind {
        unbind(GL_TEXTURE_2D)
    }

    static def unbind(target : uint4) {
        glBindTexture(target, 0)
//        glDisable(target)
    }

    def apply(draw: () -> void) {
        apply(GL_TEXTURE_2D, draw)
    }

    def apply(target : uint4, draw: () -> void) {
        bind(target)
        draw()
        unbind(target)
    }

    def saveTo(file : string) {
        egSaveTextureToFile(id, file)
    }

    def uv(rect : Rect) : Rect = rect/size
    def uv(x : float4, y : float4, width : float4, height : float4) : Rect = Rect(x, y, width, height)/size
}

class FileTexture(file : string, magFilter : uint4, minFilter : uint4) extends Texture {
    private var _loaded = false
    private var _size : vec2

    static def apply(file : string) = FileTexture(file, GL_LINEAR, GL_LINEAR_MIPMAP_LINEAR)

    private def load {
        _size = egLoadTextureFromFile(id, Bundle.fileNameFor(file), magFilter, minFilter)
        _loaded = true
    }

    def size : vec2 = {
        if(!_loaded) load
        _size
    }
    def bind(target : uint4) {
        if(!_loaded) load
//        glEnable(target)
        glBindTexture(target, id)
    }
}