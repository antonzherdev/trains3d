package com.antonzherdev.eg

class Texture {
    def id : uint4
    def size : vec2
    def scale : float = 1.0
    def scaledSize : vec2 = size/scale

    def dealloc {
        deleteTexture
    }

    def deleteTexture {
        context.deleteTexture(id)
    }

    def saveTo(file : string) {
        TextureService.egSaveTextureToFile(id, file)
    }

    def uv : Rect = Rect(0, 0, 1, 1)
    def uv(rect : Rect) : Rect = rect/scaledSize
    def uv(x : float4, y : float4, width : float4, height : float4) : Rect = uv(Rect(x, y, width, height))

    def region(x : float4, y : float4, width : float, height : float4) = TextureRegion(self, Rect(x, y, width, height)/scaledSize)
}

class EmptyTexture(size : vec2) extends Texture {
    val id : uint4 = egGenTexture
}

class FileTexture(name : string, fileFormat : TextureFileFormat, format : TextureFormat, scale : float, filter : TextureFilter) extends Texture {
    val id : uint4 = egGenTexture
    private var _size : vec2

    def init {
        _size = TextureService.egLoadTextureFromFile(id, name, fileFormat, scale, format, filter)
    }

    def size : vec2 = _size
}

enum TextureFileFormat(extension : string) {
    PNG("png")
    JPEG("jpg")
    compressed("?")
}

enum TextureFormat {
    RGBA8888()
}

enum TextureFilter(magFilter : uint4, minFilter : uint4) {
    nearest(GL_NEAREST, GL_NEAREST)
    linear(GL_LINEAR, GL_LINEAR)
    mipmapNearest(GL_LINEAR, GL_LINEAR_MIPMAP_NEAREST)
}

class TextureRegion(texture : Texture, uv : Rect) extends Texture {
    static def apply(texture : Texture) : TextureRegion = TextureRegion(texture, Rect(0, 0, 1, 1))
    val id : uint4 = texture.id
    val size : vec2 = texture.size * uv.size
    def scale : float = texture.scale
    def deleteTexture {}
}