import CNFile

import EGGL
import EGBuffer
import EGMatrix

class EGShaderProgram(handle : GLuint) {
    static def loadFromFiles(vertex : string, fragment : string) : EGShaderProgram =
        linkFromStrings(CNBundle.readToString(vertex), CNBundle.readToString(fragment))

    static def linkFromStrings(vertex : string, fragment : string) : EGShaderProgram =  {
        val vertexShader = compileShaderFor(GL_VERTEX_SHADER, vertex)
        val fragmentShader = compileShaderFor(GL_FRAGMENT_SHADER, fragment)
        val program = linkFromShaders(vertexShader, fragmentShader)
        glDeleteShader(vertexShader)
        glDeleteShader(fragmentShader)
        program
    }


    static def linkFromShaders(vertex : GLuint, fragment : GLuint) : EGShaderProgram = {
        val handle = glCreateProgram
        glAttachShader(handle, vertex)
        glAttachShader(handle, fragment)
        glLinkProgram(handle)
        egGetProgramError(handle).for(throw "Error in shader program linking: " + _)
        EGShaderProgram(handle)
    }

    static def compileShaderFor(shaderType : GLenum, source : string) : GLuint = {
        val shader = glCreateShader(shaderType)
        egShaderSource(shader, source)
        glCompileShader(shader)
        egGetShaderError(shader).for(throw  "Error in shader compiling : " + _ + source)
        shader
    }

    def dealoc {
        glDeleteProgram(handle)
    }

    def set {
        glUseProgram(handle)
    }

    def clear {
        glUseProgram(0)
    }

    def draw(f : () -> void) {
        glUseProgram(handle)
        f()
        glUseProgram(0)
    }

    def attributeFor(name : string ) = {
        val ret = EGShaderAttribute(egGetAttribLocation(handle, name))
        glEnableVertexAttribArray(ret.handle)
        ret
    }
    def uniformFor(name : string ) = EGShaderUniform(egGetUniformLocation(handle, name))
}

class EGShader(program : EGShaderProgram) {
    def draw(f : () -> void) {
        glUseProgram(program.handle)
        load
        f()
        glUseProgram(0)
    }

    def set {
        glUseProgram(program.handle)
        load
    }

    def load

    def clear {
        glUseProgram(0)
    }

    def attributeFor(name : string ) = program.attributeFor(name)
    def uniformFor(name : string ) = program.uniformFor(name)
}

class EGShaderAttribute(handle : GLint) {
    def setFrom(buffer : EGBuffer, valuesCount : uint, valuesType : GLenum, shift : uint) : uint = {
        egVertexAttribPointer(handle, valuesCount, valuesType, GL_FALSE, buffer.stride, shift)
        if(valuesType == GL_DOUBLE) valuesCount*8 + shift
        else if(valuesType == GL_FLOAT) valuesCount*4 + shift
        else if(valuesType == GL_BYTE) valuesCount + shift
        else if(valuesType == GL_UNSIGNED_BYTE) valuesCount + shift
        else throw "Unknown type"
    }
}

class EGShaderUniform(handle : GLint) {
    def set(matrix : EGMatrix) {
        glUniformMatrix4fv(handle, 1, GL_FALSE, matrix.m)
    }
}
