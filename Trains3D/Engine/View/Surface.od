package com.antonzherdev.eg

class Surface(size : vec2i) {
    private val frameBuffer = egGenFrameBuffer
    val texture = {
        val t = Texture()
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)
        glBindTexture(GL_TEXTURE_2D, t.id)

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, size.x, size.y, 0, GL_RGBA, GL_UNSIGNED_BYTE, 0)
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, t.id, 0)

        glBindTexture(GL_TEXTURE_2D, 0)
        glBindFramebuffer(GL_FRAMEBUFFER, 0)
        t
    }

    def dealloc {
        egDeleteFrameBuffer(frameBuffer)
    }

    def apply(draw : () -> void) {
        bind
        draw()
        unbind
    }

    def bind {
        glPushAttrib(GL_VIEWPORT_BIT)
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)
        glViewport(0, 0, size.x, size.y)
    }

    def unbind {
        glBindFramebuffer(GL_FRAMEBUFFER, 0)
        glPopAttrib
    }


    private lazy val fullScreenVertexBuffer = VertexBuffer(vec2.type).set([0, 0, 1, 0, 1, 1, 0, 1])
    private lazy val fullScreenIndexBuffer = IndexBuffer().set([0, 1, 2, 2, 3, 0])
    private lazy val shader = SurfaceShader()
    def drawFullScreen {
        texture {
            fullScreenVertexBuffer {
                shader {
                    fullScreenIndexBuffer.draw
                }
            }
        }
    }
}

class SurfaceShader {
    static val vertex =
        "attribute vec2 position;
         varying vec2 UV;

         void main(void) {
            gl_Position = vec4(2.0*position.x - 1.0, 2.0*position.y - 1.0, 0, 1);
            UV = position;
        }"
    static val fragment =
        "varying vec2 UV;

         uniform sampler2D texture;

         void main(void) {
            gl_FragColor = texture2D(texture, UV);
         }"
    val program = ShaderProgram(vertex, fragment)
    val positionSlot = program.attributeFor("position")
    def apply(draw : () -> void) {
        program {
            positionSlot.setFromBufferWith(stride = 2*4, valuesCount = 2, GL_FLOAT, shift = 0)
            draw()
        }
    }
}

class FullScreenSurface {
    private var surface : Surface? = nil

    def bind {

    }

    def apply(draw : () -> void) {
        bind
        draw()
        unbind
    }

    def unbind {
        surface.get.unbind
    }
}