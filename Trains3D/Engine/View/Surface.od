package com.antonzherdev.eg

class Surface(size : vec2i) {
    def apply(draw : () -> void) {
        bind
        draw()
        unbind
    }

    def bind

    def unbind

    def frameBuffer : int4

    def init {
        if(size.x <= 0 || size.y <= 0) throw "Invalid surface size"
    }
}

class SimpleSurface(size : vec2i, depth : bool) extends Surface(size) {
    val frameBuffer = egGenFrameBuffer
    private val depthRenderBuffer : uint4 = if(depth) egGenRenderBuffer else 0
    val texture = {
        val t = EmptyTexture(size)
        glGetError
        glFlush
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)
        glBindTexture(GL_TEXTURE_2D, t.id)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, size.x, size.y, 0, GL_RGBA, GL_UNSIGNED_BYTE, VoidRef(0))
        if(glGetError != 0) {
            val e = "Error in texture creation for surface with size $(size.x)x$(size.y)"
            throw e
        }
        egFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, t.id, 0)
        val status = glCheckFramebufferStatus(GL_FRAMEBUFFER)
        if(status != GL_FRAMEBUFFER_COMPLETE) throw "Error in frame buffer color attachment: $status"
        if(depth) {
            glBindRenderbuffer(GL_RENDERBUFFER, depthRenderBuffer)
            glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, size.x, size.y)
            glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depthRenderBuffer)
            val status2 = glCheckFramebufferStatus(GL_FRAMEBUFFER)
            if(status2 != GL_FRAMEBUFFER_COMPLETE) throw "Error in frame buffer depth attachment: $status"
        }

        glBindTexture(GL_TEXTURE_2D, 0)
        context.restoreDefaultFramebuffer
        t
    }

    def dealloc {
        egDeleteFrameBuffer(frameBuffer)
        if(depth) egDeleteRenderBuffer(depthRenderBuffer)
    }

    def bind {
        glFlush
        glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer)
        context.pushViewport
        context.set(viewport = RectI(0, 0, size.x, size.y))
    }

    def unbind {
        context.restoreDefaultFramebuffer
        context.popViewport
    }

}

class ViewportSurfaceShaderParam(texture : Texture, z : float4)

class ViewportShaderBuilder extends ShaderTextBuilder {
    def vertex =
       "$vertexHeader

        $ain highp vec2 position;
        uniform lowp float z;
        $out mediump vec2 UV;

        void main(void) {
           gl_Position = vec4(2.0*position.x - 1.0, 2.0*position.y - 1.0, z, 1);
           UV = position;
        }"
    def fragment =
       "$fragmentHeader
        $in mediump vec2 UV;

        uniform lowp sampler2D txt;

        void main(void) {
            $fragColor = $texture2D\(txt, UV);
        }"
    def program = ShaderProgram("Viewport", vertex, fragment)
}

class ViewportSurfaceShader extends Shader<ViewportSurfaceShaderParam>(ViewportShaderBuilder().program) {
    static val instance = ViewportSurfaceShader()
    val positionSlot = attributeFor("position")
    val zUniform = uniformF4("z")
    def loadAttributes(vbDesc : VertexBufferDesc<_>) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, shift = vbDesc.model)
    }

    def loadUniforms(param : ViewportSurfaceShaderParam) {
        context.bindTexture(param.texture)
        zUniform(f4 = param.z)
    }
}

class BaseViewportSurface {
    private var _surface : Surface? = nil
    def surface : Surface? = _surface

    private def maybeRecreateSurface {
        if(needRedraw) {
            _surface = createSurface
        }
    }

    def createSurface : Surface

    def needRedraw : bool = _surface.isEmpty || _surface.get.size != context.viewport.size

    def bind {
        maybeRecreateSurface
        _surface.get.bind
    }

    def apply(draw : () -> void) {
        bind
        draw()
        unbind
    }

    def maybe(draw : () -> void) {
        maybe(force = false, draw)
    }

    private var redrawCounter = 0 // To prevent slow resizing
    def maybe(force : bool, draw : () -> void) {
        val nr = needRedraw
        if(nr || redrawCounter > 0) redrawCounter++
        if((force && !nr) || redrawCounter > 10 || _surface.isEmpty) {
            apply(draw)
            redrawCounter = 0
        }
    }

    def unbind {
        _surface.get.unbind
    }

    static lazy val fullScreenMesh = Mesh(
        VBO.vec2([vec2(0, 0), vec2(1, 0), vec2(0, 1), vec2(1, 1)]),
        EmptyIndexSource.triangleStrip)
    static lazy val fullScreenVao = fullScreenMesh.vao(ViewportSurfaceShader.instance)
}

