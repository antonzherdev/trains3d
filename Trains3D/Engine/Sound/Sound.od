package com.antonzherdev.eg

trait SoundPlayer extends Updatable {
    def start{}
    def stop{}
    def pause{}
    def resume{}
    def updateWith(delta : float) {}
}

class BackgroundSoundPlayer(sound : Sound) extends SoundPlayer {
    def start {
        sound.playAlways
    }
    def stop {
        sound.stop
    }
    def pause {
        sound.pause
    }
    def resume {
        sound.play
    }
}

class SoundPlayersCollection(players : [SoundPlayer]) extends SoundPlayer {
    def start {
        players.for(_.start)
    }
    def stop {
        players.for(_.stop)
    }
    def pause {
        players.for(_.pause)
    }
    def resume {
        players.for(_.resume)
    }
    def updateWith(delta : float) {
        players.for(_.updateWith(delta))
    }
}

class SporadicSoundPlayer(sound : Sound, secondsBetween : float/*average seconds amount between playings*/) extends SoundPlayer {
    private var _timeToNextPlaying : float = 0

    def start {
        _timeToNextPlaying = Float.rnd(0, secondsBetween*2)
    }
    def stop {
        sound.stop
    }

    private var wasPlaying = false
    def pause {
        wasPlaying = sound.isPlaying
        sound.pause
    }
    def resume {
        if(wasPlaying) sound.play
    }
    def updateWith(delta : float) {
        if(!sound.isPlaying) {
            _timeToNextPlaying -= delta
            if(_timeToNextPlaying <= 0) {
                sound.play
                _timeToNextPlaying = Float.rnd(0, secondsBetween*2)
            }
        }
    }
}

class NotificationSoundPlayer<S, D>(sound : Sound, notificationHandle : NotificationHandle<S, D>, condition : (S, D) -> bool) extends  SoundPlayer {
    static def apply<S, D>(sound : Sound, notificationHandle : NotificationHandle<S, D>) : NotificationSoundPlayer<S, D> = {
        NotificationSoundPlayer<S, D>(sound, notificationHandle, true)
    }

    private var obs : NotificationObserver?
    def start {
        obs = notificationHandle.observe{ sender, data ->
            if(condition(sender, data)) sound.play
        }
    }
    def stop {
        obs.for(_.detach)
        obs = nil
        sound.stop
    }

    private var wasPlaying = false
    def pause {
        wasPlaying = sound.isPlaying
        sound.pause
    }
    def resume {
        if(wasPlaying) sound.play
    }
}

class SoundParallel(limit : int, create : void -> Sound) {
    private val sounds  = MArray<Sound>()

    def play {
        sound.for(_.play)
    }

    private var paused : [Sound] = []
    def pause{
        paused += sounds.chain.filter { sound ->
            if(sound.isPlaying) {
                sound.pause
                true
            } else false
        }.toArray
    }
    def resume {
        paused.for(_.play)
        paused = []
    }

    def playWith(volume : float4) {
        sound.for{s ->
            s.volume = volume
            s.play
        }
    }

    def sound : Sound? = {
        val s = sounds.find(!_.isPlaying)
        if(s.isDefined) s
        else if(sounds.count >= limit) nil
        else {
            val newSound = create()
            sounds.append(newSound)
            newSound
        }
    }
}