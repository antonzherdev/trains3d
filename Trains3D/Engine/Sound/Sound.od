package com.antonzherdev.eg

trait SoundPlayer extends Controller {
    def start{}
    def stop{}
    def pause{}
    def resume{}
    def updateWith(delta : float) {}
}

class BackgroundSoundPlayer(sound : Sound) extends SoundPlayer {
    def start {
        sound.playAlways
    }
    def stop {
        sound.stop
    }
    def pause {
        sound.pause
    }
    def resume {
        sound.play
    }
}

class SoundPlayersCollection(players : [SoundPlayer]) extends SoundPlayer {
    def start {
        players.for(_.start)
    }
    def stop {
        players.for(_.stop)
    }
    def pause {
        players.for(_.pause)
    }
    def resume {
        players.for(_.resume)
    }
    def updateWith(delta : float) {
        players.for(_.updateWith(delta))
    }
}

class SporadicSoundPlayer(sound : Sound, secondsBetween : float/*average seconds amount between playings*/) extends SoundPlayer {
    private var _timeToNextPlaying : float = 0

    def start {
        _timeToNextPlaying = Float.rnd(0, secondsBetween*2)
    }
    def stop {
        sound.stop
    }

    private var wasPlaying = false
    def pause {
        wasPlaying = sound.isPlaying
        sound.pause
    }
    def resume {
        if(wasPlaying) sound.play
    }
    def updateWith(delta : float) {
        if(!sound.isPlaying) {
            _timeToNextPlaying -= delta
            if(_timeToNextPlaying <= 0) {
                sound.play
                _timeToNextPlaying = Float.rnd(0, secondsBetween*2)
            }
        }
    }
}