import EGBentleyOttmann
import CNTest
import EGFigure
import EGTypes


class EGBentleyOttmannTest extends CNTestCase {
    def testMain {
        val r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (2, EGLineSegment.newWith(-2, 1, 2, 1)),
            (3, EGLineSegment.newWith(-2, 2, 1, -1))
        ])
        val e = [
            EGIntersection(EGPoint(1, 1), [1, 2]),
            EGIntersection(EGPoint(0, 0), [1, 3]),
            EGIntersection(EGPoint(-1, 1), [2, 3])
        ]
        assertEquals(e, r)
    }

    def testNoCross {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (3, EGLineSegment.newWith(-2, 2, 0, 0))
        ])
        assertEquals([], r)
    }

    def testVertical {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (2, EGLineSegment.newWith(1, -2, 1, 2))
        ])
        val e = [
            EGIntersection(EGPoint(1, 1), [1, 2])
        ]
        assertEquals(e, r)
    }

    def testOneStart {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, 1, 1, -1)),
            (2, EGLineSegment.newWith(-1, 1, 1, 1)),
            (3, EGLineSegment.newWith(-1, -1, 2, 2))
        ])
        val e = [
            EGIntersection(EGPoint(0, 0), [1, 3]),
            EGIntersection(EGPoint(1, 1), [2, 3])
        ]
        assertEquals(e, r)
    }

    def testOneEnd {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-2, 1, 1, 1)),
            (2, EGLineSegment.newWith(-1, -1, 1, 1)),
            (3, EGLineSegment.newWith(-2, 2, 2, -2))
        ])
        val e = [
            EGIntersection(EGPoint(-1, 1), [1, 3]),
            EGIntersection(EGPoint(0, 0), [2, 3])
        ]
        assertEquals(e, r)
    }

    def testSameLines {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, 1, 1, -1)),
            (2, EGLineSegment.newWith(-1, 1, 1, -1)),
            (3, EGLineSegment.newWith(-1, -1, 2, 2))
        ])
        val e = [
            EGIntersection(EGPoint(0, 0), [1, 3]),
            EGIntersection(EGPoint(0, 0), [2, 3])
        ]
        assertEquals(e, r)
    }
}