import EGBentleyOttmann
import CNTest
import CNPair
import EGFigure
import EGTypes
import CNSet


class EGBentleyOttmannTest extends CNTestCase {
    def testMain {
        val r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (2, EGLineSegment.newWith(-2, 1, 2, 1)),
            (3, EGLineSegment.newWith(-2, 2, 1, -1))
        ])
        val e = [
            EGIntersection(CNPair.newWith(1, 2), EGVec2(1, 1)),
            EGIntersection(CNPair.newWith(1, 3), EGVec2(0, 0)),
            EGIntersection(CNPair.newWith(2, 3), EGVec2(-1, 1))
        ].toSet
        assertEquals(e, r)
    }

    def testInPoint {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (3, EGLineSegment.newWith(-2, 2, 0, 0))
        ])
        assertEquals([
            EGIntersection(CNPair.newWith(1, 3), EGVec2(0, 0))
        ].toSet, r)
    }

    def testNoCross {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (3, EGLineSegment.newWith(-1, -1, 2, 0))
        ])
        assertEquals([].toSet, r)
    }

    def testVertical {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, -1, 2, 2)),
            (2, EGLineSegment.newWith(1, -2, 1, 2)),
            (3, EGLineSegment.newWith(1, -4, 1, 0)),
            (4, EGLineSegment.newWith(-1, -1, 2, -4)),
            (5, EGLineSegment.newWith(-1, -1, 2, -1))
        ])
        val e = [
            EGIntersection(CNPair.newWith(3, 4), EGVec2(1, -3)),
            EGIntersection(CNPair.newWith(2, 5), EGVec2(1, -1)),
            EGIntersection(CNPair.newWith(1, 2), EGVec2(1, 1)),
            EGIntersection(CNPair.newWith(3, 5), EGVec2(1, -1))
        ].toSet
        assertEquals(e, r)
    }

    def testVerticalInPoint {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(0, 0, 0, 1)),
            (2, EGLineSegment.newWith(-1, 1, 1, 1)),
            (3, EGLineSegment.newWith(-1, 0, 1, 0))
        ])
        val e = [
            EGIntersection(CNPair.newWith(1, 2), EGVec2(0, 1)),
            EGIntersection(CNPair.newWith(1, 3), EGVec2(0, 0))
        ].toSet
        assertEquals(e, r)
    }

    def testOneStart {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, 1, 1, -1)),
            (2, EGLineSegment.newWith(-1, 1, 2, 1)),
            (3, EGLineSegment.newWith(-1, -1, 2, 2))
        ])
        val e = [
            EGIntersection(CNPair.newWith(1, 3), EGVec2(0, 0)),
            EGIntersection(CNPair.newWith(2, 3), EGVec2(1, 1))
        ].toSet
        assertEquals(e, r)
    }

    def testOneEnd {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-2, 1, 1, 1)),
            (2, EGLineSegment.newWith(-1, -1, 1, 1)),
            (3, EGLineSegment.newWith(-2, 2, 2, -2))
        ])
        val e = [
            EGIntersection(CNPair.newWith(1, 3), EGVec2(-1, 1)),
            EGIntersection(CNPair.newWith(2, 3), EGVec2(0, 0))
        ].toSet
        assertEquals(e, r)
    }

    def testSameLines {
        var r = EGBentleyOttmann.intersectionsFor([
            (1, EGLineSegment.newWith(-1, 1, 1, -1)),
            (2, EGLineSegment.newWith(-1, 1, 1, -1)),
            (3, EGLineSegment.newWith(-1, -1, 2, 2))
        ])
        val e = [
            EGIntersection(CNPair.newWith(1, 2), EGVec2(0, 0)),
            EGIntersection(CNPair.newWith(2, 3), EGVec2(0, 0)),
            EGIntersection(CNPair.newWith(1, 3), EGVec2(0, 0))
        ].toSet
        assertEquals(e, r)
    }
}