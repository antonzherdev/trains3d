package com.antonzherdev.eg

import test._

class EGDynamicTest extends CNTestCase {
    def runSecondIn(world : EGDynamicWorld<_>) {
        30.range.for(world.updateWith(delta = 1.0/30.0))
    }

    def testSimple {
        val world = EGDynamicWorld<int>(Vec3(0, -10, 0))
        val shape = EGCollisionBox(Vec3(0.5, 0.5, 0.5))
        val body = EGRigidBody.dynamic<int>(1, shape, 1)
        world.add(body)
        body.matrix = Matrix.identity.translate(0, 5, 0)

        var m = body.matrix
        assertTrue(m.array[13] == 5)

        var v = body.velocity
        assertEquals(v, Vec3(0, 0, 0))

        runSecondIn(world)
        m = body.matrix
        assertTrue(m.array[13].between(-0.1, 0.1))

        v = body.velocity
        assertTrue(v.x == 0)
        assertTrue(v.y.between(-10.01, -9.99))
        assertTrue(v.z == 0)
    }

    def testFriction {
        val world = EGDynamicWorld<int>(Vec3(0, -10, 0))
        val plane = EGRigidBody.statical<int>(1, EGCollisionPlane(Vec3(0, 1, 0), 0))
        world.add(plane)
        val body = EGRigidBody.dynamic<int>(2, EGCollisionBox(Vec3(0.5, 0.5, 0.5)), 1)
        world.add(body)
        body.matrix = Matrix.identity.translate(0, 0.5, 0)
        body.velocity = Vec3(10, 0, 0)

        runSecondIn(world)
//        val m = body.matrix
        val v = body.velocity
        assertTrue(v.x.between(7.4, 7.6))
        assertTrue(v.y.between(-0.1, 0.1))
        assertTrue(v.z.between(-0.1, 0.1))
    }
}
