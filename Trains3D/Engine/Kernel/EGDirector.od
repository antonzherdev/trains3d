import EGScene
import EGTime
import EGStat
import EGTypes
import EGGL
import EGContext
import EGProcessor

class EGDirector {
    var scene : EGScene
    private var _isStarted = false
    private var _isPaused = false
    val time : EGTime = EGTime.new
    private static var _current : EGDirector
    static def current = _current
    val context = EGContext.new

    def drawWith(size : EGSize) {
        _current = self
        egClear
        glEnable(GL_DEPTH_TEST)
        scene.drawWith(size)
        glDisable(GL_DEPTH_TEST)
        _stat.for(_.draw)
    }

    def process(event : EGEvent) {
        scene.process(event)
    }

    def isStarted = _isStarted
    def start {
        _isStarted = true
        time.start
    }
    def stop {
        _isStarted = false
    }

    def isPaused = _isPaused
    def pause {
        _isPaused = true
    }

    def resume {
        if(_isPaused) {
            _isPaused = false
            time.start
        }
    }

    def tick {
        time.tick
        scene.updateWith(time.delta)
        _stat.for(_.tickWith(time.delta))
    }

    private var _stat : EGStat? = nil
    def stat = _stat
    def isDisplayingStats = _stat.isDefined
    def displayStats {_stat = EGStat.new}
    def cancelDisplayingStats {_stat = nil}
}