import EGTypes
import EGMatrix

stub struct GLenum
stub struct GLint
stub struct GLuint
stub struct GLubyte
stub struct GLsizei
stub struct GLboolean
stub struct GLsizeiptr

stub def egClear

stub def egColor3(r : float, g : float, b : float)
stub def egColor4(r : float, g : float, b : float, a : float)
stub def egColor(color : EGColor)

stub def glutSolidCube(size :float)

stub def glPushMatrix
stub def glPopMatrix
stub def egRotate(angle : float, x : float, y : float, z : float)
stub def egScale(x : float, y : float, z : float)
stub def egTranslate(x : float, y : float, z : float)

stub def glEnable(: uint)
stub def glDisable(: uint)
stub val GL_DEPTH_TEST : uint
stub val GL_LIGHTING : uint
stub val GL_LIGHT0 : uint
stub val GL_LIGHT1 : uint
stub val GL_COLOR_MATERIAL : uint
stub val GL_NORMALIZE : uint
stub def glShadeModel(: uint)
stub val GL_SMOOTH : uint

stub def glBegin(: uint)
stub def glEnd
stub val GL_QUADS : uint
stub val GL_LINES : uint
stub def egVertex2(x : float, y : float)
stub def egVertex3(x : float, y : float, z : float)
stub def egNormal3(x : float, y : float, z : float)
stub def egTexCoord2(x : float, y : float)

stub def egRect(x1 : float, y1 : float, x2 : float, y2 : float)

stub def egViewport(rect : EGRectI)
stub def glViewport (x : GLint, y : GLint, width : GLsizei, height : GLsizei)
stub def glMatrixMode(: uint)
stub val GL_PROJECTION : uint
stub val GL_MODELVIEW : uint
stub def glLoadIdentity
stub def glOrtho(left : float, right : float, bottom : float, top : float, zNear : float, zFar : float)
stub def egModelViewProjectionMatrix : EGMatrix
stub def glUniformMatrix4fv(location : GLuint, count : GLsizei, transpose : GLboolean, value : [float4])
stub def egUniformColor(location : GLuint, color : EGColor)
stub def egUniformVec3(location : GLuint, color : EGVec3)


stub def egAmbientColor(r : float, g : float, b : float)
stub def egLightColor(light: uint, r : float, g : float, b : float)
stub def egLightPosition(light: uint, r : float, g : float, b : float)
stub def egLightDirection(light: uint, r : float, g : float, b : float)

stub def egMaterialColor(face : uint, tp : uint, color : EGColor)
stub def egColorSetMaterial(color : EGColor)
stub def egMaterial(face : uint, tp : uint, value : float)
stub val GL_BACK : uint
stub val GL_FRONT : uint
stub val GL_FRONT_AND_BACK : uint

stub val GL_AMBIENT : uint
stub val GL_DIFFUSE : uint
stub val GL_SPECULAR : uint
stub val GL_EMISSION : uint
stub val GL_SHININESS : uint
stub val GL_AMBIENT_AND_DIFFUSE : uint


stub def glCreateProgram : GLuint
stub def glAttachShader(program : GLuint, shader : GLuint)
stub def glAttachShader(program : GLuint, shader : GLuint)
stub def glLinkProgram(program : GLuint)
stub def glDeleteProgram(program : GLuint)
stub def glUseProgram(program : GLuint)
stub def egGetAttribLocation(program : GLuint, name : string) : GLint
stub def egGetUniformLocation(program : GLuint, name : string) : GLint
stub def egGetProgramError(program : GLuint) : string?

stub def glDeleteShader(shader : GLuint)
stub def glCreateShader(shaderType : GLenum) : GLuint
stub def egShaderSource(shader : GLuint, source : string)
stub def glCompileShader(shader : GLuint)
stub def egGetShaderError(shader : GLuint) : string?

stub val GL_VERTEX_SHADER : GLenum
stub val GL_FRAGMENT_SHADER : GLenum

stub def egGenBuffer : GLuint
stub def egDeleteBuffer(handle : GLuint)
stub def glBindBuffer(target : GLenum, handle : GLuint) : GLuint
stub def glBufferData(target : GLenum, size : GLsizeiptr, data : [void], usage : GLenum)
stub def egVertexAttribPointer(slot : GLuint, size : uint, tp : GLenum, normalized : GLboolean, stride : uint, shift : uint)
stub def glDrawElements(mode : GLenum, count : GLsizei, tp : GLenum, indices : [void])
stub def glDrawArrays(mode : GLenum, first : GLint, count : GLsizei)
stub def glEnableVertexAttribArray(handle : GLint)
stub def glDisableVertexAttribArray(handle : GLint)

stub val GL_TRIANGLES : GLenum

stub val GL_FLOAT : GLenum
stub val GL_DOUBLE : GLenum
stub val GL_BYTE : GLenum
stub val GL_UNSIGNED_BYTE : GLenum
stub val GL_INT : GLenum
stub val GL_UNSIGNED_INT : GLenum

stub val GL_TRUE : GLboolean
stub val GL_FALSE : GLboolean

stub def egDrawJasModel(name : string)