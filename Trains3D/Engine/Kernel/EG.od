package com.antonzherdev.eg

import com.antonzherdev.eg.EGGL._

class EG {
    static def director : EGDirector = context.director
    static val context : EGContext = EGContext()
    static val matrix : EGMatrixStack = context.matrixStack
    static def textureFor(file : string) : EGFileTexture = context.textureFor(file)
}

class EGContext {
    private val textureCache = CNMutableHashMap<string, EGFileTexture>()

    def textureFor(file : string) : EGFileTexture = textureCache.objectFor(key = file, orUpdateWith = EGFileTexture(file))

    var director : EGDirector
    var environment = EGEnvironment.default
    val matrixStack = EGMatrixStack()
}

class EGMatrixStack {
    private var stack = CNList<EGMatrixModel>()
    var value = EGMatrixModel.identity

    def clear {
        value = EGMatrixModel.identity
        stack = CNList<EGMatrixModel>()
    }

    def push {
        stack = CNList(value, stack)
    }

    def pop {
        value = stack.head.get
        stack = stack.tail
    }

    def apply(modify : EGMatrixModel -> EGMatrixModel, f : () -> void) {
        push
        value = modify(value)
        f()
        pop
    }
}

class EGMatrixModel(m : mat4, w : mat4, c : mat4, p : mat4,
    _mw : CNLazy<mat4>, _mwc : CNLazy<mat4>, _mwcp : CNLazy<mat4>,
    _cp : CNLazy<mat4>, _wcp : CNLazy<mat4>, _wc : CNLazy<mat4>)
{
    static def apply(m : mat4, w : mat4, c : mat4, p : mat4) : EGMatrixModel = {
        val _mw = CNLazy(w.mul(m))
        val _mwc = CNLazy(c.mul(_mw.get))
        val _cp = CNLazy(p.mul(c))
        val _mwcp = CNLazy(_cp.get.mul(_mw.get))
        val _wc = CNLazy(c.mul(w))
        val _wcp = CNLazy(p.mul(_wc.get))
        EGMatrixModel(m, w, c, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }
    static val identity = EGMatrixModel(mat4.identity, mat4.identity, mat4.identity, mat4.identity)
    def mw = _mw.get
    def mwc = _mwc.get
    def mwcp = _mwcp.get
    def cp = _cp.get
    def wcp = _wcp.get
    def wc = _wc.get

    def modify(m : mat4 -> mat4) : EGMatrixModel = {
        val mm = m(self.m)
        val _mw = CNLazy(w.mul(mm))
        val _mwc = CNLazy(c.mul(_mw.get))
        val _mwcp = CNLazy(_cp.get.mul(_mw.get))
        EGMatrixModel(mm, w, c, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }


    def modify(w : mat4 -> mat4) : EGMatrixModel = {
        val ww = w(self.w)
        val _mw = CNLazy(ww.mul(m))
        val _mwc = CNLazy(c.mul(_mw.get))
        val _mwcp = CNLazy(_cp.get.mul(_mw.get))
        val _wc = CNLazy(c.mul(ww))
        val _wcp = CNLazy(p.mul(_wc.get))
        EGMatrixModel(m, ww, c, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }

    def modify(c : mat4 -> mat4) : EGMatrixModel = {
        val cc = c(self.c)
        val _mwc = CNLazy(cc.mul(_mw.get))
        val _cp = CNLazy(p.mul(cc))
        val _mwcp = CNLazy(_cp.get.mul(_mw.get))
        val _wc = CNLazy(cc.mul(w))
        val _wcp = CNLazy(p.mul(_wc.get))
        EGMatrixModel(m, w, cc, p, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }

    def modify(p : mat4 -> mat4) : EGMatrixModel = {
        val pp = p(self.p)
        val _cp = CNLazy(pp.mul(c))
        val _mwcp = CNLazy(_cp.get.mul(_mw.get))
        val _wcp = CNLazy(pp.mul(_wc.get))
        EGMatrixModel(m, w, c, pp, _mw, _mwc, _mwcp, _cp, _wcp, _wc)
    }
}
