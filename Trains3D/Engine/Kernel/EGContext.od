import EGTexture
import EGMatrix
import EGMaterial
import EGGL
import EGTypes


class EGContext {
    private val textureCache = CNMutableHashMap<string, EGTexture>()

    def textureFor(file : string) : EGTexture = textureCache.objectFor(key = file, orUpdateWith = EGTexture(file))

    var environment = EGEnvironment.default
    val modelMatrix = EGMutableMatrix()
    val worldMatrix = EGMutableMatrix()
    val cameraMatrix = EGMutableMatrix()
    val projectionMatrix = EGMutableMatrix()
    def m : EGMatrix = modelMatrix.value
    def mw : EGMatrix = worldMatrix.value.multiply(modelMatrix.value)
    def mwc : EGMatrix = cameraMatrix.value.multiply(worldMatrix.value.multiply(modelMatrix.value))
    def mwcp : EGMatrix = projectionMatrix.value.multiply(cameraMatrix.value).multiply(worldMatrix.value).multiply(modelMatrix.value)

    def clearMatrix {
        modelMatrix.clear
        worldMatrix.clear
        cameraMatrix.clear
        projectionMatrix.clear
    }
}

class EGMutableMatrix {
    private var _stack = CNList<EGMatrix>()
    private var _value = EGMatrix.identity

    def push {
        glPushMatrix
        _stack = CNList(_value, _stack)
    }

    def pop {
        _value = _stack.head.get
        _stack = _stack.tail
        glPopMatrix
    }

    def value : EGMatrix = _value
    def set(value : EGMatrix) {
        _value = value
    }

    def setIdentity {
        glLoadIdentity
        _value = EGMatrix.identity
    }

    def clear {
        setIdentity
        _stack = CNList<EGMatrix>()
    }

    def rotate(angle : float, x : float, y : float, z : float) {
        egRotate(angle, x, y, z)
        _value = _value.rotate(angle, x, y, z)
    }
    def scale(x : float, y : float, z : float) {
        egScale(x, y, z)
        _value = _value.scale(x, y, z)
    }
    def translate(x : float, y : float, z : float) {
        egTranslate(x, y, z)
        _value = _value.translate(x, y, z)
    }
    def ortho(left : float, right : float, bottom : float, top : float, zNear : float, zFar : float) {
        glOrtho(left, right, bottom, top, zNear, zFar)
        _value = EGMatrix.ortho(left, right, bottom, top, zNear, zFar)
    }

    def keep(f : () -> void) {
        push
        f()
        pop
    }
}
