import "EGTypesAdd.h"
import EGGL

struct EGPoint(x : float, y : float) {
    static def apply(point : EGPointI) = EGPoint(point.x, point.y)

    def add(point : EGPoint) = EGPoint(x + point.x, y + point.y)
    def sub(point : EGPoint) = EGPoint(x - point.x, y - point.y)
    def negate = EGPoint(-x, -y)
    def angle : float = atan2(y, x)
    def dot(point : EGPoint) : float = x*point.x + y*point.y
    def lengthSquare : float = dot(self)
    def length = sqrt(lengthSquare)
    def mul(value : float) = EGPoint(x*value, y*value)
    def mid(point : EGPoint) = add(point).mul(0.5)
    def distanceTo(point : EGPoint) = sub(point).length
    def set(length : float) = mul(length/self.length)
    def normalize = set(length = 1.0)
}

struct EGPointI(x : int, y : int) {
    static def apply(point : EGPoint) = EGPointI(lround(point.x), lround(point.y))

    def add(point : EGPointI) = EGPointI(x + point.x, y + point.y)
    def sub(point : EGPointI) = EGPointI(x - point.x, y - point.y)
    def negate = EGPointI(-x, -y)
}

struct EGSize(width : float, height : float)
struct EGSizeI(width : int, height : int)
struct EGRect(left : float, top : float, right : float, bottom : float)
struct EGRectI(left : int, top : int, right : int, bottom : int)

struct EGColor(r : float, g : float, b : float, a : float) {
    def set = egColor4(r, g, b, a)
}

stub val ISO : float
stub val M_PI : float
stub val M_PI_2 : float
stub val M_PI_4 : float
stub def round(: float) : float
stub def lround(: float) : int
stub def sin(:float) : float
stub def cos(:float) : float
stub def fabs(:float) : float
stub def atan2(:float, :float) : float
stub def sqrt(:float) : float

trait EGController {
    def updateWith(delta : float)
}

trait EGCamera {
    def focusFor(viewSize : EGSize)

    def translate(viewPoint : EGPoint, withViewSize : EGSize) : EGPoint
}

trait EGView {
    def camera : EGCamera

    def drawView
}

