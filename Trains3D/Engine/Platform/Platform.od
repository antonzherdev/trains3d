package com.antonzherdev.eg

enum OSType(shadows : bool, touch : bool) {
    MacOS(true, false)
    iOS(true, true)
}

enum InterfaceIdiom(isPhone : bool, isPad : bool, isComputer : bool) {
    phone(true, false, false)
    pad(false, true, false)
    computer(false, false, true)
}

class Platform(os : OSType, interfaceIdiom : InterfaceIdiom, version : Version, screenSize : vec2) {
    val shadows = os.shadows
    val touch = os.touch

    val isPhone = interfaceIdiom.isPhone
    val isPad = interfaceIdiom.isPad
    val isComputer = interfaceIdiom.isComputer

    def screenSizeRatio : float = screenSize.x/screenSize.y
}


class Version(parts : [int]) extends Comparable<Version> {
    static def apply(str : string) : Version = Version(str.split(".").chain.map(_.toInt).toArray)

    def compare(to : Version) : int = {
        val i = parts.iterator
        val j = to.parts.iterator
        while(i.hasNext && j.hasNext) {
            val vi = i.next
            val vj = j.next
            if(vi != vj) {
                return vi.compare(vj)
            }
        }
        0
    }
}