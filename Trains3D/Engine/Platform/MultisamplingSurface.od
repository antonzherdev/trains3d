package com.antonzherdev.eg

stub class FirstMultisamplingSurface(size : vec2i, depth : bool) extends Surface(size) {
    val frameBuffer = egGenFrameBuffer
    private val depthTexture : Texture?
    private val texture

    def dealloc {
        egDeleteFrameBuffer(frameBuffer)
    }

    def bind

    def unbind

}

stub class MultisamplingSurface(size : vec2i, depth : bool) extends  Surface(size) {
    def bind

    def unbind

    def frameBuffer : GLint

    def texture : Texture
}


stub class ViewportSurface(depth : bool, multisampling : bool) extends BaseViewportSurface {
    def createSurface : Surface =
    if(multisampling) MultisamplingSurface(context.viewport.size, depth)
    else SimpleSurface(context.viewport.size, depth)

    private lazy val shader = ViewportSurfaceShader()

    def drawWith(z : float4) {
        context.cullFace.disabled {
            shader.draw(ViewportSurfaceShaderParam(texture, z), fullScreenMesh)
        }
    }

    def texture : Texture = case(surface.get) {
        i : SimpleSurface -> i.texture
        i : MultisamplingSurface -> i.texture
    }

    def draw
}