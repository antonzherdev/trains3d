import EGVec
import EGTypes
import EG
import EGGL

class EGCamera2D(size : EGVec2) extends EGCamera {
    private def factorFor(viewSize : EGVec2) : float = min(viewSize.x/size.x, viewSize.y/size.y)
    private def viewportRectFor(viewSize : EGVec2) : EGRect = viewportRectFor(viewSize, factorFor(viewSize))
    private def viewportRectFor(viewSize : EGVec2, factor : float) : EGRect =
        EGRect(0, size.x*factor, 0, size.y*factor).moveToCenterFor(viewSize)

    def focusFor(viewSize : EGVec2) {
        egViewport(viewportRectFor(viewSize))

        EG.context.clearMatrix
        EG.context.projectionMatrix.ortho(0, size.x, 0, size.y, 0, 1)
    }

    def translateWith(viewSize : EGVec2, viewPoint : EGVec2) : EGVec2 = {
        val factor = factorFor(viewSize)
        val viewport = viewportRectFor(viewSize, factor)
        viewPoint.sub(viewport.point).div(factor)
    }

    val eyeDirection : EGVec3 = EGVec3(0, 0, 1)
}