import EGVec
import EGTypes
import EG
import EGGL
import EGMatrix

class EGCamera2D(size : EGVec2) extends EGCamera {
    private def factorFor(viewSize : EGVec2) : float = min(viewSize.x/size.x, viewSize.y/size.y)
    private def viewportRectFor(viewSize : EGVec2) : EGRect = viewportRectFor(viewSize, factorFor(viewSize))
    private def viewportRectFor(viewSize : EGVec2, factor : float) : EGRect =
        EGRect(0, size.x*factor, 0, size.y*factor).moveToCenterFor(viewSize)

    private val matrixModel : EGMatrixModel = EGMatrixModel(
        m = EGMatrix.identity,
        w = EGMatrix.identity,
        c = EGMatrix.identity,
        p = EGMatrix.ortho(0, size.x, 0, size.y, -1, 1)
    )
    def focusFor(viewSize : EGVec2) {
        egViewport(viewportRectFor(viewSize))

        EG.matrix.value = matrixModel
    }

    def translateWith(viewSize : EGVec2, viewPoint : EGVec2) : EGVec2 = {
        val factor = factorFor(viewSize)
        val viewport = viewportRectFor(viewSize, factor)
        viewPoint.sub(viewport.point).div(factor)
    }
}