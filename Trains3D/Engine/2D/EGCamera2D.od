import EGVec
import EGTypes
import EG
import EGGL
import EGContext

class EGCamera2D(size : EGSize) extends EGCamera {
    private def factorFor(viewSize : EGSize) : float = min(viewSize.width/size.width, viewSize.height/size.height)
    private def viewportRectFor(viewSize : EGSize) : EGRect = viewportRectFor(viewSize, factorFor(viewSize))
    private def viewportRectFor(viewSize : EGSize, factor : float) : EGRect =
        EGRect(0, size.width*factor, 0, size.height*factor).moveToCenterFor(viewSize)

    def focusFor(viewSize : EGSize) {
        egViewport(viewportRectFor(viewSize))

        EG.context.clearMatrix
        EG.context.projectionMatrix.ortho(0, size.width, 0, size.height, 0, 1)
    }

    def translateWith(viewSize : EGSize, viewPoint : EGVec2) : EGVec2 = {
        val factor = factorFor(viewSize)
        val viewport = viewportRectFor(viewSize, factor)
        viewPoint.sub(viewport.point).div(factor)
    }

    val eyeDirection : EGVec3 = EGVec3(0, 0, 1)
}