package com.antonzherdev.eg

object D2D {
    private val vertexes = VoidRefArray(MeshData.type, 4)
    private val vb = VertexBuffer.mesh
    def drawSprite(material : ColorSource, in : Rect) {
        drawSprite(material, in, Rect(0, 0, 1, 1))
    }

    def drawSprite(material : ColorSource, in : Rect, uv : Rect) {
        var v = vertexes
        v = v.write(MeshData, MeshData(uv.leftBottom, vec3(0, 0, 1), vec3(in.leftBottom, 0)))
        v = v.write(MeshData, MeshData(uv.leftTop, vec3(0, 0, 1), vec3(in.leftTop, 0)))
        v = v.write(MeshData, MeshData(uv.rightBottom, vec3(0, 0, 1), vec3(in.rightBottom, 0)))
        v = v.write(MeshData, MeshData(uv.rightTop, vec3(0, 0, 1), vec3(in.rightTop, 0)))
        vb.set(vertexes)

        glDisable(GL_CULL_FACE)
        material.draw(vb, GL_TRIANGLE_STRIP)
        glEnable(GL_CULL_FACE)
    }

    private val lineVertexes = VoidRefArray(MeshData.type, 2)
    def drawLine(material : ColorSource, p0 : vec2, p1 : vec2) {
        var v = lineVertexes
        v = v.write(MeshData, MeshData(vec2(0, 0), vec3(0, 0, 1), vec3(p0, 0)))
        v = v.write(MeshData, MeshData(vec2(1, 1), vec3(0, 0, 1), vec3(p1, 0)))
        vb.set(lineVertexes)

        glDisable(GL_CULL_FACE)
        material.draw(vb, GL_LINES)
        glEnable(GL_CULL_FACE)
    }
}

class Sprite {
    var material : ColorSource
    var uv : Rect = Rect(0, 0, 1, 1)

    def draw {
        D2D.drawSprite(material, in = Rect(position, size), uv)
    }

    var position : vec2 = vec2(0, 0)
    var size : vec2 = vec2(1, 1)
    def rect : Rect = Rect(position, size)

    static def apply(material : ColorSource, size : vec2) : Sprite = {
        val s = Sprite()
        s.material = material
        s.size = size
        s
    }

    static def apply(material : ColorSource, uv : Rect, pixelsInPoint : float4) : Sprite = {
        val s = Sprite()
        s.material = material
        s.uv = material.texture.get.uv(uv)
        s.size = uv.size/pixelsInPoint
        s
    }

    def contains(vec2 : vec2) : bool = Rect(position, size).contains(vec2)
}

class Line2d {
    static def apply(material : ColorSource) = {
        val l = Line2d()
        l.material = material
        l
    }

    var material : ColorSource
    var p0 : vec2 = vec2(0, 0)
    var p1 : vec2 = vec2(1, 1)

    def draw {
        D2D.drawLine(material, p0, p1)
    }
}