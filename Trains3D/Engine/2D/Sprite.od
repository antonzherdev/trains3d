package com.antonzherdev.eg

object D2D {
    private val vertexes = VoidRefArray(BillboardBufferData.type, 4)
    private val vb = VertexBuffer(Billboard.vbDesc)
    def drawSprite(material : ColorSource, at : vec3, rect : Rect) {
        drawSprite(material, at, rect.quad, Rect(1, 1, -1, -1).quad)
    }

    def drawSprite(material : ColorSource, at : vec3, quad : Quad, uv : Quad) {
        var v = vertexes
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[0], material.color, uv.p[0]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[1], material.color, uv.p[1]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[2], material.color, uv.p[2]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[3], material.color, uv.p[3]))
        vb.set(vertexes)
        context.cullFace.disabled {
            BillboardShaderSystem.shaderFor(material).draw(material, vb, GL_TRIANGLE_STRIP)
        }
    }

    def writeSprite(in : VoidRefArray, material : ColorSource, at : vec3, quad : Quad, uv : Quad) : VoidRefArray = {
        var v = in.write(BillboardBufferData, BillboardBufferData(at, quad.p[0], material.color, uv.p[0]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[1], material.color, uv.p[1]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[2], material.color, uv.p[2]))
        v = v.write(BillboardBufferData, BillboardBufferData(at, quad.p[3], material.color, uv.p[3]))
        v
    }

    def writeQuadIndex(in : VoidRefArray, i : uint4) : VoidRefArray = {
        in
            .write(uInt4 = i).write(uInt4 = i + 1).write(uInt4 = i + 2)
            .write(uInt4 = i + 1).write(uInt4 = i + 2).write(uInt4 = i + 3)
    }

    private val lineVb = VertexBuffer.mesh
    private val lineVertexes = VoidRefArray(MeshData.type, 2)
    def drawLine(material : ColorSource, p0 : vec2, p1 : vec2) {
        var v = lineVertexes
        v = v.write(MeshData, MeshData(vec2(0, 0), vec3(0, 0, 1), vec3(p0, 0)))
        v = v.write(MeshData, MeshData(vec2(1, 1), vec3(0, 0, 1), vec3(p1, 0)))
        lineVb.set(lineVertexes)

        context.cullFace.disabled {
            material.draw(lineVb, GL_LINES)
        }
    }
}

class Sprite {
    var material : ColorSource
    var uv : Rect = Rect(0, 0, 1, 1)

    def draw {
        D2D.drawSprite(material, at = vec3(position, 0), Rect(vec2(0, 0), size).quad, uv.quad)
    }

    var position : vec2 = vec2(0, 0)
    var size : vec2 = vec2(1, 1)
    def rect : Rect = Rect(position, size)

    static def apply(material : ColorSource, size : vec2) : Sprite = {
        val s = Sprite()
        s.material = material
        s.size = size
        s
    }

    static def apply(material : ColorSource, uv : Rect, pixelsInPoint : float4) : Sprite = {
        val s = Sprite()
        s.material = material
        s.uv = material.texture.get.uv(uv)
        s.size = uv.size/pixelsInPoint
        s
    }

    def contains(vec2 : vec2) : bool = Rect(position, size).contains(vec2)
}

class Line2d {
    static def apply(material : ColorSource) = {
        val l = Line2d()
        l.material = material
        l
    }

    var material : ColorSource
    var p0 : vec2 = vec2(0, 0)
    var p1 : vec2 = vec2(1, 1)

    def draw {
        D2D.drawLine(material, p0, p1)
    }
}