package com.antonzherdev.eg

object Sprite {
    private val vertexes = VoidRefArray(MeshData.type, 4)
    private val vb = VertexBuffer.mesh
    def draw(material : ColorSource, in : rect) {
        draw(material, in, rect(0, 0, 1, 1))
    }

    def draw(material : ColorSource, in : rect, uv : rect) {
        var v = vertexes
        v = v.write(MeshData, MeshData(uv.leftBottom, vec3(0, 0, 1), vec3(in.leftBottom, 0)))
        v = v.write(MeshData, MeshData(uv.leftTop, vec3(0, 0, 1), vec3(in.leftTop, 0)))
        v = v.write(MeshData, MeshData(uv.rightBottom, vec3(0, 0, 1), vec3(in.rightBottom, 0)))
        v = v.write(MeshData, MeshData(uv.rightTop, vec3(0, 0, 1), vec3(in.rightTop, 0)))
        vb.set(vertexes)

        glDisable(GL_CULL_FACE)
        material.draw(vb, GL_TRIANGLE_STRIP)
        glEnable(GL_CULL_FACE)
    }

    def fixedDraw(material : ColorSource, uv : rect, at : vec2, alignment : vec2) {
        val size = material.texture.get.size * uv.size / context.viewport.size * 2
        val m = context.matrixStack.value
        context.matrixStack.value = MatrixModel.identity
        draw(material, in = rect((m.mwcp*vec4(at.x, at.y, 0, 1)).xy - size*(alignment/2 + 0.5), size), uv)
        context.matrixStack.value = m
    }
}