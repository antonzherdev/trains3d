package com.antonzherdev.eg

class Sprite {
    private static val vertexes = VoidRefArray(MeshData.type, 4)
    private static val vb = VertexBuffer.mesh
    static def draw(material : ColorSource, in : rect) {
        draw(material, in, rect(0, 0, 1, 1))
    }

    static def draw(material : ColorSource, in : rect, uv : rect) {
        var v = vertexes
        v = v.write(MeshData, MeshData(uv.leftBottom, vec3(0, 0, 1), vec3(in.leftBottom, 0)))
        v = v.write(MeshData, MeshData(uv.leftTop, vec3(0, 0, 1), vec3(in.leftTop, 0)))
        v = v.write(MeshData, MeshData(uv.rightBottom, vec3(0, 0, 1), vec3(in.rightBottom, 0)))
        v = v.write(MeshData, MeshData(uv.rightTop, vec3(0, 0, 1), vec3(in.rightTop, 0)))
        vb.set(vertexes)

        glDisable(GL_CULL_FACE)
        material.draw(vb, GL_TRIANGLE_STRIP)
        glEnable(GL_CULL_FACE)
    }

    var material : ColorSource
    var uv : rect = rect(0, 0, 1, 1)

    def draw {
        draw(material, in = rect(position, size), uv)
    }

    var position : vec2 = vec2(0, 0)
    var size : vec2 = vec2(1, 1)

    static def apply(material : ColorSource, uv : rect, pixelsInPoint : float4) : Sprite = {
        val s = Sprite()
        s.material = material
        s.uv = material.texture.get.uv(uv)
        s.size = uv.size/pixelsInPoint
        s
    }

    def contains(vec2 : vec2) : bool = rect(position, size).contains(vec2)
}