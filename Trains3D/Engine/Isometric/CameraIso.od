package com.antonzherdev.eg


import core.math._

class CameraIso(tilesOnScreen : vec2i, center : vec2) extends Camera {
    private static val ISO = MapSso.ISO

    def viewportWith(viewSize : vec2) : recti = {
        val ww = tilesOnScreen.x + tilesOnScreen.y
        val tileSize = min(viewSize.x / ww, 2*viewSize.y/ ww)
        val viewportWidth = tileSize * ww
        val viewportHeight = tileSize * ww / 2
        recti(0, 0, viewportWidth, viewportHeight).moveToCenterFor(viewSize)
    }
    static val m = mat4.identity.rotate(90, 1, 0, 0)
    static val w = mat4.identity.rotate(-90, 1, 0, 0)
    val matrixModel : MatrixModel = {
        val ww : float = tilesOnScreen.x + tilesOnScreen.y
        val isoWW2 = ww*ISO/2
        val isoWW4 = isoWW2/2

        MatrixModel(
            m = m,
            w = w,
            c = mat4.identity
                    .translate(-isoWW2 + ISO, -ISO*(tilesOnScreen.y - tilesOnScreen.x)/4 + isoWW4, -1000)
                    .rotate(30, 1, 0, 0)
                    .rotate(-45.0, 0, 1, 0),
            p = mat4.ortho(-isoWW2, isoWW2, 0, isoWW2, 0.0, 2000.0)
        )
    }

    def focusFor(viewSize : vec2) {
        glCullFace(GL_FRONT)
    }
}

