package com.antonzherdev.eg


import core.math._

class CameraIso(tilesOnScreen : vec2, zReserve : float4, center : vec2) extends Camera {
    private static val ISO = MapSso.ISO

    private val ww : float = tilesOnScreen.x + tilesOnScreen.y
    private val isoWW2 = ww*ISO/2
    private val yReserve = zReserve * 0.612372
    val viewportRatio : float = 2*ww/(yReserve*2 + ww)

    static val m = mat4.identity.rotate(90, 1, 0, 0)
    static val w = mat4.identity.rotate(-90, 1, 0, 0)

    val matrixModel : MatrixModel = MatrixModel(
        m = m,
        w = w,
        c = mat4.identity
            .translate(-isoWW2 + ISO, -ISO*(tilesOnScreen.y - tilesOnScreen.x)/4 + isoWW2/2, -1000)
            .rotate(30, 1, 0, 0)
            .rotate(-45.0, 0, 1, 0),
        p = mat4.ortho(-isoWW2, isoWW2, 0, (ww + 2*yReserve)*ISO/2, 0.0, 2000.0)
    )

    def cullFace : uint = GL_FRONT
}


class CameraIsoMove(base : CameraIso, misScale : float, maxScale : float) extends InputProcessor {
    private var _scale : float = 1.0
    private var _camera : CameraIso = base
    def camera : CameraIso = _camera

    def set(scale : float) {
        var s = scale.max(misScale).min(maxScale)
        if(s != _scale) {
            _scale = s
            _camera = CameraIso(base.tilesOnScreen/s, base.zReserve, _camera.center)
        }
    }

    private var _startScale : float = 1.0
    def recognizers : Recognizers = Recognizer<PinchParameter>(Pinch(),
        began = event -> {
            _startScale = _scale
            true
        },
        changed = event -> {
            set(scale = _startScale * event.param.scale)
        },
        ended = event -> {
        }
    )
}