package com.antonzherdev.eg

import com.antonzherdev.eg.EGGL._
import core.ODMath._

class EGCameraIso(tilesOnScreen : Vec2I, center : Vec2) extends EGCamera {
    private static val ISO = EGMapSso.ISO

    def calculateViewportSizeWith(viewSize : Vec2) : Rect = {
        val ww = tilesOnScreen.x + tilesOnScreen.y
        val tileSize = min(viewSize.x / ww, 2*viewSize.y/ ww)
        val viewportWidth = tileSize * ww
        val viewportHeight = tileSize * ww / 2
        Rect((viewSize.x - viewportWidth)/2, viewportWidth,
            (viewSize.y - viewportHeight)/2, viewportHeight)
    }

    private val matrixModel : EGMatrixModel = {
        val ww : float = tilesOnScreen.x + tilesOnScreen.y
        val isoWW2 = ww*ISO/2
        val isoWW4 = isoWW2/2

        EGMatrixModel(
            m = Matrix.identity.rotate(90, 1, 0, 0),
            w = Matrix.identity.rotate(-90, 1, 0, 0),
            c = Matrix.identity
                    .translate(-isoWW2 + ISO, -ISO*(tilesOnScreen.y - tilesOnScreen.x)/4 + isoWW4, -1000)
                    .rotate(30, 1, 0, 0)
                    .rotate(-45.0, 0, 1, 0),
            p = Matrix.ortho(-isoWW2, isoWW2, 0, isoWW2, 0.0, 2000.0)
        )
    }

    def focusFor(viewSize : Vec2) {
        val vps = calculateViewportSizeWith(viewSize)
        glViewport(vps.x, vps.y, vps.width, vps.height)
        EG.matrix.value = matrixModel
        glCullFace(GL_FRONT)
    }

    def translateWith(viewSize : Vec2, viewPoint : Vec2) : Vec2 = {
        val vps = calculateViewportSizeWith(viewSize)
        val x = viewPoint.x - vps.x
        val y = viewPoint.y - vps.y
        val vw = vps.size.x
        val vh = vps.size.y
        val ww2 : float = (tilesOnScreen.x + tilesOnScreen.y)/2.0
        val tw : float = tilesOnScreen.x
        Vec2((x/vw - y/vh)*ww2 + tw/2 - 0.5 + center.x, (x/vw + y/vh)*ww2 - tw/2 - 0.5 + center.y)
    }
}

