import CNPair
import CNSet

import EGFigure
import EGBentleyOttmann
import EGVec

class EGCollisions {
    static def collisionsFor<T>(figures : [(T, EGFigure)]) : CNSet<EGCollision<T>> = {
        val segments = figures.chain
            .combinations
            .filter(p -> p.a.a != p.b.a && p.a.b.boundingRect.intersects(p.b.b.boundingRect))
            .uncombinations
            .flatMap(f -> f.b.segments.chain.map(segment -> (f.a, segment)))
            .toArray
        if(segments.isEmpty) return CNHashSet<EGCollision>()
        val intersections = EGBentleyOttmann.intersectionsFor(segments)
        intersections.chain
            .group<CNPair<T>, EGVec2, CNSet<EGVec2>>(
                by = _.items,
                map = _.point,
                withBuilder = CNHashSetBuilder<EGVec2>())
            .map(p -> EGCollision<T>(p.a, p.b))
            .toSet
    }
}

class EGCollision<T>(items : CNPair<T>, points : CNSet<EGVec2>)