import EGTypes
import EGFigure
import CNTreeMap
import CNTreeSet

class EGLineData<T>(data : T, figure : EGLine)
//class EGIntersection
//
class EGBentleyOttmann {
//    static def intersections(lines : [EGLineData]) : NSSet<EGIntersection> = intersectionsMap(lines).values
//
//    static def intersectionsMap(lines : [EGLineData]) : [EGPoint : NSSet<EGIntersection>] =
//        if(lines.count < 2) []
//        else {
//            val sweepLine = EGSweepLine.new
//            val queue = EGBentleyOttmannEventQueue(lines, sweepLine)
//
//            while(!queue.isEmpty()) {
//                val events = queue.poll
//                sweepLine.handle(events)
//            }
//            sweepLine.intersections
//        }

}

class EGBentleyOttmannEventQueue {
//    val events = CNTreeMap<EGPoint, [var EGBentleyOttmannEvent]>((a, b) -> {
//        val dX = a.x.compare(b.x)
//        if(dX != 0) dX else a.y.compare(b.y)
//    })
//
//     def initWith(segments : [EGLine], sweepLine : EGSweepLine) {
//        if(!segments.isEmpty) {
//            val xs = CNTreeSet<float>.new
//            segments.for(s -> {
//                xs.add(s.p1.x)
//                xs.add(s.p2.x)
//                offer(s.p1, EGBentleyOttmannEvent(EGBentleyOttmannEventType.start, s.p1, s, sweepLine))
//                offer(s.p2, EGBentleyOttmannEvent(EGBentleyOttmannEventType.end, s.p2, s, sweepLine))
//            })
//
//            val minY = xs.head.get
//            val maxY = xs.last.get
//            val minDeltaX = xs.chain.neighbors.map(pair -> pair.b - pair.a).min.get
//            val slope = (minY - maxY)/minDeltaX*1000
//            sweepLine.setLine(RLine2D(slope, RPoint2D.ORIGIN))
//            sweepLine.setQueue(self)
//        }
//    }
//
//    def offer(p : EGPoint, e : EGBentleyOttmannEvent) {
//        events.objectFor(key = p, orUpdate = []).for(_.add(e))
//    }
//
//    def poll : [EGBentleyOttmannEvent] {
//        events.pollFirst.get.b
//    }
}

enum EGBentleyOttmannEventType {
    start()
    end()
}

//class EGBentleyOttmannEvent(type : int, point : EGPoint, line : EGLine, weak sweepLine : EGSweepLine) {
//
//}