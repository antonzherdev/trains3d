import EGTypes
import EGFigure
import CNTreeMap
import CNTreeSet
import CNCollection
import CNPair
import CNSet


class EGBentleyOttmann {
    static def intersectionsFor<T>(segments : [(T, EGLineSegment)]) : NSSet<EGIntersection<T>> =
        if(segments.count < 2) NSSet.new<T>
        else {
            val sweepLine = EGSweepLine.new
            val queue = EGBentleyOttmannEventQueue.newWith(segments, sweepLine)

            while(!queue.isEmpty) {
                val events = queue.poll
                sweepLine.handle(events)
            }
            sweepLine.intersections.chain.flatMap(p ->
                p.b.chain.combinations
                    .filter(comb -> !comb.a.isVertical || !comb.b.isVertical)
                    .map(comb -> EGIntersection<T>(CNPair<T>.newWith(comb.a.data, comb.b.data), p.a.point))
            ).toSet
        }
}

class EGIntersection<T>(items : CNPair<T>, point : EGPoint)

class EGBentleyOttmannEvent<T> {
    def point : EGPoint
    def isIntersection : bool = false
    def isStart : bool = false
    def isEnd : bool = false
}

class EGBentleyOttmannPointEvent<T>(isStart : bool, data : T, segment : EGLineSegment, point : EGPoint) extends EGBentleyOttmannEvent<T> {
    def yFor(x : float) : float =
        if(segment.line.isVertical) if(isStart) segment.p1.y else segment.p2.y
        else segment.line.cast<EGSlopeLine>.yFor(x)
    def slope : float = segment.line.slope
    def isVertical : bool = segment.line.isVertical
    def isEnd : bool = !isStart
}
class EGBentleyOttmannIntersectionEvent<T>(point : EGPoint) extends EGBentleyOttmannEvent<T> {
    def isIntersection = true
}


class EGBentleyOttmannEventQueue<T> {
    val events = CNTreeMap<EGPoint, [var EGBentleyOttmannEvent<T>]>((a, b) -> a.compare(b))

    def isEmpty : bool = events.isEmpty

    static def newWith<T>(segments : [(T, EGLineSegment)], sweepLine : EGSweepLine) : EGBentleyOttmannEventQueue<T> {
        val ret = EGBentleyOttmannEventQueue.new<T>
        if(!(segments.isEmpty)) {
            segments.for(s -> {
                val segment : EGLineSegment = s.b
                ret.offer(segment.p1, EGBentleyOttmannPointEvent(true, s.a, segment, segment.p1))
                ret.offer(segment.p2, EGBentleyOttmannPointEvent(false, s.a, segment, segment.p2))
            })
            sweepLine.queue = ret
        }
        ret
    }

    def offer(point : EGPoint, event : EGBentleyOttmannEvent) {
        events.objectFor(key = point, orUpdateWith = []).add(event)
    }

    def poll : [EGBentleyOttmannEvent] {
        events.pollFirst.get.b
    }
}

class EGPointClass(point : EGPoint) {}


class EGSweepLine<T>
    /**
    * Whether to ignore intersections of line segments when both
    * their end points form the intersection point.
    */
//    ignoreSegmentEndings : bool
{
    var events = CNTreeSet.newWith<EGBentleyOttmannPointEvent<T>>((a, b) -> compareEvents(a, b))

    /**
    * A map holding all intersection points mapped to the Events
    * that form these intersections.
    */
    val intersections : [var EGPointClass : NSMutableSet<EGBentleyOttmannPointEvent<T>>] = []


    /**
    * The point of the current Event.
    */
    private var currentEventPoint : EGPoint

    /**
    * The queue associated with this sweep line.
    */
    var queue : EGBentleyOttmannEventQueue = nil

    def handle(events : [EGBentleyOttmannEvent<T>]) {
        events.for(handleOne(event = _))
    }

    private def sweepTo(event : EGBentleyOttmannEvent<T>) {
        currentEventPoint = event.point
    }

    private def handleOne(event : EGBentleyOttmannEvent<T>) {
        if(event.isStart) {
            sweepTo(event)
            val pe = event.cast<EGBentleyOttmannPointEvent<T>>
            if(pe.isVertical) {
                val minY = pe.segment.p1.y
                val maxY = pe.segment.p2.y
                val i = events.iteratorHigherThan(event)
                while(i.hasNext) {
                    val e = i.next
                    if(!e.isVertical) {
                        val y = e.yFor(currentEventPoint.x)
                        if(y >= maxY) break
                        if(y > minY) {
                            registerIntersection(pe, e, EGPoint(currentEventPoint.x, y))
                        }
                    }
                }
            } else {
                events.add(event)
                checkIntersection(event, above(event))
                checkIntersection(event, below(event))
            }
        } else if(event.isEnd) {
            if(!event.cast<EGBentleyOttmannPointEvent<T>>.isVertical) {
                val a = above(event)
                val b = below(event)
                events.remove(event)
                sweepTo(event)
                checkIntersection(a, b)
            }
        } else {
            val set = intersections[EGPointClass(event.point)].get
            val toInsert = set.chain.filter(events.remove(_)).toArray
            sweepTo(event)
            toInsert.for(e -> {
                events.add(e)
                checkIntersection(e, above(e))
                checkIntersection(e, below(e))
            })
        }
    }

    private def above(event : EGBentleyOttmannEvent<T>) : EGBentleyOttmannPointEvent<T>? =
        return events.higherThan(event)


    private def below(event : EGBentleyOttmannEvent<T>) : EGBentleyOttmannPointEvent<T>? =
        return events.lowerThan(event)


    private def checkIntersection(a : EGBentleyOttmannEvent<T>?, b : EGBentleyOttmannEvent<T>?) {
        if(a.isDefined && b.isDefined && a.get.is<EGBentleyOttmannPointEvent<T>> && b.get.is<EGBentleyOttmannPointEvent<T>>) {
            val aa = a.get.cast<EGBentleyOttmannPointEvent<T>>
            val bb = b.get.cast<EGBentleyOttmannPointEvent<T>>
            // Get the intersection point between 'a' and 'b'.
            aa.segment.intersectionWith(bb.segment).for(registerIntersection(aa, bb, _))
        }
    }

    private def registerIntersection(a : EGBentleyOttmannPointEvent<T>, b : EGBentleyOttmannPointEvent<T>, point : EGPoint) {
        if(!a.segment.endingsContain(point) && !b.segment.endingsContain(point)/* && ignoreSegmentEndings*/) {

            // Add the intersection.
            val existing = intersections.objectFor(key = EGPointClass(point), orUpdateWith = NSMutableSet.new<EGBentleyOttmannPointEvent<T>>)
            existing.add(a)
            existing.add(b)

            // If the intersection occurs to the right of the sweep line, OR
            // if the intersection is on the sweep line and it's above the
            // current event-point, add it as a new Event to the queue.
            if(point.x > currentEventPoint.x || (point.x == currentEventPoint.x && point.y > currentEventPoint.y)) {
                val intersection = EGBentleyOttmannIntersectionEvent<T>(point)
                queue.offer(point, intersection)
            }
        }
    }

    private def compareEvents(a : EGBentleyOttmannPointEvent<T>, b : EGBentleyOttmannPointEvent<T>) : int = {
        // Equal Events.
        if (a == b) return 0

        val ay = a.yFor(currentEventPoint.x)
        val by = b.yFor(currentEventPoint.x)

        var c = ay.compare(by)
        if(c == 0) {
            c = a.slope.compare(b.slope)
            if(ay > currentEventPoint.y) c = -c
            if(c == 0) {
                c = a.point.x.compare(b.point.x)
            }
        }
        c
    }
}