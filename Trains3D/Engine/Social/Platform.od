package com.antonzherdev.eg

enum OSType(shadows : bool, touch : bool) {
    MacOS(true, false)
    iOS(true, true)
}

enum InterfaceIdiom(isPhone : bool, isPad : bool, isComputer : bool) {
    phone(true, false, false)
    pad(false, true, false)
    computer(false, false, true)
}

enum DeviceType {
    iPhone()
    iPad()
    iPodTouch()
    Simulator()
    Mac()
}

class OS(tp : OSType, version : Version, jailbreak : bool) {
    def isIOS : bool = tp == OSType.iOS
    def isIOSLess(version : string) : bool = tp == OSType.iOS && self.version.less(version)
}

class Device(tp : DeviceType, interfaceIdiom : InterfaceIdiom, version : Version, screenSize : vec2) {
    def isIPhoneLess(version : string) : bool = tp == DeviceType.iPhone && self.version.less(version)
}

class Platform(os : OS, device : Device, text : string) {
    val shadows = os.tp.shadows
    val touch = os.tp.touch
    val interfaceIdiom = device.interfaceIdiom
    val isPhone = interfaceIdiom.isPhone
    val isPad = interfaceIdiom.isPad
    val isComputer = interfaceIdiom.isComputer

    def screenSize : vec2 = device.screenSize
    def screenSizeRatio : float = screenSize.x/screenSize.y
}


class Version(parts : [int]) extends Comparable<Version> {
    static def apply(str : string) : Version = Version(str.split(".").chain.map(_.toInt).toArray)

    override def compare(to : Version) : int = {
        val i = parts.iterator
        val j = to.parts.iterator
        while(i.hasNext && j.hasNext) {
            val vi = i.next
            val vj = j.next
            if(vi != vj) {
                return vi.compare(vj)
            }
        }
        0
    }

    def less(than : string) : bool = compare(Version(str = than)) < 0
    def more(than : string) : bool = compare(Version(str = than)) > 0
}