import CNFile
import CNTypes

import EG
import EGGL
import EGBuffer
import EGMatrix
import EGContext
import EGTypes
import EGMaterial
import EGContext

class EGShaderProgram(handle : GLuint) {
    static def loadFromFiles(vertex : string, fragment : string) : EGShaderProgram =
        EGShaderProgram(CNBundle.readToString(vertex), CNBundle.readToString(fragment))

    static def apply(vertex : string, fragment : string) : EGShaderProgram =  {
        val vertexShader = compileShaderFor(GL_VERTEX_SHADER, vertex)
        val fragmentShader = compileShaderFor(GL_FRAGMENT_SHADER, fragment)
        val program = linkFromShaders(vertexShader, fragmentShader)
        glDeleteShader(vertexShader)
        glDeleteShader(fragmentShader)
        program
    }


    static def linkFromShaders(vertex : GLuint, fragment : GLuint) : EGShaderProgram = {
        val handle = glCreateProgram
        glAttachShader(handle, vertex)
        glAttachShader(handle, fragment)
        glLinkProgram(handle)
        egGetProgramError(handle).for(throw "Error in shader program linking: " + _)
        EGShaderProgram(handle)
    }

    static def compileShaderFor(shaderType : GLenum, source : string) : GLuint = {
        val shader = glCreateShader(shaderType)
        egShaderSource(shader, source)
        glCompileShader(shader)
        egGetShaderError(shader).for(throw  "Error in shader compiling : " + _ + source)
        shader
    }

    def dealoc {
        glDeleteProgram(handle)
    }

    def set {
        glUseProgram(handle)
    }

    def clear {
        glUseProgram(0)
    }

    def apply(draw : () -> void) {
        glUseProgram(handle)
        draw()
        glUseProgram(0)
    }

    def attributeFor(name : string ) : EGShaderAttribute = {
        val h = egGetAttribLocation(handle, name)
        if(h < 0) throw "Could not found attribute for name " + name
        val ret = EGShaderAttribute(h)
        ret
    }
    def uniformFor(name : string ) : EGShaderUniform = {
        val h = egGetUniformLocation(handle, name)
        if(h < 0) throw "Could not found attribute for name " + name
        EGShaderUniform(h)
    }
}

class EGShader<M extends EGMaterial>(program : EGShaderProgram) {
    def apply(context : EGContext, material : M, draw : () -> void) {
        glUseProgram(program.handle)
        load(context, material)
        draw()
        glUseProgram(0)
    }

    def load(context : EGContext, material : M)

    def attributeFor(name : string ) = program.attributeFor(name)
    def uniformFor(name : string ) = program.uniformFor(name)
}

class EGShaderAttribute(handle : GLuint) {
    def setFromBufferWith(stride : uint, valuesCount : uint, valuesType : GLenum, shift : uint) {
        glEnableVertexAttribArray(handle)
        egVertexAttribPointer(handle, valuesCount, valuesType, GL_FALSE, stride, shift)
    }
}

class EGShaderUniform(handle : GLuint) {
    def set(matrix : EGMatrix) {
        glUniformMatrix4fv(handle, 1, GL_FALSE, matrix.array)
    }
    def set(color : EGColor) {
        egUniformColor(handle, color)
    }
    def set(vec3 : EGVec3) {
        egUniformVec3(handle, vec3)
    }
    def set(number : float4) {
        glUniform1f(handle, number)
    }
}

trait EGShaderSystem<M extends EGMaterial> {
    def apply(context : EGContext, material : M, draw : () -> void)  {
        val shader = shaderFor(context, material)
        shader(context, material, draw)
    }

    def shaderFor(context : EGContext, material : M) : EGShader
}


