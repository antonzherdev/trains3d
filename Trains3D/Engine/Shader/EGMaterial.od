import EGTypes
import EG
import EGGL
import EGShader
import EGMesh
import EGSimpleShaderSystem
import EGStandardShaderSystem

export EGTexture

class EGColorSource {
    static def apply(color : EGColor) : EGColorSource = EGColorSourceColor(color)
    static def apply(texture : EGTexture) : EGColorSource = EGColorSourceTexture(texture)
}

class EGColorSourceColor(color : EGColor) extends EGColorSource
class EGColorSourceTexture(texture : EGTexture) extends EGColorSource


class EGMaterial {
    def shaderSystem : EGShaderSystem<self>
    def draw(mesh : EGMesh) {
        shaderSystem.draw(self, mesh)
    }

    static def apply(color : EGColor) : EGMaterial = EGStandardMaterial(color)
    static def apply(texture : EGTexture) : EGMaterial = EGStandardMaterial(texture)
}

class EGSimpleMaterial(color : EGColorSource) extends EGMaterial {
    def shaderSystem : EGShaderSystem<self> = EGSimpleShaderSystem.instance
}

class EGStandardMaterial(diffuse : EGColorSource, specularColor : EGColor, specularSize : float)  extends EGMaterial {
    static def apply(diffuse : EGColorSource) = EGStandardMaterial(diffuse, EGColor(0, 0, 0, 1), 1)
    def shaderSystem : EGShaderSystem<self> = EGStandardShaderSystem.instance
}

class EGMeshModel(meshes : [(EGMesh, EGMaterial)]) {
    def draw {
        meshes.for(p -> p.b.draw(mesh = p.a))
    }
}


