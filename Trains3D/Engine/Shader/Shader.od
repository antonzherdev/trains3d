package com.antonzherdev.eg

class ShaderProgram(handle : GLuint) {
    static def loadFromFiles(vertex : string, fragment : string) : ShaderProgram =
        ShaderProgram(Bundle.readToString(vertex), Bundle.readToString(fragment))

    static def apply(vertex : string, fragment : string) : ShaderProgram =  {
        val vertexShader = compileShaderFor(GL_VERTEX_SHADER, vertex)
        val fragmentShader = compileShaderFor(GL_FRAGMENT_SHADER, fragment)
        val program = linkFromShaders(vertexShader, fragmentShader)
        glDeleteShader(vertexShader)
        glDeleteShader(fragmentShader)
        program
    }


    static def linkFromShaders(vertex : GLuint, fragment : GLuint) : ShaderProgram = {
        val handle = glCreateProgram
        glAttachShader(handle, vertex)
        glAttachShader(handle, fragment)
        glLinkProgram(handle)
        egGetProgramError(handle).for(throw "Error in shader program linking: " + _)
        ShaderProgram(handle)
    }

    static def compileShaderFor(shaderType : uint4, source : string) : GLuint = {
        val shader = glCreateShader(shaderType)
        egShaderSource(shader, source)
        glCompileShader(shader)
        egGetShaderError(shader).for(throw  "Error in shader compiling : " + _ + source)
        shader
    }

    def dealoc {
        glDeleteProgram(handle)
    }

    def attributeFor(name : string ) : ShaderAttribute = {
        val h = egGetAttribLocation(handle, name)
        if(h < 0) throw "Could not found attribute for name " + name
        val ret = ShaderAttribute(h)
        ret
    }

    static val version : int = egGLSLVersion
}

class Shader<P>(program : ShaderProgram) {
    def draw(param : P, mesh : Mesh<_>) {
        draw(param, mesh.vertex, mesh.index)
    }

    def draw(param : P, vertex : VertexSource, index : IndexSource) {
        context.bindShaderProgram(program)
        vertex.bindWith(shader = self)
        loadUniforms(param)
        context.draw
        index.draw
        vertex.unbindWith(shader = self)
    }

    def loadAttributes(vbDesc : VertexBufferDesc<_>)
    def loadUniforms(param : P)

    private def uniform(name : string) = {
        val h = egGetUniformLocation(program.handle, name)
        if(h < 0) throw "Could not found attribute for name " + name
        h
    }

    def uniformMat4(name : string ) = ShaderUniformMat4(uniform(name))
    def uniformVec4(name : string ) = ShaderUniformVec4(uniform(name))
    def uniformVec3(name : string ) = ShaderUniformVec3(uniform(name))
    def uniformVec2(name : string ) = ShaderUniformVec2(uniform(name))
    def uniformF4(name : string ) = ShaderUniformF4(uniform(name))
    def uniformI4(name : string ) = ShaderUniformI4(uniform(name))
    def attributeFor(name : string ) = program.attributeFor(name)

    def vaoWith(vbo : VertexBuffer<_>) : VertexArray = {
        val vao = VertexArray([vbo])
        vao.bind
        vbo.bind
        loadAttributes(vbo.desc)
        vao.unbind
        vao
    }
}

class ShaderAttribute(handle : GLuint) {
    def setFromBufferWith(stride : uint, valuesCount : uint, valuesType : uint4, shift : uint) {
        glEnableVertexAttribArray(handle)
        egVertexAttribPointer(handle, valuesCount, valuesType, GL_FALSE, stride, shift)
    }
}

class ShaderUniformMat4(handle : GLuint) {
    private var _last = mat4.null

    def apply(matrix : mat4) {
        if(matrix != _last) {
            _last = matrix
            glUniformMatrix4fv(handle, 1, GL_FALSE, matrix.array)
        }
    }
}

class ShaderUniformVec4(handle : GLuint) {
    private var _last = vec4(0, 0, 0, 0)
    def apply(vec4 : vec4) {
        if(vec4 != _last) {
            egUniformVec4(handle, vec4)
            _last = vec4
        }
    }
}

class ShaderUniformVec3(handle : GLuint) {
    private var _last = vec3(0, 0, 0)
    def apply(vec3 : vec3) {
        if(vec3 != _last) {
            egUniformVec3(handle, vec3)
            _last = vec3
        }
    }
}

class ShaderUniformVec2(handle : GLuint) {
    private var _last = vec2(0, 0)
    def apply(vec2 : vec2) {
        if(vec2 != _last) {
            egUniformVec2(handle, vec2)
            _last = vec2
        }
    }
}

class ShaderUniformF4(handle : GLuint) {
    private var _last : float4 = 0
    def apply(f4 : float4) {
        if(f4 != _last) {
            glUniform1f(handle, f4)
            _last = f4
        }
    }
}

class ShaderUniformI4(handle : GLuint) {
    private var _last : int4 = 0
    def apply(i4 : int4) {
        if(i4 != _last) {
            glUniform1i(handle, i4)
            _last = i4
        }
    }
}

class ShaderSystem<P> {
    def draw(param : P, vertex : VertexSource, index : IndexSource) {
        val shader = shaderFor(param)
        shader.draw(param, vertex, index)
    }

    def shaderFor(param : P) : Shader<_>

    def vaoWith(param : P, vbo : VertexBuffer<_>) : VertexArray = shaderFor(param).vaoWith(vbo)
}



trait ShaderTextBuilder {
    def versionString = "#version $version"
    def vertexHeader = "#version $version"
    def fragmentHeader =
        "#version $version
         $fragColorDeclaration"
    def fragColorDeclaration = if(isFragColorDeclared) "" else "out lowp vec4 fragColor;"
    def isFragColorDeclared = ShaderProgram.version < 110

    def version : int = ShaderProgram.version

    def ain = if(version < 150) "attribute" else "in"
    def in = if(version < 150) "varying" else "in"
    def out = if(version < 150) "varying" else "out"
    def fragColor = if(version > 100) "fragColor" else "gl_FragColor"
    def texture2D = if(version > 100) "texture" else "texture2D"
}
