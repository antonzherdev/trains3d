package com.antonzherdev.eg

class SimpleShaderSystem extends ShaderSystem<SimpleMaterial> {
    static val instance = SimpleShaderSystem()
    private static val colorShader = SimpleColorShader()
    private static val textureShader = SimpleTextureShader()

    def shaderFor(material : SimpleMaterial) : Shader = case(material.color)
        ColorSourceColor(_) -> colorShader
        ColorSourceTexture(_) -> textureShader

}

class SimpleShader(program : ShaderProgram) extends Shader<SimpleMaterial, MeshData>(program) {
    static val UV_SHIFT = 0
    static val POSITION_SHIFT = 5*4
}

class SimpleColorShader extends SimpleShader(ShaderProgram(SimpleColorShader.colorVertexProgram, SimpleColorShader.colorFragmentProgram)) {
    static val colorVertexProgram =
        "attribute vec3 position;
         uniform mat4 mvp;

         void main(void) {
            gl_Position = mvp * vec4(position, 1);
         }"
    static val colorFragmentProgram =
        "uniform vec4 color;

         void main(void) {
             gl_FragColor = color;
         }"
    val positionSlot : ShaderAttribute = attributeFor("position")
    val colorUniform = uniformFor("color")
    val mvpUniform = uniformFor("mvp")

    def load(vertexBuffer : VertexBuffer<_>, material : SimpleMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, POSITION_SHIFT)
        mvpUniform.set(matrix = matrix.value.mwcp)
        colorUniform.set(color = material.color.cast<ColorSourceColor>.color)
    }
}

class SimpleTextureShader extends SimpleShader<SimpleMaterial>(ShaderProgram(SimpleTextureShader.textureVertexProgram, SimpleTextureShader.textureFragmentProgram)) {
    static val textureVertexProgram =
        "attribute vec2 vertexUV;
         attribute vec3 position;
         uniform mat4 mvp;

         varying vec2 UV;

         void main(void) {
            gl_Position = mvp * vec4(position, 1);
            UV = vertexUV;
         }"
    static val textureFragmentProgram =
        "varying vec2 UV;
         uniform sampler2D texture;

         void main(void) {
            gl_FragColor = texture2D(texture, UV);
         }"
    val uvSlot : ShaderAttribute = attributeFor("vertexUV")
    val positionSlot : ShaderAttribute = attributeFor("position")
    val mvpUniform = uniformFor("mvp")

    def load(vertexBuffer : VertexBuffer<_>, material : SimpleMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, POSITION_SHIFT)
        mvpUniform.set(matrix = matrix.value.mwcp)

        uvSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, UV_SHIFT)
        material.color.cast<ColorSourceTexture>.texture.bind
    }

    def unload(material : SimpleMaterial) {
        Texture.unbind
    }
}
