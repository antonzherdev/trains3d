package com.antonzherdev.eg

class SimpleShaderSystem extends ShaderSystem<ColorSource> {
    static val instance = SimpleShaderSystem()
    private static val colorShader = SimpleColorShader()
    private static val textureShader = SimpleTextureShader()

    def shaderFor(param : ColorSource) : Shader<Material> =
        if(context.renderTarget.is<ShadowRenderTarget>) ShadowShaderSystem.shaderFor(param)
        else if(param.texture.isEmpty) colorShader else textureShader
}


class SimpleShaderBuilder(texture : bool) extends ShaderTextBuilder {
    def vertex =
       "$vertexHeader
        $ain highp vec3 position;
        uniform mat4 mvp;

       $if(texture)
        $ain mediump vec2 vertexUV;
        $out mediump vec2 UV;
       $endif

        void main(void) {
            gl_Position = mvp * vec4(position, 1);
            UV = vertexUV; $when(texture)
        }"
    val fragment =
       "$fragmentHeader
       $if(texture)
        $in mediump vec2 UV;
        uniform lowp sampler2D texture;
       $endif
        uniform lowp vec4 color;

        void main(void) {
           $if(texture)
            $fragColor = color * $texture2D\(texture, UV);
           $else
            $fragColor = color;
           $endif
        }"

    def program = ShaderProgram(vertex, fragment)
}


class SimpleColorShader extends Shader<ColorSource>(SimpleShaderBuilder(false).program) {

    val positionSlot : ShaderAttribute = attributeFor("position")
    val colorUniform = uniformFor("color")
    val mvpUniform = uniformFor("mvp")

    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mvpUniform.set(matrix = matrix.value.mwcp)
        colorUniform.set(vec4 = param.color)
    }

    def unload(param : ColorSource) {
        positionSlot.unbind
    }
}

class SimpleTextureShader extends Shader<ColorSource>(SimpleShaderBuilder(true).program) {
    val uvSlot : ShaderAttribute = attributeFor("vertexUV")
    val positionSlot : ShaderAttribute = attributeFor("position")
    val mvpUniform = uniformFor("mvp")
    val colorUniform = uniformFor("color")

    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mvpUniform.set(matrix = matrix.value.mwcp)

        uvSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, vbDesc.uv)
        colorUniform.set(vec4 = param.color)
        param.texture.get.bind
    }

    def unload(param : ColorSource) {
        Texture.unbind
        positionSlot.unbind
        uvSlot.unbind
    }
}
