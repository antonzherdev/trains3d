package com.antonzherdev.eg

class SimpleShaderSystem extends ShaderSystem<ColorSource> {
    static val instance = SimpleShaderSystem()
    private static val colorShader = SimpleColorShader()
    private static val textureShader = SimpleTextureShader()

    def shaderFor(param : ColorSource) : Shader<Material> =
        if(context.isShadowsDrawing) ShadowShaderSystem.shaderFor(param)
        else if(param.texture.isEmpty) colorShader else textureShader
}


class SimpleColorShader extends Shader<ColorSource>(ShaderProgram(SimpleColorShader.colorVertexProgram, SimpleColorShader.colorFragmentProgram)) {
    static val colorVertexProgram =
        "#version 150
         in vec3 position;
         uniform mat4 mvp;

         void main(void) {
            gl_Position = mvp * vec4(position, 1);
         }"
    static val colorFragmentProgram =
        "#version 150
         uniform vec4 color;
         out vec4 outColor;
         void main(void) {
             outColor = color;
         }"
    val positionSlot : ShaderAttribute = attributeFor("position")
    val colorUniform = uniformFor("color")
    val mvpUniform = uniformFor("mvp")

    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mvpUniform.set(matrix = matrix.value.mwcp)
        colorUniform.set(vec4 = param.color)
    }

    def unload(param : ColorSource) {
        positionSlot.unbind
    }
}

class SimpleTextureShader extends Shader<ColorSource>(ShaderProgram(SimpleTextureShader.textureVertexProgram, SimpleTextureShader.textureFragmentProgram)) {
    static val textureVertexProgram =
        "#version 150
         in vec2 vertexUV;
         in vec3 position;
         uniform mat4 mvp;

         out vec2 UV;

         void main(void) {
            gl_Position = mvp * vec4(position, 1);
            UV = vertexUV;
         }"
    static val textureFragmentProgram =
        "#version 150
         in vec2 UV;
         uniform sampler2D texture;
         uniform vec4 color;
         out vec4 outColor;

         void main(void) {
             outColor = color * texture(texture, UV);
         }"
    val uvSlot : ShaderAttribute = attributeFor("vertexUV")
    val positionSlot : ShaderAttribute = attributeFor("position")
    val mvpUniform = uniformFor("mvp")
    val colorUniform = uniformFor("color")

    def load(vbDesc : VertexBufferDesc<_>, param : ColorSource) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mvpUniform.set(matrix = matrix.value.mwcp)

        uvSlot.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, vbDesc.uv)
        colorUniform.set(vec4 = param.color)
        param.texture.get.bind
    }

    def unload(param : ColorSource) {
        Texture.unbind
        positionSlot.unbind
        uvSlot.unbind
    }
}
