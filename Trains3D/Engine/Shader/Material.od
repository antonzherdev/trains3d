package com.antonzherdev.eg


class Material {
    def shaderSystem : ShaderSystem<self>
    def draw(mesh : Mesh<_>) {
        shaderSystem.draw(self, mesh)
    }
    def draw(vb : VertexBuffer<_>, index : PArray<uint4>, mode : GLenum) {
        shaderSystem.draw(self, vb, index, mode)
    }

    static def apply(color : vec4) : Material = StandardMaterial(diffuse = color)
    static def apply(texture : Texture) : Material = StandardMaterial(diffuse = texture)
}

class ColorSource(color : vec4, texture : Texture?) extends Material {
    static def apply(color : vec4) : ColorSource = ColorSource(color, nil)
    static def apply(texture : Texture) : ColorSource = ColorSource(vec4(1, 1, 1, 1), texture)
    def shaderSystem : ShaderSystem<self> = SimpleShaderSystem.instance
}

class StandardMaterial(diffuse : ColorSource, specularColor : vec4, specularSize : float)  extends Material {
    static def apply(diffuse : ColorSource) = StandardMaterial(diffuse, vec4(0, 0, 0, 1), 1)
    def shaderSystem : ShaderSystem<self> = StandardShaderSystem.instance
}

class MeshModel(meshes : [(Mesh, Material)]) {
    def draw {
        meshes.for(p -> p.b.draw(mesh = p.a))
    }
}

struct BlendFunction(source : GLenum, destination : GLenum) {
    static val standard : BlendFunction = BlendFunction(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    static val premultiplied : BlendFunction = BlendFunction(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)
    def apply(draw : () -> void) {
        glEnable(GL_BLEND)
        glBlendFunc(source, destination)

        draw()
        glDisable(GL_BLEND)
    }
}


