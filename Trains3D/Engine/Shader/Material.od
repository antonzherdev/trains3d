package com.antonzherdev.eg


class Material {
    def shaderSystem : ShaderSystem<self>
    def draw(mesh : Mesh<_>) {
        shaderSystem.draw(self, mesh)
    }
    def draw(vb : VertexBuffer<_>, index : PArray<uint4>, mode : uint4) {
        shaderSystem.draw(self, vb, index, mode)
    }

    def draw(vb : VertexBuffer<_>, mode : uint4) {
        shaderSystem.draw(self, vb, mode)
    }
    def draw(vao : VertexArray, indexBuffer : IndexBuffer) {
        shaderSystem.draw(self, vao = vao, indexBuffer)
    }

    static def apply(color : vec4) : Material = StandardMaterial(diffuse = color)
    static def apply(texture : Texture) : Material = StandardMaterial(diffuse = texture)
}

class ColorSource(color : vec4, texture : Texture?, alphaTestLevel : float4) extends Material {
    static def apply(color : vec4, texture : Texture) : ColorSource = ColorSource(color, texture, -1)
    static def apply(color : vec4) : ColorSource = ColorSource(color, nil, -1)
    static def apply(texture : Texture) : ColorSource = ColorSource(vec4(1, 1, 1, 1), texture, -1)
    def shaderSystem : ShaderSystem<self> = SimpleShaderSystem.instance
}

class StandardMaterial(diffuse : ColorSource, specularColor : vec4, specularSize : float)  extends Material {
    static def apply(diffuse : ColorSource) = StandardMaterial(diffuse, vec4(0, 0, 0, 1), 1)
    def shaderSystem : ShaderSystem<self> = StandardShaderSystem.instance
}

class MeshModel(meshes : [(Mesh, Material)]) {
    def draw {
        meshes.for(p -> p.b.draw(mesh = p.a))
    }
}

class BlendFunction(source : uint4, destination : uint4) {
    static val standard : BlendFunction = BlendFunction(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    static val premultiplied : BlendFunction = BlendFunction(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)
    static private var _lastFunction : BlendFunction
    def apply(draw : () -> void) {
        context.blend.enable
        if(_lastFunction != self) {
            glBlendFunc(source, destination)
            _lastFunction = self
        }
        draw()
        context.blend.disable
    }
}


