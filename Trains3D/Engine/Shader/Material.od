package com.antonzherdev.eg


abstract class Material {
    def shaderSystem : ShaderSystem<self>
    def draw(mesh : Mesh<_>) {
        shaderSystem.draw(self, mesh.vertex, mesh.index)
    }

    def draw(vertex : VertexBuffer<_>, index : IndexSource) {
        shaderSystem.draw(self, vertex, index)
    }
    def shader : Shader<self> = shaderSystem.shaderFor(self)

    static def apply(color : vec4) : Material = StandardMaterial(diffuse = color)
    static def apply(texture : Texture) : Material = StandardMaterial(diffuse = texture)
}

class ColorSource(color : vec4, texture : Texture?, blendMode : BlendMode, alphaTestLevel : float4) extends Material {
    static def apply(color : vec4, texture : Texture) : ColorSource = ColorSource(color, texture, BlendMode.multiply, -1)
    static def apply(color : vec4, texture : Texture, alphaTestLevel : float4) : ColorSource =
        ColorSource(color, texture, BlendMode.multiply, alphaTestLevel)
    static def apply(color : vec4, texture : Texture, blendMode : BlendMode) : ColorSource =
        ColorSource(color, texture, blendMode, -1)
    static def apply(color : vec4) : ColorSource = ColorSource(color, nil, BlendMode.first, -1)
    static def apply(texture : Texture) : ColorSource = ColorSource(vec4(1, 1, 1, 1), texture, BlendMode.second, -1)
    override def shaderSystem : ShaderSystem<self> = SimpleShaderSystem.instance

    def set(color : vec4) = ColorSource(color, texture, blendMode, alphaTestLevel)
    def uv : Rect = texture?.uv?:Rect(0, 0, 1, 1)
}

enum BlendMode(blend : (string, string) -> string) {
    first((a, b) -> a)
    second((a, b) -> b)
    multiply((a, b) -> "$a * $b")
    darken((a, b) -> "min($a, $b)")


}

class StandardMaterial(diffuse : ColorSource, specularColor : vec4, specularSize : float, normalMap : NormalMap?)  extends Material {
    static def apply(diffuse : ColorSource) : StandardMaterial = StandardMaterial(diffuse,
        specularColor = vec4(0, 0, 0, 1), specularSize = 0, normalMap = nil)
    override def shaderSystem : ShaderSystem<self> = StandardShaderSystem.instance
}

class NormalMap(texture : Texture, tangent : bool)

class BlendFunction(source : uint4, destination : uint4) {
    static val standard : BlendFunction = BlendFunction(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    static val premultiplied : BlendFunction = BlendFunction(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)
    static private var _lastFunction : BlendFunction
    def apply(draw : () -> void) {
        context.blend.enable
        if(_lastFunction != self) {
            glBlendFunc(source, destination)
            _lastFunction = self
        }
        draw()
        context.blend.disable
    }
}


