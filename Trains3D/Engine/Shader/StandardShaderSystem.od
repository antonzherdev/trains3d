package com.antonzherdev.eg



class StandardShaderSystem extends ShaderSystem<StandardMaterial> {
    static val instance = StandardShaderSystem()
    def shaderFor(material : StandardMaterial) : Shader = {
        val lightMap = context.environment.lights.chain.group(_.type).toMap
        val directLights = lightMap[DirectLight.type].getOrElse([])
        val key = StandardShaderKey(directLights.count, material.diffuse.is<ColorSourceTexture>)

        shaders.objectFor(key, orUpdateWith = key.shader)
    }

    private static val shaders = MutableHashMap<StandardShaderKey, StandardShader>()
}

class StandardShaderKey(directLightCount : uint, texture : bool) {
    def shader : StandardShader = {
        val vertexShader =
            "attribute vec3 normal;
             attribute vec2 vertexUV; $when(texture)
             attribute vec3 position;
             uniform mat4 mwcp;
             uniform mat4 mwc;
             $lightsVertexUniform

             varying vec2 UV; $when(texture)
             $lightsVaryings

             void main(void) {
                vec3 normalMWC = normalize((mwc * vec4(normal, 0)).xyz);
                vec3 eyeDirection = normalize(-(mwc * vec4(position, 1)).xyz);
                gl_Position = mwcp * vec4(position, 1);
                UV = vertexUV; $when(texture)
                $lightsCalculateVaryings
             }"
        val fragmentShader =
            "
            $if(texture)
             varying vec2 UV;
             uniform sampler2D diffuse;
            $else
             uniform vec4 diffuse;
            $endif
             uniform vec4 ambientColor;
             uniform vec4 specularColor;
             uniform float specularSize;
             $lightsVaryings
             $lightsFragmentUniform

             void main(void) {
                vec4 materialColor = diffuse; $when(!texture)
                vec4 materialColor = texture2D(diffuse, UV); $when(texture)
                vec4 color = ambientColor * materialColor;
                $lightsDiffuse
                gl_FragColor = color;
             }"
        StandardShader(self, ShaderProgram(vertexShader, fragmentShader))
    }

    def lightsVertexUniform : string = directLightCount.range.chain.map{i -> "uniform vec3 dirLightDirection$i;"}.toStringWith("\n")
    def lightsVaryings : string = directLightCount.range.chain.map{i ->
        "varying float dirLightDirectionCos$i;
         varying float dirLightDirectionCosA$i;"}.toStringWith("\n")
    def lightsCalculateVaryings : string = directLightCount.range.chain.map{i ->
        "dirLightDirectionCos$i = max(dot(normalMWC, -normalize(dirLightDirection$i)), 0.0);
         dirLightDirectionCosA$i = max(dot(eyeDirection, reflect(normalize(dirLightDirection$i), normalMWC)), 0.0);
        "
    }.toStringWith("\n")


    def lightsFragmentUniform : string = directLightCount.range.chain.map{i -> "uniform vec4 dirLightColor$i;"}.toStringWith("\n")
    def lightsDiffuse : string =  directLightCount.range.chain.map{i ->
        "color += dirLightDirectionCos$i * (materialColor * dirLightColor$i);
         color += specularColor * dirLightColor$i * pow(dirLightDirectionCosA$i, 5.0/specularSize);
        "
    }.toStringWith("\n")

}

class StandardShader(key : StandardShaderKey, program : ShaderProgram) extends Shader<StandardMaterial, MeshData>(program) {
    static val UV_SHIFT = 0
    static val NORMAL_SHIFT = 2*4
    static val POSITION_SHIFT = 5*4

    val positionSlot : ShaderAttribute = attributeFor("position")
    val normalSlot : ShaderAttribute? = if(key.directLightCount > 0) attributeFor("normal") else nil
    val uvSlot : ShaderAttribute? = if(key.texture) attributeFor("vertexUV") else nil

    val ambientColor : ShaderUniform = uniformFor("ambientColor")
    val specularColor : ShaderUniform = uniformFor("specularColor")
    val specularSize : ShaderUniform = uniformFor("specularSize")
    val diffuseUniform : ShaderUniform = uniformFor("diffuse")
    val mwcpUniform : ShaderUniform = uniformFor("mwcp")
    val mwcUniform : ShaderUniform? = if(key.directLightCount > 0) uniformFor("mwc") else nil

    val directLightDirections : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightDirection$i")}.toArray
    val directLightColors : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightColor$i")}.toArray

    def load(vertexBuffer :VertexBuffer<_>, param : StandardMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, POSITION_SHIFT)
        mwcpUniform.set(matrix = matrix.value.mwcp)
        if(key.texture) {
            uvSlot.get.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, UV_SHIFT)
            param.diffuse.cast<ColorSourceTexture>.texture.bind
        } else {
            diffuseUniform.set(color = param.diffuse.cast<ColorSourceColor>.color)
        }
        specularColor.set(color = param.specularColor)
        specularSize.set(f4 = param.specularSize)
        val env = context.environment
        ambientColor.set(color = env.ambientColor)
        if(key.directLightCount > 0) {
            mwcUniform.get.set(matrix = context.matrixStack.value.mwc)
            normalSlot.get.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, NORMAL_SHIFT)
            env.lights.chain.filterCast(DirectLight.type).zip3(directLightDirections, directLightColors){light, dirSlot, colorSlot ->
                val dir = matrix.value.wc.mul(vec3 = light.direction, 0).xyz
                dirSlot.set(vec3 = dir)
                colorSlot.set(color = light.color)
                light
            }.count
        }
    }

    def unload(material : SimpleMaterial) {
        if(key.texture) Texture.unbind
    }
}