package com.antonzherdev.eg



class StandardShaderSystem extends ShaderSystem<StandardMaterial> {
    static val instance = StandardShaderSystem()
    def shaderFor(param : StandardMaterial) : Shader<Material> =
        if(context.isShadowsDrawing)
            if(ShadowShaderSystem.isColorShaderFor(param.diffuse)) StandardShadowShader.instanceForColor
            else StandardShadowShader.instanceForTexture
        else {
            val lights = context.environment.lights
            val directLightsWithShadowsCount = lights.chain.filter(_.is<DirectLight> && _.hasShadows).count
            val directLightsWithoutShadowsCount = lights.chain.filter(_.is<DirectLight> && !_.hasShadows).count
            val key = StandardShaderKey(directLightsWithShadowsCount, directLightsWithoutShadowsCount, param.diffuse.texture.isDefined)

            shaders.objectFor(key, orUpdateWith = key.shader)
        }

    private static val shaders = MutableHashMap<StandardShaderKey, StandardShader>()
}

class StandardShadowShader(shadowShader : ShadowShader) extends Shader<StandardMaterial> {
    static val instanceForColor = StandardShadowShader(ShadowShader.instanceForColor)
    static val instanceForTexture = StandardShadowShader(ShadowShader.instanceForTexture)

    def load(vbDesc : VertexBufferDesc<_>, param : StandardMaterial) {
        shadowShader.load(vbDesc, param.diffuse)
    }
    def unload(param : StandardMaterial) {
        shadowShader.unload(param.diffuse)
    }
}

class StandardShaderKey(directLightWithShadowsCount : uint, directLightWithoutShadowsCount : uint, texture : bool) {
    val directLightCount = directLightWithShadowsCount + directLightWithoutShadowsCount
    def shader : StandardShader = {
        val vertexShader =
            "#version 150
             in vec3 normal;
             in vec2 vertexUV; $when(texture)
             in vec3 position;
             uniform mat4 mwcp;
             uniform mat4 mwc;
             $lightsVertexUniform

             out vec2 UV; $when(texture)
             $lightsOut

             void main(void) {
                vec3 normalMWC = normalize((mwc * vec4(normal, 0)).xyz);
                vec3 eyeDirection = normalize(-(mwc * vec4(position, 1)).xyz);
                gl_Position = mwcp * vec4(position, 1);
                UV = vertexUV; $when(texture)
                $lightsCalculateVaryings
             }"
        val fragmentShader =
            "#version 150
            $if(texture)
             in vec2 UV;
             uniform sampler2D diffuseTexture;
            $endif
             uniform vec4 diffuseColor;
             uniform vec4 ambientColor;
             uniform vec4 specularColor;
             uniform float specularSize;
             $lightsIn
             $lightsFragmentUniform
             out vec4 outColor;

             void main(void) {
                float visibility;$when(directLightWithShadowsCount > 0)
                vec4 materialColor = diffuseColor; $when(!texture)
                vec4 materialColor = diffuseColor * texture(diffuseTexture, UV); $when(texture)
                vec4 color = ambientColor * materialColor;
                $lightsDiffuse
                outColor = color;
             }"
        StandardShader(self, ShaderProgram(vertexShader, fragmentShader))
    }

    def lightsVertexUniform : string = directLightCount.range.chain.map{i ->
        "uniform vec3 dirLightDirection$i;
        $if(i < directLightWithShadowsCount)
         uniform mat4 dirLightDepthMwcp$i;
        $endif
        "}.toStringWith("\n")
    def lightsIn : string = directLightCount.range.chain.map{i ->
        "in float dirLightDirectionCos$i;
         in float dirLightDirectionCosA$i;
        $if(i < directLightWithShadowsCount)
         in vec3 dirLightShadowCoord$i;
        $endif
        "}.toStringWith("\n")
    def lightsOut : string = directLightCount.range.chain.map{i ->
        "out float dirLightDirectionCos$i;
         out float dirLightDirectionCosA$i;
        $if(i < directLightWithShadowsCount)
         out vec3 dirLightShadowCoord$i;
        $endif
        "}.toStringWith("\n")
    def lightsCalculateVaryings : string = directLightCount.range.chain.map{i ->
        "dirLightDirectionCos$i = max(dot(normalMWC, -dirLightDirection$i), 0.0);
         dirLightDirectionCosA$i = max(dot(eyeDirection, reflect(dirLightDirection$i, normalMWC)), 0.0);
        $if(i < directLightWithShadowsCount)
         dirLightShadowCoord$i = (dirLightDepthMwcp$i * vec4(position, 1)).xyz;
        $endif
        "
    }.toStringWith("\n")


    def lightsFragmentUniform : string = directLightCount.range.chain.map{i ->
        "uniform vec4 dirLightColor$i;
        $if(i < directLightWithShadowsCount)
         uniform sampler2D dirLightShadow$i;
        $endif"}.toStringWith("\n")
    def lightsDiffuse : string =  directLightCount.range.chain.map{i ->
        "
        $if(i < directLightWithShadowsCount)
         visibility = 1.0;
         if(texture(dirLightShadow$i, dirLightShadowCoord$i.xy).x < dirLightShadowCoord$i.z + 0.2) {
             visibility = 0.5;
         }
         color += visibility * dirLightDirectionCos$i * (materialColor * dirLightColor$i);
         color += visibility * specularColor * dirLightColor$i * pow(dirLightDirectionCosA$i, 5.0/specularSize);
//         color = vec4(texture(dirLightShadow$i, dirLightShadowCoord$i.xy).x, dirLightShadowCoord$i.z, 0, 1);
        $else
         color += dirLightDirectionCos$i * (materialColor * dirLightColor$i);
         color += specularColor * dirLightColor$i * pow(dirLightDirectionCosA$i, 5.0/specularSize);
        $endif
        "
    }.toStringWith("\n")

}

class StandardShader(key : StandardShaderKey, program : ShaderProgram) extends Shader<StandardMaterial>(program) {
    val positionSlot : ShaderAttribute = attributeFor("position")
    val normalSlot : ShaderAttribute? = if(key.directLightCount > 0) attributeFor("normal") else nil
    val uvSlot : ShaderAttribute? = if(key.texture) attributeFor("vertexUV") else nil

    val diffuseTexture : ShaderUniform? = if(key.texture) uniformFor("diffuseTexture") else nil
    val ambientColor : ShaderUniform = uniformFor("ambientColor")
    val specularColor : ShaderUniform = uniformFor("specularColor")
    val specularSize : ShaderUniform = uniformFor("specularSize")
    val diffuseColorUniform : ShaderUniform = uniformFor("diffuseColor")
    val mwcpUniform : ShaderUniform = uniformFor("mwcp")
    val mwcUniform : ShaderUniform? = if(key.directLightCount > 0) uniformFor("mwc") else nil

    val directLightDirections : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightDirection$i")}.toArray
    val directLightColors : [ShaderUniform] = key.directLightCount.range.chain.map{i -> uniformFor("dirLightColor$i")}.toArray
    val directLightShadows : [ShaderUniform] = key.directLightWithShadowsCount.range.chain.map{i -> uniformFor("dirLightShadow$i")}.toArray
    val directLightDepthMwcp : [ShaderUniform] = key.directLightWithShadowsCount.range.chain.map{i -> uniformFor("dirLightDepthMwcp$i")}.toArray

    def load(vbDesc :VertexBufferDesc<_>, param : StandardMaterial) {
        positionSlot.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.position)
        mwcpUniform.set(matrix = matrix.value.mwcp)
        if(key.texture) {
            uvSlot.get.setFromBufferWith(vbDesc.stride, valuesCount = 2, GL_FLOAT, vbDesc.uv)
            param.diffuse.texture.get.bind
            diffuseTexture.get.set(i4 = 0)
        }
        diffuseColorUniform.set(vec4 = param.diffuse.color)
        specularColor.set(vec4 = param.specularColor)
        specularSize.set(f4 = param.specularSize)
        val env = context.environment
        ambientColor.set(vec4 = env.ambientColor)
        if(key.directLightCount > 0) {
            mwcUniform.get.set(matrix = context.matrixStack.value.mwc)
            normalSlot.get.setFromBufferWith(vbDesc.stride, valuesCount = 3, GL_FLOAT, vbDesc.normal)
            var i : uint = 0
            if(key.directLightWithShadowsCount > 0) {
                env.lights.chain.filter(_.is<DirectLight> && _.hasShadows).for { light ->
                    val dir = matrix.value.wc.mul(vec3 = light.cast<DirectLight>.direction, 0).xyz
                    directLightDirections[i].set(vec3 = dir.normalize)
                    directLightColors[i].set(vec4 = light.color)
                    directLightDepthMwcp[i].set(matrix = light.shadowMap.biasDepthCp * matrix.mw)
                    directLightShadows[i].set(i4 = i + 1)
                    glActiveTexture(GL_TEXTURE0 + i + 1)
                    light.shadowMap.texture.bind
                    glActiveTexture(GL_TEXTURE0)
                    i++
                }
            }
            if(key.directLightWithoutShadowsCount > 0) {
                env.lights.chain.filter(_.is<DirectLight> && !_.hasShadows).for { light ->
                    val dir = matrix.value.wc.mul(vec3 = light.cast<DirectLight>.direction, 0).xyz
                    directLightDirections[i].set(vec3 = dir.normalize)
                    directLightColors[i].set(vec4 = light.color)
                }
            }
        }
    }

    def unload(param : StandardMaterial) {
        if(key.texture) {
            Texture.unbind
            uvSlot.get.unbind
        }
        if(key.directLightCount > 0) {
            normalSlot.get.unbind
        }
        positionSlot.unbind
    }
}