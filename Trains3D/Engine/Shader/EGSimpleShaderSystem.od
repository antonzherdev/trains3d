package com.antonzherdev.eg

import CNTypes

import EGGL
import EGShader
import EGTypes
import EG
import EGTexture
import EGMaterial

class EGSimpleShaderSystem extends EGShaderSystem<EGSimpleMaterial> {
    static val instance = EGSimpleShaderSystem()
    private static val colorShader = EGSimpleColorShader()
    private static val textureShader = EGSimpleTextureShader()

    def shaderFor(material : EGSimpleMaterial) : EGShader = case(material.color)
        EGColorSourceColor(_) -> colorShader
        EGColorSourceTexture(_) -> textureShader

}

class EGSimpleShader(program : EGShaderProgram) extends EGShader(program) {
    static val UV_SHIFT = 0
    static val POSITION_SHIFT = 5*4
}

class EGSimpleColorShader extends EGSimpleShader<EGSimpleMaterial>(EGShaderProgram(EGSimpleColorShader.colorVertexProgram, EGSimpleColorShader.colorFragmentProgram)) {
    static val colorVertexProgram =
        "attribute vec3 position;
         uniform mat4 mvp;

         void main(void) {
            gl_Position = mvp * vec4(position, 1);
         }"
    static val colorFragmentProgram =
        "uniform vec4 color;

         void main(void) {
             gl_FragColor = color;
         }"
    val positionSlot : EGShaderAttribute = attributeFor("position")
    val colorUniform = uniformFor("color")
    val mvpUniform = uniformFor("mvp")

    def load(vertexBuffer : EGVertexBuffer<_>, material : EGSimpleMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, POSITION_SHIFT)
        mvpUniform.set(matrix = EG.matrix.value.mwcp)
        colorUniform.set(color = material.color.cast<EGColorSourceColor>.color)
    }
}

class EGSimpleTextureShader extends EGSimpleShader<EGSimpleMaterial>(EGShaderProgram(EGSimpleTextureShader.textureVertexProgram, EGSimpleTextureShader.textureFragmentProgram)) {
    static val textureVertexProgram =
        "attribute vec2 vertexUV;
         attribute vec3 position;
         uniform mat4 mvp;

         varying vec2 UV;

         void main(void) {
            gl_Position = mvp * vec4(position, 1);
            UV = vertexUV;
         }"
    static val textureFragmentProgram =
        "varying vec2 UV;
         uniform sampler2D texture;

         void main(void) {
            gl_FragColor = texture2D(texture, UV);
         }"
    val uvSlot : EGShaderAttribute = attributeFor("vertexUV")
    val positionSlot : EGShaderAttribute = attributeFor("position")
    val mvpUniform = uniformFor("mvp")

    def load(vertexBuffer : EGVertexBuffer<_>, material : EGSimpleMaterial) {
        positionSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 3, GL_FLOAT, POSITION_SHIFT)
        mvpUniform.set(matrix = EG.matrix.value.mwcp)

        uvSlot.setFromBufferWith(vertexBuffer.stride, valuesCount = 2, GL_FLOAT, UV_SHIFT)
        material.color.cast<EGColorSourceTexture>.texture.bind
    }

    def unload(material : EGSimpleMaterial) {
        EGTexture.unbind
    }
}
