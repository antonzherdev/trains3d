package com.antonzherdev.eg

stub class EGDynamicWorld<T>(gravity : EGVec3) extends EGController {
    private val _bodies = CNMutableArray<EGRigidBody<T>>()
    def bodies : [EGRigidBody<T>] = _bodies
    def add(body : EGRigidBody<T>) {
        _bodies.add(body)
    }
    def remove(body : EGRigidBody<T>) {
        _bodies.remove(body)
    }
}

stub class EGRigidBody<T>(data : T, shape : EGCollisionShape, isKinematic : bool, mass : float4) {
    var friction : float4

    val isDynamic = !isKinematic && mass > 0
    val isStatic = !isKinematic && mass <= 0
    static def kinematic<T>(data : T, shape : EGCollisionShape) = EGRigidBody<T>(data, shape, true, 0)
    static def dynamic<T>(data : T, shape : EGCollisionShape, mass : float4) = EGRigidBody<T>(data, shape, false, mass)
    static def statical<T>(data : T, shape : EGCollisionShape) = EGRigidBody<T>(data, shape, false, 0)
    val obj : VoidRef = nil
    def matrix : EGMatrix
    def set(matrix : EGMatrix)

    def velocity : EGVec3
    def set(velocity : EGVec3)
}