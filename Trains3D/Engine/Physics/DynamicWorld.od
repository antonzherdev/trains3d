package com.antonzherdev.eg

stub class DynamicWorld<T>(gravity : vec3) extends PhysicsWorld<T> with Updatable {
    def bodies : [RigidBody<T>]
    def add(body : RigidBody<T>)
    def remove(body : RigidBody<T>) : bool
    def collisions : Iterable<DynamicCollision<T>>
    def newCollisions : Iterable<DynamicCollision<T>>
    def bodyFor(item : T) : RigidBody<T>?
}

stub class RigidBody<T>(data : T, shape : CollisionShape, isKinematic : bool, mass : float4) extends PhysicsBody<T> {
    var friction : float4
    var bounciness : float4
    var matrix : mat4
    var velocity : vec3
    var angularVelocity : vec3

    val isDynamic = !isKinematic && mass > 0
    val isStatic = !isKinematic && mass <= 0
    static def kinematic<T>(data : T, shape : CollisionShape) = RigidBody<T>(data, shape, true, 0)
    static def dynamic<T>(data : T, shape : CollisionShape, mass : float4) = RigidBody<T>(data, shape, false, mass)
    static def statical<T>(data : T, shape : CollisionShape) = RigidBody<T>(data, shape, false, 0)
    val obj : VoidRef = nil
}