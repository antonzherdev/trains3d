package com.antonzherdev.eg

trait IndexSource {
    def draw
    def drawWith(start : uint, count : uint)
}

class IndexBuffer(handle : GLuint, mode : uint4) extends Buffer<uint4>(UInt4.type, GL_ELEMENT_ARRAY_BUFFER, handle) with IndexSource {
    static def apply : IndexBuffer = IndexBuffer(egGenBuffer, GL_TRIANGLES)

    def draw {
        bind
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, 0)
    }

    def drawWith(start : uint, count : uint) {
        bind
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, 4*start)
    }

    def bind {
        context.bindIndexBuffer(handle)
    }
}

class EmptyIndexSource(mode : uint4) extends IndexSource {
    static val triangleStrip = EmptyIndexSource(GL_TRIANGLE_STRIP)
    static val triangles = EmptyIndexSource(GL_TRIANGLES)
    static val lines = EmptyIndexSource(GL_LINES)

    def draw {
        glDrawArrays(mode, 0, context.vertexSource.count)
    }

    def drawWith(start : uint, count : uint) {
        glDrawArrays(mode, start, count)
    }
}

class ArrayIndexSource(array : PArray<uint4>, mode : uint4) extends IndexSource {
    def draw {
        context.bindIndexBuffer(0)
        glDrawElements(mode, array.count, GL_UNSIGNED_INT, array.bytes)
    }

    def drawWith(start : uint, count : uint) {
        context.bindIndexBuffer(0)
        glDrawElements(mode, count, GL_UNSIGNED_INT, array.bytes + 4*start)
    }
}

class VoidRefArrayIndexSource(array : VoidRefArray, mode : uint4) extends IndexSource {
    def draw {
        context.bindIndexBuffer(0)
        glDrawElements(mode, array.length/4, GL_UNSIGNED_INT, array.bytes)
    }

    def drawWith(start : uint, count : uint) {
        context.bindIndexBuffer(0)
        glDrawElements(mode, count, GL_UNSIGNED_INT, array.bytes + 4*start)
    }
}

class IndexSourceGap(source : IndexSource, start : uint4, count : uint4) extends IndexSource {
    def draw {
        source.drawWith(start, count)
    }

    def drawWith(start : uint, count : uint) {
        source.drawWith(self.start + start, count)
    }
}
