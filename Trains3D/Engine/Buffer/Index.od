package com.antonzherdev.eg

trait IndexSource {
    def bind {}
    def draw
    def drawWith(start : uint, count : uint)
    def isMutable = false
    def isEmpty = false
}

object IBO {
    static def apply(array : VoidRefArray<uint4>) : ImmutableIndexBuffer = {
        val ib = ImmutableIndexBuffer(egGenBuffer, GL_TRIANGLES, array.length, array.length/4)
        ib.bind
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, array.length, array.bytes, GL_STATIC_DRAW)
        ib
    }

    static def apply(data : PArray<uint4>) : ImmutableIndexBuffer = {
        val ib = ImmutableIndexBuffer(egGenBuffer, GL_TRIANGLES, data.length, data.count)
        ib.bind
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, data.length, data.bytes, GL_STATIC_DRAW)
        ib
    }

    static def mut : MutableIndexBuffer = MutableIndexBuffer(egGenBuffer, GL_TRIANGLES)
    static def mut(mode : uint4) : MutableIndexBuffer = MutableIndexBuffer(egGenBuffer, mode)
}

trait IndexBuffer extends IndexSource {
    def handle : uint4
    def mode : uint4
    def count : uint

    override def draw {
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, VoidRef(0))
        egCheckError
    }

    override def drawWith(start : uint, count : uint) {
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, VoidRef(4*start))
        egCheckError
    }
}

class ImmutableIndexBuffer(handle : uint4, override mode : uint4, override length : uint, override count : uint)
    extends Buffer<uint4>(UInt4.type, GL_ELEMENT_ARRAY_BUFFER, handle)
    with IndexBuffer
{
    override def bind {
        context.bindIndexBuffer(handle)
    }
}


class MutableIndexBuffer(handle : uint4, override mode : uint4)
    extends MutableBuffer<uint4>(UInt4.type, GL_ELEMENT_ARRAY_BUFFER, handle)
    with IndexBuffer
{
    override def isMutable = true
    override def bind {
        context.bindIndexBuffer(handle)
    }
    override def isEmpty = false
}

class IndexBufferRing(ringSize : uint4, mode : uint4)
    extends BufferRing<uint4, MutableIndexBuffer>(ringSize, creator = MutableIndexBuffer(egGenBuffer, mode))

class EmptyIndexSource(mode : uint4) extends IndexSource {
    static val triangleStrip = EmptyIndexSource(GL_TRIANGLE_STRIP)
    static val triangleFan = EmptyIndexSource(GL_TRIANGLE_FAN)
    static val triangles = EmptyIndexSource(GL_TRIANGLES)
    static val lines = EmptyIndexSource(GL_LINES)

    override def draw {
        context.draw
        glDrawArrays(mode, 0, context.vertexBufferCount)
        egCheckError
    }

    override def drawWith(start : uint, count : uint) {
        context.draw
        glDrawArrays(mode, start, count)
        egCheckError
    }
}

class ArrayIndexSource(array : PArray<uint4>, mode : uint4) extends IndexSource {
    override def draw {
        context.bindIndexBuffer(0)
        glDrawElements(mode, array.count, GL_UNSIGNED_INT, array.bytes)
        egCheckError
    }

    override def drawWith(start : uint, count : uint) {
        context.bindIndexBuffer(0)
        glDrawElements(mode, count, GL_UNSIGNED_INT, array.bytes + 4*start)
        egCheckError
    }
}

class VoidRefArrayIndexSource(array : VoidRefArray, mode : uint4) extends IndexSource {
    override def bind {
        context.bindIndexBuffer(0)
    }

    override def draw {
        context.draw
        glDrawElements(mode, array.length/4, GL_UNSIGNED_INT, array.bytes)
    }

    override def drawWith(start : uint, count : uint) {
        context.draw
        glDrawElements(mode, count, GL_UNSIGNED_INT, array.bytes + 4*start)
        egCheckError
    }
}

class IndexSourceGap(source : IndexSource, start : uint4, count : uint4) extends IndexSource {
    override def bind {
        source.bind
    }

    override def draw {
        source.drawWith(start, count)
    }

    override def drawWith(start : uint, count : uint) {
        source.drawWith(self.start + start, count)
    }
}

class MutableIndexSourceGap(source : IndexSource) extends IndexSource {
    var start : uint4 = 0
    var count : uint4 = 0
    override def bind {
        source.bind
    }

    override def draw {
        source.drawWith(start, count)
    }

    override def drawWith(start : uint, count : uint) {
        source.drawWith(self.start + start, count)
    }
}
