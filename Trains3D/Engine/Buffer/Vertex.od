package com.antonzherdev.eg


class VertexBufferDesc<T>(dataType : PType<T>, position : int4, uv : int4, normal : int4, color : int4, model : int4)
{
    def stride : uint4 = dataType.size

    static def Vec2 = VertexBufferDesc<vec2>(vec2.type, -1, 0, -1, -1, 0)
    static def Vec3 = VertexBufferDesc<vec3>(vec3.type, 0, 0, 0, -1, 0)
    static def Vec4 = VertexBufferDesc<vec4>(vec4.type, 0, 0, 0, 0, 0)
    static def mesh = VertexBufferDesc<MeshData>(MeshData.type, position = 5*4, uv = 0, normal = 2*4, color = -1, model = -1)
}

object VBO {
    static def apply<T>(desc : VertexBufferDesc<T>, array : VoidRefArray<T>) : VertexBuffer<T> = {
        val vb = ImmutableVertexBuffer<T>(desc, egGenBuffer, array.length, array.length/desc.dataType.size)
        vb.bind
        glBufferData(GL_ARRAY_BUFFER, array.length, array.bytes, GL_STATIC_DRAW)
        vb
    }

    static def apply<T>(desc : VertexBufferDesc<T>, data : PArray<T>) : VertexBuffer<T> = {
        val vb = ImmutableVertexBuffer<T>(desc, egGenBuffer, data.length, data.count)
        vb.bind
        glBufferData(GL_ARRAY_BUFFER, data.length, data.bytes, GL_STATIC_DRAW)
        vb
    }
    static def vec4(data : PArray<vec4>) = VBO<vec4>(VertexBufferDesc.Vec4, data)
    static def vec3(data : PArray<vec3>) = VBO<vec3>(VertexBufferDesc.Vec3, data)
    static def vec2(data : PArray<vec2>) = VBO<vec2>(VertexBufferDesc.Vec2, data)
    static def mesh(data : PArray<MeshData>) = VBO<MeshData>(VertexBufferDesc.mesh, data)

    static def mut<T>(desc : VertexBufferDesc<T>) : MutableVertexBuffer<T> = MutableVertexBuffer<T>(desc, egGenBuffer)
    static def ring<T>(size : uint4, desc : VertexBufferDesc<T>) : VertexBufferRing<T> = VertexBufferRing<T>(size, desc)
    static def mutVec2 = MutableVertexBuffer<vec2>(VertexBufferDesc.Vec2, egGenBuffer)
    static def mutVec3 = MutableVertexBuffer<vec3>(VertexBufferDesc.Vec3, egGenBuffer)
    static def mutVec4 = MutableVertexBuffer<vec4>(VertexBufferDesc.Vec4, egGenBuffer)
    static def mutMesh = MutableVertexBuffer<MeshData>(VertexBufferDesc.mesh, egGenBuffer)
}


trait VertexBuffer<T> {
    def desc : VertexBufferDesc<T>
    def bind {
        context.bindVertexBuffer(self)
    }
    def count : uint
    def handle : uint4
    def isMutable = false
}

class ImmutableVertexBuffer<T>(desc : VertexBufferDesc<T>, handle : uint4, length : uint, count : uint)
    extends Buffer<T>(desc.dataType, GL_ARRAY_BUFFER, handle)
    with VertexBuffer<T>


class MutableVertexBuffer<T>(desc : VertexBufferDesc<T>, handle : uint4)
    extends MutableBuffer<T>(desc.dataType, GL_ARRAY_BUFFER, handle)
    with VertexBuffer<T>
{
    def isMutable = true
}


class VertexBufferRing<T>(ringSize : uint4, desc : VertexBufferDesc<T>)
    extends BufferRing<T, MutableVertexBuffer<T>>(ringSize, creator = MutableVertexBuffer(desc, egGenBuffer))