import CNData

import EG
import EGGL

class EGBuffer<T>(bufferType : GLenum, handle : GLuint) {
    private var _length : uint = 0
    private var _count : uint = 0
    def length : uint = _length
    def count : uint = _count
    static def apply<T>(bufferType : GLenum) : EGBuffer = EGBuffer<T>(bufferType, egGenBuffer)

    def dealoc {
        egDeleteBuffer(handle)
    }

    def set(data : CNPArray<T>) : self = set(data, GL_STATIC_DRAW)

    def set(data : CNPArray<T>, usage : GLenum) : self = {
        glBindBuffer(bufferType, handle)
        glBufferData(bufferType, data.length, data.bytes, GL_STATIC_DRAW)
        glBindBuffer(bufferType, 0)
        _length = data.length
        _count = data.count
        self
    }

    def bind {
        glBindBuffer(bufferType, handle)
    }

    def unbind {
        glBindBuffer(bufferType, 0)
    }

    def apply(draw : () -> void) {
        bind
        draw()
        unbind
    }
}

class EGVertexBuffer<T>(stride : uint, handle : GLuint) extends EGBuffer<T>(GL_ARRAY_BUFFER, handle) {
    static def apply<T>(stride : uint) : EGVertexBuffer<T> = EGVertexBuffer<T>(stride, egGenBuffer)
}

class EGIndexBuffer<T>(handle : GLuint) extends EGBuffer<T>(GL_ELEMENT_ARRAY_BUFFER, handle) {
    static def apply<T> : EGIndexBuffer<T> = EGIndexBuffer<T>(egGenBuffer)

    def draw {
        bind
        glDrawElements(GL_TRIANGLES, count, GL_UNSIGNED_INT, 0)
        unbind
    }
}

stub val GL_ARRAY_BUFFER : GLenum
stub val GL_ELEMENT_ARRAY_BUFFER : GLenum

stub val GL_STATIC_DRAW : GLenum