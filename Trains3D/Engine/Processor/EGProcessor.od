package com.antonzherdev.eg

trait EGProcessor {
    def process(event : EGEvent) : bool
}

trait EGMouseProcessor {
    def mouseDown(event : EGEvent) : bool = false
    def mouseDrag(event : EGEvent)  : bool = false
    def mouseUp(event : EGEvent) : bool = false
}

trait EGTouchProcessor {
    def touchBegan(event : EGEvent) : bool = false
    def touchMoved(event : EGEvent) : bool = false
    def touchEnded(event : EGEvent) : bool = false
    def touchCanceled(event : EGEvent) : bool = false
}

class EGEvent(viewSize : vec2, camera : EGCamera?) {
    def set(camera : EGCamera?) : EGEvent

    def locationInView : vec2
    def location = locationFor(0)
    def locationFor(depth : float) : vec2 =
        if(camera.isEmpty) locationInView
        else camera.get.translateWith(viewSize, locationInView)

    def isLeftMouseDown : bool
    def isLeftMouseDrag : bool
    def isLeftMouseUp : bool
    def leftMouse(processor : EGMouseProcessor) : bool =
        if(isLeftMouseDown) processor.mouseDown(self)
        else if(isLeftMouseDrag) processor.mouseDrag(self)
        else if(isLeftMouseUp) processor.mouseUp(self)
        else false


    def isTouchBegan : bool
    def isTouchMoved : bool
    def isTouchEnded : bool
    def isTouchCanceled : bool
    def touch(processor : EGTouchProcessor) : bool =
        if(isTouchBegan) processor.touchBegan(self)
        else if(isTouchMoved) processor.touchMoved(self)
        else if(isTouchEnded) processor.touchEnded(self)
        else if(isTouchCanceled) processor.touchCanceled(self)
        else false
}
