import EGTypes

trait EGProcessor {
    def process(event : EGEvent) : bool
}

trait EGMouseProcessor {
    def down(event : EGEvent) : bool = false
    def drag(event : EGEvent)  : bool = false
    def up(event : EGEvent) : bool = false
}

class EGEvent(viewSize : CGSize, camera : EGCamera?) {
    def set(camera : EGCamera) : EGEvent

    def locationInView : CGPoint
    def location = locationFor(0)
    def locationFor(depth : float) : CGPoint =
        if(camera.isEmpty) locationInView
        else camera.get.translate(locationInView, viewSize)

    def isLeftMouseDown : bool
    def isLeftMouseDrag : bool
    def isLeftMouseUp : bool
    def leftMouse(processor : EGMouseProcessor) : bool = {
        if(isLeftMouseDown) processor.down(self)
        else if(isLeftMouseDrag) processor.drag(self)
        else if(isLeftMouseUp) processor.up(self)
        else false
    }
}

