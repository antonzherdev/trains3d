package core

import CNRange
import ODType

stub class ODObject {
    def is<T> : bool
    def as<T> : T?
    def cast<T> : T
    def description : string
    static def type : Type<self>
    static def class : Class
}


stub class NSObject {
}

stub trait ODComparable<T> {
    def compare(to : T) : int
}

stub struct ODInt extends ODComparable<int> {
    def compare(to : int) : int
    def range : CNRange
    def to(: int) : CNRange
    def between(from : float, to : float) : bool
}

stub struct ODUInt extends ODComparable<uint> {
    def compare(to : uint) : int
    def range : CNRange
    def to(: uint) : CNRange
    def between(from : float, to : float) : bool
}

stub struct ODFloat extends ODComparable<float> {
    def compare(to : float) : int
    def between(from : float, to : float) : bool
}

stub val DBL_MAX : float
stub val DBL_MIN : float
stub def max(a : float, b : float) : float
stub def min(a : float, b : float) : float
