package core

import CNRange
import ODType

stub class ODObject {
    def is<T> : bool
    def as<T> : T?
    def cast<T> : T
    def description : string
    def hash : uint
    static def type : Type<self>
    static def class : Class
}


stub class NSObject {
}

stub trait ODComparable<T> {
    def compare(to : T) : int
}

stub struct ODByte extends ODComparable<byte> {
    def compare(to : byte) : byte
    def range : CNRange
    def to(: byte) : CNRange
    def between(from : byte, to : byte) : bool
}


stub struct ODInt extends ODComparable<int> {
    def compare(to : int) : int
    def range : CNRange
    def to(: int) : CNRange
    def between( : int, : int) : bool
}

stub struct ODUInt extends ODComparable<uint> {
    def compare(to : uint) : int
    def range : CNRange
    def to(: uint) : CNRange
    def between( : uint, : uint) : bool
}

stub struct ODUInt4 extends ODComparable<uint4> {
    def compare(to : uint4) : int
    def range : CNRange
    def to(: uint4) : CNRange
    def between( : uint4, : uint4) : bool
}

stub struct ODFloat extends ODComparable<float> {
    def compare(to : float) : int
    def between( : float, : float) : bool
}

stub struct ODFloat4 extends ODComparable<float4> {
    def compare(to : float4) : int
    def between( : float4, : float4) : bool
}


stub object ODMath {
    val DBL_MAX : float
    val DBL_MIN : float
    def max(a : float, b : float) : float
    def min(a : float, b : float) : float
    def randomMax(: uint) : uint
    def randomFloat : float
    def randomFloatGap(s : float, e : float) : float
    def randomPercents(:float) : float

    val M_PI : float
    val M_PI_2 : float
    val M_PI_4 : float
    def round(: float) : float
    def lround(: float) : int
    def sin(:float) : float
    def cos(:float) : float
    def fabs(:float) : float
    def atan2(:float, :float) : float
    def atan(:float) : float
    def sqrt(:float) : float
}

