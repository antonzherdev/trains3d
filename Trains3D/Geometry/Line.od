package com.antonzherdev.geometry

struct Line2(r0 : vec2, u : vec2) {
    static def apply(p0 : vec2, p1 : vec2) : Line2 = Line2(r0 = p0, u = p1 - p0)
    def r(t : float4) = r0 + u*t

    def r(plane : Plane) = r0 + u*( plane.n.dot(plane.p0 - r0)/plane.n.dot(u) )
    def angle = u.angle
    def degreeAngle = u.degreeAngle

    def set(length : float4) : Line2 = Line2(r0, u = u.set(length = length))
    def normalize : Line2 = Line2(r0, u = u.normalize)
    def mid : vec2  = r0 + u/2
    def r1 : vec2 = r0 + u

    def add(vec2 : vec2) = Line2(r0 + vec2, u)
    def sub(vec2 : vec2) = Line2(r0 - vec2, u)
}


struct Line3(r0 : vec3, u : vec3) {
    def r(t : float4) = r0 + u*t

    def r(plane : Plane) = r0 + u*( plane.n.dot(plane.p0 - r0)/plane.n.dot(u) )
}

struct Plane(p0 : vec3, n : vec3) {
    def contains(vec3 : vec3) = n.dot(vec3 - p0) == 0

    def add(vec3 : vec3) = Plane(p0 + vec3, n)
}

struct PlaneCoord(plane : Plane, x : vec3, y : vec3) {
    static def apply(plane : Plane, x : vec3) : PlaneCoord = PlaneCoord(plane, x, x.cross(plane.n))

    def p(vec2 : vec2) : vec3 = plane.p0 + x*vec2.x + y*vec2.y

    def add(vec3 : vec3) = PlaneCoord(plane + vec3, x, y)

    def set(x : vec3) = PlaneCoord(plane, x, y)
    def set(y : vec3) = PlaneCoord(plane, x, y)
}


struct Quad3(planeCoord : PlaneCoord, quad : Quad) {
    def p0 = planeCoord.p(quad.p[0])
    def p1 = planeCoord.p(quad.p[1])
    def p2 = planeCoord.p(quad.p[2])
    def p3 = planeCoord.p(quad.p[3])

    def p : [vec3] = [p0, p1, p2, p3]
}