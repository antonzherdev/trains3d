package com.antonzherdev.geometry

import core.math._

struct vec2(x : float4, y : float4) extends Comparable<vec2> {
    static def apply(vec2i : vec2i) = vec2(vec2i.x, vec2i.y)

    def add(vec2 : vec2) = vec2(x + vec2.x, y + vec2.y)
    def add(f4 : float4) = vec2(x + f4, y + f4)
    def add(f : float) = vec2(x + f, y + f)
    def add(i : int) = vec2(x + i, y + i)

    def sub(vec2 : vec2) = vec2(x - vec2.x, y - vec2.y)
    def sub(f4 : float4) = vec2(x - f4, y - f4)
    def sub(f : float) = vec2(x - f, y - f)
    def sub(i : int) = vec2(x - i, y - i)

    def mul(vec2 : vec2) = vec2(x*vec2.x, y*vec2.y)
    def mul(f4 : float4) = vec2(x*f4, y*f4)
    def mul(f : float) = vec2(x*f, y*f)
    def mul(i : int) = vec2(x*i, y*i)

    def div(vec2 : vec2) = vec2(x/vec2.x, y/vec2.y)
    def div(f4 : float4) = vec2(x/f4, y/f4)
    def div(f : float) = vec2(x/f, y/f)
    def div(i : int) = vec2(x/i, y/i)

    def negate = vec2(-x, -y)
    def degreeAngle : float4 = 180.0 / M_PI * atan2(y, x)
    def angle : float4 = atan2(y, x)
    def dot(vec2 : vec2) : float4 = x*vec2.x + y*vec2.y
    def lengthSquare : float4 = dot(self)
    def length = sqrt(lengthSquare)

    def mid(vec2 : vec2) = add(vec2).mul(0.5)
    def distanceTo(vec2 : vec2) = sub(vec2).length
    def set(length : float4) = mul(length/self.length)
    def normalize = set(length = 1.0)

    def compare(to : vec2) : int = {
        val dX = x.compare(to.x)
        if(dX != 0) dX else y.compare(to.y)
    }

    def rectTo(vec2 : vec2) : Rect = Rect(self, vec2.sub(self))
    def rectInCenterWith(size : vec2) : Rect = Rect((size - self)*0.5, self)
    static def rnd = vec2(Float4.rnd - 0.5, Float4.rnd - 0.5)
    def isEmpty : bool = x == 0 && y == 0
    def round : vec2i = vec2i(x.round, y.round)
}

struct vec2i(x : int, y : int) extends Comparable<vec2i> {
    static def apply(vec2 : vec2) = vec2i(vec2.x.round, vec2.y.round)

    def add(vec2 : vec2) = vec2(x + vec2.x, y + vec2.y)
    def add(vec2i : vec2i) = vec2i(x + vec2i.x, y + vec2i.y)
    def sub(vec2 : vec2) = vec2(x - vec2.x, y - vec2.y)
    def sub(vec2i : vec2i) = vec2i(x - vec2i.x, y - vec2i.y)
    def mul(i : int) = vec2i(x*i, y*i)
    def mul(f : float) = vec2(x.cast<float4>*f, y.cast<float4>*f)
    def mul(f4 : float4) = vec2(x.cast<float4>*f4, y.cast<float4>*f4)
    def div(f4 : float4) = vec2(x.cast<float4>/f4, y.cast<float4>/f4)
    def div(f : float) = vec2(x.cast<float4>/f, y.cast<float4>/f)
    def div(i : int) = vec2i(x/i, y/i)
    def negate = vec2i(-x, -y)

    def compare(to : vec2i) : int = {
        val dX = x.compare(to.x)
        if(dX != 0) dX else y.compare(to.y)
    }
    def rectTo(vec2i : vec2i) : RectI = RectI(self, vec2i.sub(self))
}

struct vec3(x : float4, y : float4, z : float4) {
    static def apply(vec2 : vec2) = vec3(vec2.x, vec2.y, 0)
    static def apply(vec2 : vec2, z : float4) = vec3(vec2.x, vec2.y, z)
    def add(vec3 : vec3) = vec3(x + vec3.x, y + vec3.y, z + vec3.z)
    def sub(vec3 : vec3) = vec3(x - vec3.x, y - vec3.y, z - vec3.z)
    def sqr = mul(length)
    def negate = vec3(-x, -y, -z)
    def mul(k : float4) = vec3(k*x, k*y, k*z)
    def dot(vec3 : vec3) : float4 = x*vec3.x + y*vec3.y + z*vec3.z
    def cross(vec3 : vec3) : vec3 = vec3(y*vec3.z - z*vec3.y, x*vec3.z - vec3.x*z, x*vec3.y - vec3.x*y)
    def lengthSquare : float4 = x*x + y*y + z*z
    def length = sqrt(lengthSquare)
    def set(length : float4) = mul(length/self.length)
    def normalize = set(length = 1.0)
    def xy = vec2(x, y)
    static def rnd = vec3(Float4.rnd - 0.5, Float4.rnd - 0.5, Float4.rnd - 0.5)
    def isEmpty : bool = x == 0 && y == 0 && z == 0
}

struct vec4(x : float4, y : float4, z : float4, w : float4) {
    static def apply(vec3 : vec3, w : float4) = vec4(vec3.x, vec3.y, vec3.z, w)
    static def apply(vec2 : vec2, z : float4, w : float4) = vec4(vec2.x, vec2.y, z, w)
    def add(vec2 : vec2) : vec4 = vec4(x + vec2.x, y + vec2.y, z, w)
    def add(vec3 : vec3) : vec4 = vec4(x + vec3.x, y + vec3.y, z + vec3.z, w)
    def add(vec4 : vec4) : vec4 = vec4(x + vec4.x, y + vec4.y, z + vec4.z, w + vec4.w)
    def xyz = vec3(x, y, z)
    def xy = vec2(x, y)
    def mul(k : float4) = vec4(k*x, k*y, k*z, k*w)
    def div(mat4 : mat4) :vec4 = mat4.divBySelf(vec4 = self)
    def div(f4 : float4) = vec4(x/f4, y/f4, z/f4, w/f4)
    def div(f : float) = vec4(x/f, y/f, z/f, w/f)
    def div(i : int) = vec4(x/i, y/i, z/i, w/i)

    def lengthSquare : float4 = x*x + y*y + z*z + w*w
    def length = sqrt(lengthSquare)
    def set(length : float4) = mul(length/self.length)
    def normalize = set(length = 1.0)
}

struct Quad(p : vec2[4]) {
    static def apply(p0 : vec2, p1 : vec2, p2 : vec2, p3 : vec2) : Quad = Quad(p = [p0, p1, p2, p3])
    static val identity : Quad = Quad(p = [vec2(0, 0), vec2(1, 0), vec2(1, 1), vec2(0, 1)])
    static def apply(size : float4) : Quad = Quad(p = [vec2(-size, -size), vec2(size, -size), vec2(size, size), vec2(-size, size)])
    def mul(value : float4) : Quad = Quad(p =[p[0].mul(value), p[1].mul(value), p[2].mul(value), p[3].mul(value)])
    def add(vec2 : vec2) : Quad = Quad(p = [p[0] + vec2, p[1] + vec2, p[2] + vec2, p[3] + vec2])
    def add(x : float4, y : float4) : Quad = add(vec2(x, y))

    def quadrant :Quadrant = {
        val x = (p[1].x - p[0].x)/2
        val y = (p[3].y - p[0].y)/2
        val q = self*0.5 + p[0]
        Quadrant([q, q.add(x, 0), q.add(x, y), q.add(0, y)])
    }
    def apply(index : uint) : vec2 = p[index]
    def boundingRect : Rect = {
        var minX = Float.max
        var maxX = Float.min
        var minY = Float.max
        var maxY = Float.min
        var i = 0
        while(i < 4) {
            val pp = p[i]
            if(pp.x < minX) minX = pp.x
            if(pp.x > maxX) maxX = pp.x
            if(pp.y < minY) minY = pp.y
            if(pp.y > maxY) maxY = pp.y
            i++
        }
        vec2(minX, minY).rectTo(vec2(maxX, maxY))
    }
}

struct Quadrant(quads : Quad[4]) {
    def rndQuad = quads[UInt.rnd(3)]
}

struct Rect(p0 : vec2, size : vec2) {
    static def apply(x : float4, y : float4, width : float4, height : float4) = Rect(vec2(x, y), vec2(width, height))

    def x = p0.x
    def y = p0.y
    def x2 : float4 = p0.x + size.x
    def y2 : float4 = p0.y + size.y
    def width : float4 = size.x
    def height : float4 = size.y
    def contains(vec2 : vec2) : bool =
        p0.x <= vec2.x
        && vec2.x <= p0.x + size.x
        && p0.y <= vec2.y
        && vec2.y <= p0.y + size.y

    def add(vec2 : vec2) = Rect(p0 + vec2, size)
    def sub(vec2 : vec2) = Rect(p0 - vec2, size)
    def mul(f : float) = Rect(p0*f, size*f)
    def mul(vec2 : vec2) = Rect(p0*vec2, size*vec2)

    def intersects(rect : Rect) : bool =
        p0.x <= rect.x2 && x2 >= rect.p0.x &&
        p0.y <= rect.y2 && y2 >= rect.p0.y

    def thicken(halfSize : vec2) = Rect(p0.sub(halfSize), size + halfSize*2)
    def div(vec2 : vec2) = Rect(p0/vec2, size/vec2)

    def p1 = vec2(p0.x, p0.y + size.y)
    def p2 = vec2(p0.x + size.x, p0.y)
    def p3 = vec2(p0.x + size.x, p0.y + size.y)
    def moveToCenterFor(size : vec2) = Rect((size - self.size)*0.5, self.size)
    def quad = Quad(p0, p1, p2, p3)
    def upsideDownQuad = Quad(p1, p0, p3, p2)
    def centerX = Rect(vec2(p0.x - size.x/2, p0.y), size)
    def centerY = Rect(vec2(p0.x, p0.y - size.y/2), size)
    def center = p0 + size/2
}
struct RectI(origin : vec2i, size : vec2i) {
    static def apply(x : float4, y : float4, width : float4, height : float4) = RectI(vec2(x, y), vec2(width, height))
    static def apply(rect : Rect) = RectI(rect.p0, rect.size)
    def x = origin.x
    def y = origin.y
    def x2 : int = origin.x + size.x
    def y2 : int = origin.y + size.y
    def width : int = size.x
    def height : int = size.y
    def moveToCenterFor(size : vec2) = RectI(size.sub(self.size).mul(0.5), self.size)
}
