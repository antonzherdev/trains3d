package com.antonzherdev.data

stub class KeyValueStorage(defaults : [string : any]) {
    def set(key : string, i : int)
    def keepMax(key : string, i : int)
    def increment(key : string)
    def decrement(key : string)

    def set(key : string, value : any)

    def set<T>(key : string, array : [T])
    def appendToArray<T>(key : string, value : T) : [T]

    def intFor(key : string) : int
    def arrayFor<T>(key : string) : [T]
    def valueFor<T>(key : string) : T

    def synchronize
}

stub class LocalKeyValueStorage(defaults : [string : any]) extends KeyValueStorage(defaults)

stub class CloudKeyValueStorage(defaults : [string : any],
    resolveConflict : string -> ((any, any) -> any)) extends KeyValueStorage(defaults)
{
    static val valueChangedNotification = NotificationHandle<CloudKeyValueStorage, (string, any)>("CloudKeyValueStorage.changeNotification")

    def observeValueChange(by : (string, any) -> void)
    def observeValueChange(key : string, by : any -> void)
}